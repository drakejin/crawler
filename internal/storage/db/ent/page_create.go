// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/drakejin/crawler/internal/storage/db/ent/page"
	"github.com/drakejin/crawler/internal/storage/db/ent/pagesource"
)

// PageCreate is the builder for creating a Page entity.
type PageCreate struct {
	config
	mutation *PageMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetReferredID sets the "referred_id" field.
func (pc *PageCreate) SetReferredID(s string) *PageCreate {
	pc.mutation.SetReferredID(s)
	return pc
}

// SetCrawlingVersion sets the "crawling_version" field.
func (pc *PageCreate) SetCrawlingVersion(s string) *PageCreate {
	pc.mutation.SetCrawlingVersion(s)
	return pc
}

// SetDomain sets the "domain" field.
func (pc *PageCreate) SetDomain(s string) *PageCreate {
	pc.mutation.SetDomain(s)
	return pc
}

// SetPort sets the "port" field.
func (pc *PageCreate) SetPort(s string) *PageCreate {
	pc.mutation.SetPort(s)
	return pc
}

// SetNillablePort sets the "port" field if the given value is not nil.
func (pc *PageCreate) SetNillablePort(s *string) *PageCreate {
	if s != nil {
		pc.SetPort(*s)
	}
	return pc
}

// SetIsHTTPS sets the "is_https" field.
func (pc *PageCreate) SetIsHTTPS(b bool) *PageCreate {
	pc.mutation.SetIsHTTPS(b)
	return pc
}

// SetNillableIsHTTPS sets the "is_https" field if the given value is not nil.
func (pc *PageCreate) SetNillableIsHTTPS(b *bool) *PageCreate {
	if b != nil {
		pc.SetIsHTTPS(*b)
	}
	return pc
}

// SetIndexedURL sets the "indexed_url" field.
func (pc *PageCreate) SetIndexedURL(s string) *PageCreate {
	pc.mutation.SetIndexedURL(s)
	return pc
}

// SetNillableIndexedURL sets the "indexed_url" field if the given value is not nil.
func (pc *PageCreate) SetNillableIndexedURL(s *string) *PageCreate {
	if s != nil {
		pc.SetIndexedURL(*s)
	}
	return pc
}

// SetPath sets the "path" field.
func (pc *PageCreate) SetPath(s string) *PageCreate {
	pc.mutation.SetPath(s)
	return pc
}

// SetNillablePath sets the "path" field if the given value is not nil.
func (pc *PageCreate) SetNillablePath(s *string) *PageCreate {
	if s != nil {
		pc.SetPath(*s)
	}
	return pc
}

// SetQuerystring sets the "querystring" field.
func (pc *PageCreate) SetQuerystring(s string) *PageCreate {
	pc.mutation.SetQuerystring(s)
	return pc
}

// SetNillableQuerystring sets the "querystring" field if the given value is not nil.
func (pc *PageCreate) SetNillableQuerystring(s *string) *PageCreate {
	if s != nil {
		pc.SetQuerystring(*s)
	}
	return pc
}

// SetURL sets the "url" field.
func (pc *PageCreate) SetURL(s string) *PageCreate {
	pc.mutation.SetURL(s)
	return pc
}

// SetNillableURL sets the "url" field if the given value is not nil.
func (pc *PageCreate) SetNillableURL(s *string) *PageCreate {
	if s != nil {
		pc.SetURL(*s)
	}
	return pc
}

// SetCountReferred sets the "count_referred" field.
func (pc *PageCreate) SetCountReferred(i int64) *PageCreate {
	pc.mutation.SetCountReferred(i)
	return pc
}

// SetNillableCountReferred sets the "count_referred" field if the given value is not nil.
func (pc *PageCreate) SetNillableCountReferred(i *int64) *PageCreate {
	if i != nil {
		pc.SetCountReferred(*i)
	}
	return pc
}

// SetStatus sets the "status" field.
func (pc *PageCreate) SetStatus(pa page.Status) *PageCreate {
	pc.mutation.SetStatus(pa)
	return pc
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (pc *PageCreate) SetNillableStatus(pa *page.Status) *PageCreate {
	if pa != nil {
		pc.SetStatus(*pa)
	}
	return pc
}

// SetCreatedAt sets the "created_at" field.
func (pc *PageCreate) SetCreatedAt(t time.Time) *PageCreate {
	pc.mutation.SetCreatedAt(t)
	return pc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (pc *PageCreate) SetNillableCreatedAt(t *time.Time) *PageCreate {
	if t != nil {
		pc.SetCreatedAt(*t)
	}
	return pc
}

// SetCreatedBy sets the "created_by" field.
func (pc *PageCreate) SetCreatedBy(s string) *PageCreate {
	pc.mutation.SetCreatedBy(s)
	return pc
}

// SetUpdatedAt sets the "updated_at" field.
func (pc *PageCreate) SetUpdatedAt(t time.Time) *PageCreate {
	pc.mutation.SetUpdatedAt(t)
	return pc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (pc *PageCreate) SetNillableUpdatedAt(t *time.Time) *PageCreate {
	if t != nil {
		pc.SetUpdatedAt(*t)
	}
	return pc
}

// SetUpdatedBy sets the "updated_by" field.
func (pc *PageCreate) SetUpdatedBy(s string) *PageCreate {
	pc.mutation.SetUpdatedBy(s)
	return pc
}

// SetTitle sets the "title" field.
func (pc *PageCreate) SetTitle(s string) *PageCreate {
	pc.mutation.SetTitle(s)
	return pc
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (pc *PageCreate) SetNillableTitle(s *string) *PageCreate {
	if s != nil {
		pc.SetTitle(*s)
	}
	return pc
}

// SetDescription sets the "description" field.
func (pc *PageCreate) SetDescription(s string) *PageCreate {
	pc.mutation.SetDescription(s)
	return pc
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (pc *PageCreate) SetNillableDescription(s *string) *PageCreate {
	if s != nil {
		pc.SetDescription(*s)
	}
	return pc
}

// SetKeywords sets the "keywords" field.
func (pc *PageCreate) SetKeywords(s string) *PageCreate {
	pc.mutation.SetKeywords(s)
	return pc
}

// SetNillableKeywords sets the "keywords" field if the given value is not nil.
func (pc *PageCreate) SetNillableKeywords(s *string) *PageCreate {
	if s != nil {
		pc.SetKeywords(*s)
	}
	return pc
}

// SetContentLanguage sets the "content_language" field.
func (pc *PageCreate) SetContentLanguage(s string) *PageCreate {
	pc.mutation.SetContentLanguage(s)
	return pc
}

// SetNillableContentLanguage sets the "content_language" field if the given value is not nil.
func (pc *PageCreate) SetNillableContentLanguage(s *string) *PageCreate {
	if s != nil {
		pc.SetContentLanguage(*s)
	}
	return pc
}

// SetTwitterCard sets the "twitter_card" field.
func (pc *PageCreate) SetTwitterCard(s string) *PageCreate {
	pc.mutation.SetTwitterCard(s)
	return pc
}

// SetNillableTwitterCard sets the "twitter_card" field if the given value is not nil.
func (pc *PageCreate) SetNillableTwitterCard(s *string) *PageCreate {
	if s != nil {
		pc.SetTwitterCard(*s)
	}
	return pc
}

// SetTwitterURL sets the "twitter_url" field.
func (pc *PageCreate) SetTwitterURL(s string) *PageCreate {
	pc.mutation.SetTwitterURL(s)
	return pc
}

// SetNillableTwitterURL sets the "twitter_url" field if the given value is not nil.
func (pc *PageCreate) SetNillableTwitterURL(s *string) *PageCreate {
	if s != nil {
		pc.SetTwitterURL(*s)
	}
	return pc
}

// SetTwitterTitle sets the "twitter_title" field.
func (pc *PageCreate) SetTwitterTitle(s string) *PageCreate {
	pc.mutation.SetTwitterTitle(s)
	return pc
}

// SetNillableTwitterTitle sets the "twitter_title" field if the given value is not nil.
func (pc *PageCreate) SetNillableTwitterTitle(s *string) *PageCreate {
	if s != nil {
		pc.SetTwitterTitle(*s)
	}
	return pc
}

// SetTwitterDescription sets the "twitter_description" field.
func (pc *PageCreate) SetTwitterDescription(s string) *PageCreate {
	pc.mutation.SetTwitterDescription(s)
	return pc
}

// SetNillableTwitterDescription sets the "twitter_description" field if the given value is not nil.
func (pc *PageCreate) SetNillableTwitterDescription(s *string) *PageCreate {
	if s != nil {
		pc.SetTwitterDescription(*s)
	}
	return pc
}

// SetTwitterImage sets the "twitter_image" field.
func (pc *PageCreate) SetTwitterImage(s string) *PageCreate {
	pc.mutation.SetTwitterImage(s)
	return pc
}

// SetNillableTwitterImage sets the "twitter_image" field if the given value is not nil.
func (pc *PageCreate) SetNillableTwitterImage(s *string) *PageCreate {
	if s != nil {
		pc.SetTwitterImage(*s)
	}
	return pc
}

// SetOgSiteName sets the "og_site_name" field.
func (pc *PageCreate) SetOgSiteName(s string) *PageCreate {
	pc.mutation.SetOgSiteName(s)
	return pc
}

// SetNillableOgSiteName sets the "og_site_name" field if the given value is not nil.
func (pc *PageCreate) SetNillableOgSiteName(s *string) *PageCreate {
	if s != nil {
		pc.SetOgSiteName(*s)
	}
	return pc
}

// SetOgLocale sets the "og_locale" field.
func (pc *PageCreate) SetOgLocale(s string) *PageCreate {
	pc.mutation.SetOgLocale(s)
	return pc
}

// SetNillableOgLocale sets the "og_locale" field if the given value is not nil.
func (pc *PageCreate) SetNillableOgLocale(s *string) *PageCreate {
	if s != nil {
		pc.SetOgLocale(*s)
	}
	return pc
}

// SetOgTitle sets the "og_title" field.
func (pc *PageCreate) SetOgTitle(s string) *PageCreate {
	pc.mutation.SetOgTitle(s)
	return pc
}

// SetNillableOgTitle sets the "og_title" field if the given value is not nil.
func (pc *PageCreate) SetNillableOgTitle(s *string) *PageCreate {
	if s != nil {
		pc.SetOgTitle(*s)
	}
	return pc
}

// SetOgDescription sets the "og_description" field.
func (pc *PageCreate) SetOgDescription(s string) *PageCreate {
	pc.mutation.SetOgDescription(s)
	return pc
}

// SetNillableOgDescription sets the "og_description" field if the given value is not nil.
func (pc *PageCreate) SetNillableOgDescription(s *string) *PageCreate {
	if s != nil {
		pc.SetOgDescription(*s)
	}
	return pc
}

// SetOgType sets the "og_type" field.
func (pc *PageCreate) SetOgType(s string) *PageCreate {
	pc.mutation.SetOgType(s)
	return pc
}

// SetNillableOgType sets the "og_type" field if the given value is not nil.
func (pc *PageCreate) SetNillableOgType(s *string) *PageCreate {
	if s != nil {
		pc.SetOgType(*s)
	}
	return pc
}

// SetOgURL sets the "og_url" field.
func (pc *PageCreate) SetOgURL(s string) *PageCreate {
	pc.mutation.SetOgURL(s)
	return pc
}

// SetNillableOgURL sets the "og_url" field if the given value is not nil.
func (pc *PageCreate) SetNillableOgURL(s *string) *PageCreate {
	if s != nil {
		pc.SetOgURL(*s)
	}
	return pc
}

// SetOgImage sets the "og_image" field.
func (pc *PageCreate) SetOgImage(s string) *PageCreate {
	pc.mutation.SetOgImage(s)
	return pc
}

// SetNillableOgImage sets the "og_image" field if the given value is not nil.
func (pc *PageCreate) SetNillableOgImage(s *string) *PageCreate {
	if s != nil {
		pc.SetOgImage(*s)
	}
	return pc
}

// SetOgImageType sets the "og_image_type" field.
func (pc *PageCreate) SetOgImageType(s string) *PageCreate {
	pc.mutation.SetOgImageType(s)
	return pc
}

// SetNillableOgImageType sets the "og_image_type" field if the given value is not nil.
func (pc *PageCreate) SetNillableOgImageType(s *string) *PageCreate {
	if s != nil {
		pc.SetOgImageType(*s)
	}
	return pc
}

// SetOgImageURL sets the "og_image_url" field.
func (pc *PageCreate) SetOgImageURL(s string) *PageCreate {
	pc.mutation.SetOgImageURL(s)
	return pc
}

// SetNillableOgImageURL sets the "og_image_url" field if the given value is not nil.
func (pc *PageCreate) SetNillableOgImageURL(s *string) *PageCreate {
	if s != nil {
		pc.SetOgImageURL(*s)
	}
	return pc
}

// SetOgImageSecureURL sets the "og_image_secure_url" field.
func (pc *PageCreate) SetOgImageSecureURL(s string) *PageCreate {
	pc.mutation.SetOgImageSecureURL(s)
	return pc
}

// SetNillableOgImageSecureURL sets the "og_image_secure_url" field if the given value is not nil.
func (pc *PageCreate) SetNillableOgImageSecureURL(s *string) *PageCreate {
	if s != nil {
		pc.SetOgImageSecureURL(*s)
	}
	return pc
}

// SetOgImageWidth sets the "og_image_width" field.
func (pc *PageCreate) SetOgImageWidth(s string) *PageCreate {
	pc.mutation.SetOgImageWidth(s)
	return pc
}

// SetNillableOgImageWidth sets the "og_image_width" field if the given value is not nil.
func (pc *PageCreate) SetNillableOgImageWidth(s *string) *PageCreate {
	if s != nil {
		pc.SetOgImageWidth(*s)
	}
	return pc
}

// SetOgImageHeight sets the "og_image_height" field.
func (pc *PageCreate) SetOgImageHeight(s string) *PageCreate {
	pc.mutation.SetOgImageHeight(s)
	return pc
}

// SetNillableOgImageHeight sets the "og_image_height" field if the given value is not nil.
func (pc *PageCreate) SetNillableOgImageHeight(s *string) *PageCreate {
	if s != nil {
		pc.SetOgImageHeight(*s)
	}
	return pc
}

// SetOgVideo sets the "og_video" field.
func (pc *PageCreate) SetOgVideo(s string) *PageCreate {
	pc.mutation.SetOgVideo(s)
	return pc
}

// SetNillableOgVideo sets the "og_video" field if the given value is not nil.
func (pc *PageCreate) SetNillableOgVideo(s *string) *PageCreate {
	if s != nil {
		pc.SetOgVideo(*s)
	}
	return pc
}

// SetOgVideoType sets the "og_video_type" field.
func (pc *PageCreate) SetOgVideoType(s string) *PageCreate {
	pc.mutation.SetOgVideoType(s)
	return pc
}

// SetNillableOgVideoType sets the "og_video_type" field if the given value is not nil.
func (pc *PageCreate) SetNillableOgVideoType(s *string) *PageCreate {
	if s != nil {
		pc.SetOgVideoType(*s)
	}
	return pc
}

// SetOgVideoURL sets the "og_video_url" field.
func (pc *PageCreate) SetOgVideoURL(s string) *PageCreate {
	pc.mutation.SetOgVideoURL(s)
	return pc
}

// SetNillableOgVideoURL sets the "og_video_url" field if the given value is not nil.
func (pc *PageCreate) SetNillableOgVideoURL(s *string) *PageCreate {
	if s != nil {
		pc.SetOgVideoURL(*s)
	}
	return pc
}

// SetOgVideoSecureURL sets the "og_video_secure_url" field.
func (pc *PageCreate) SetOgVideoSecureURL(s string) *PageCreate {
	pc.mutation.SetOgVideoSecureURL(s)
	return pc
}

// SetNillableOgVideoSecureURL sets the "og_video_secure_url" field if the given value is not nil.
func (pc *PageCreate) SetNillableOgVideoSecureURL(s *string) *PageCreate {
	if s != nil {
		pc.SetOgVideoSecureURL(*s)
	}
	return pc
}

// SetOgVideoWidth sets the "og_video_width" field.
func (pc *PageCreate) SetOgVideoWidth(s string) *PageCreate {
	pc.mutation.SetOgVideoWidth(s)
	return pc
}

// SetNillableOgVideoWidth sets the "og_video_width" field if the given value is not nil.
func (pc *PageCreate) SetNillableOgVideoWidth(s *string) *PageCreate {
	if s != nil {
		pc.SetOgVideoWidth(*s)
	}
	return pc
}

// SetOgVideoHeight sets the "og_video_height" field.
func (pc *PageCreate) SetOgVideoHeight(s string) *PageCreate {
	pc.mutation.SetOgVideoHeight(s)
	return pc
}

// SetNillableOgVideoHeight sets the "og_video_height" field if the given value is not nil.
func (pc *PageCreate) SetNillableOgVideoHeight(s *string) *PageCreate {
	if s != nil {
		pc.SetOgVideoHeight(*s)
	}
	return pc
}

// SetID sets the "id" field.
func (pc *PageCreate) SetID(s string) *PageCreate {
	pc.mutation.SetID(s)
	return pc
}

// AddPageSourceIDs adds the "page_source" edge to the PageSource entity by IDs.
func (pc *PageCreate) AddPageSourceIDs(ids ...string) *PageCreate {
	pc.mutation.AddPageSourceIDs(ids...)
	return pc
}

// AddPageSource adds the "page_source" edges to the PageSource entity.
func (pc *PageCreate) AddPageSource(p ...*PageSource) *PageCreate {
	ids := make([]string, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pc.AddPageSourceIDs(ids...)
}

// Mutation returns the PageMutation object of the builder.
func (pc *PageCreate) Mutation() *PageMutation {
	return pc.mutation
}

// Save creates the Page in the database.
func (pc *PageCreate) Save(ctx context.Context) (*Page, error) {
	var (
		err  error
		node *Page
	)
	if err := pc.defaults(); err != nil {
		return nil, err
	}
	if len(pc.hooks) == 0 {
		if err = pc.check(); err != nil {
			return nil, err
		}
		node, err = pc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*PageMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = pc.check(); err != nil {
				return nil, err
			}
			pc.mutation = mutation
			if node, err = pc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(pc.hooks) - 1; i >= 0; i-- {
			if pc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = pc.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, pc.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*Page)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from PageMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (pc *PageCreate) SaveX(ctx context.Context) *Page {
	v, err := pc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pc *PageCreate) Exec(ctx context.Context) error {
	_, err := pc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pc *PageCreate) ExecX(ctx context.Context) {
	if err := pc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pc *PageCreate) defaults() error {
	if _, ok := pc.mutation.Port(); !ok {
		v := page.DefaultPort
		pc.mutation.SetPort(v)
	}
	if _, ok := pc.mutation.IsHTTPS(); !ok {
		v := page.DefaultIsHTTPS
		pc.mutation.SetIsHTTPS(v)
	}
	if _, ok := pc.mutation.IndexedURL(); !ok {
		v := page.DefaultIndexedURL
		pc.mutation.SetIndexedURL(v)
	}
	if _, ok := pc.mutation.Path(); !ok {
		v := page.DefaultPath
		pc.mutation.SetPath(v)
	}
	if _, ok := pc.mutation.Querystring(); !ok {
		v := page.DefaultQuerystring
		pc.mutation.SetQuerystring(v)
	}
	if _, ok := pc.mutation.URL(); !ok {
		v := page.DefaultURL
		pc.mutation.SetURL(v)
	}
	if _, ok := pc.mutation.CountReferred(); !ok {
		v := page.DefaultCountReferred
		pc.mutation.SetCountReferred(v)
	}
	if _, ok := pc.mutation.Status(); !ok {
		v := page.DefaultStatus
		pc.mutation.SetStatus(v)
	}
	if _, ok := pc.mutation.CreatedAt(); !ok {
		if page.DefaultCreatedAt == nil {
			return fmt.Errorf("ent: uninitialized page.DefaultCreatedAt (forgotten import ent/runtime?)")
		}
		v := page.DefaultCreatedAt()
		pc.mutation.SetCreatedAt(v)
	}
	if _, ok := pc.mutation.UpdatedAt(); !ok {
		if page.DefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized page.DefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := page.DefaultUpdatedAt()
		pc.mutation.SetUpdatedAt(v)
	}
	if _, ok := pc.mutation.Title(); !ok {
		v := page.DefaultTitle
		pc.mutation.SetTitle(v)
	}
	if _, ok := pc.mutation.Description(); !ok {
		v := page.DefaultDescription
		pc.mutation.SetDescription(v)
	}
	if _, ok := pc.mutation.Keywords(); !ok {
		v := page.DefaultKeywords
		pc.mutation.SetKeywords(v)
	}
	if _, ok := pc.mutation.ContentLanguage(); !ok {
		v := page.DefaultContentLanguage
		pc.mutation.SetContentLanguage(v)
	}
	if _, ok := pc.mutation.TwitterCard(); !ok {
		v := page.DefaultTwitterCard
		pc.mutation.SetTwitterCard(v)
	}
	if _, ok := pc.mutation.TwitterURL(); !ok {
		v := page.DefaultTwitterURL
		pc.mutation.SetTwitterURL(v)
	}
	if _, ok := pc.mutation.TwitterTitle(); !ok {
		v := page.DefaultTwitterTitle
		pc.mutation.SetTwitterTitle(v)
	}
	if _, ok := pc.mutation.TwitterDescription(); !ok {
		v := page.DefaultTwitterDescription
		pc.mutation.SetTwitterDescription(v)
	}
	if _, ok := pc.mutation.TwitterImage(); !ok {
		v := page.DefaultTwitterImage
		pc.mutation.SetTwitterImage(v)
	}
	if _, ok := pc.mutation.OgSiteName(); !ok {
		v := page.DefaultOgSiteName
		pc.mutation.SetOgSiteName(v)
	}
	if _, ok := pc.mutation.OgLocale(); !ok {
		v := page.DefaultOgLocale
		pc.mutation.SetOgLocale(v)
	}
	if _, ok := pc.mutation.OgTitle(); !ok {
		v := page.DefaultOgTitle
		pc.mutation.SetOgTitle(v)
	}
	if _, ok := pc.mutation.OgDescription(); !ok {
		v := page.DefaultOgDescription
		pc.mutation.SetOgDescription(v)
	}
	if _, ok := pc.mutation.OgType(); !ok {
		v := page.DefaultOgType
		pc.mutation.SetOgType(v)
	}
	if _, ok := pc.mutation.OgURL(); !ok {
		v := page.DefaultOgURL
		pc.mutation.SetOgURL(v)
	}
	if _, ok := pc.mutation.OgImage(); !ok {
		v := page.DefaultOgImage
		pc.mutation.SetOgImage(v)
	}
	if _, ok := pc.mutation.OgImageType(); !ok {
		v := page.DefaultOgImageType
		pc.mutation.SetOgImageType(v)
	}
	if _, ok := pc.mutation.OgImageURL(); !ok {
		v := page.DefaultOgImageURL
		pc.mutation.SetOgImageURL(v)
	}
	if _, ok := pc.mutation.OgImageSecureURL(); !ok {
		v := page.DefaultOgImageSecureURL
		pc.mutation.SetOgImageSecureURL(v)
	}
	if _, ok := pc.mutation.OgImageWidth(); !ok {
		v := page.DefaultOgImageWidth
		pc.mutation.SetOgImageWidth(v)
	}
	if _, ok := pc.mutation.OgImageHeight(); !ok {
		v := page.DefaultOgImageHeight
		pc.mutation.SetOgImageHeight(v)
	}
	if _, ok := pc.mutation.OgVideo(); !ok {
		v := page.DefaultOgVideo
		pc.mutation.SetOgVideo(v)
	}
	if _, ok := pc.mutation.OgVideoType(); !ok {
		v := page.DefaultOgVideoType
		pc.mutation.SetOgVideoType(v)
	}
	if _, ok := pc.mutation.OgVideoURL(); !ok {
		v := page.DefaultOgVideoURL
		pc.mutation.SetOgVideoURL(v)
	}
	if _, ok := pc.mutation.OgVideoSecureURL(); !ok {
		v := page.DefaultOgVideoSecureURL
		pc.mutation.SetOgVideoSecureURL(v)
	}
	if _, ok := pc.mutation.OgVideoWidth(); !ok {
		v := page.DefaultOgVideoWidth
		pc.mutation.SetOgVideoWidth(v)
	}
	if _, ok := pc.mutation.OgVideoHeight(); !ok {
		v := page.DefaultOgVideoHeight
		pc.mutation.SetOgVideoHeight(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (pc *PageCreate) check() error {
	if _, ok := pc.mutation.ReferredID(); !ok {
		return &ValidationError{Name: "referred_id", err: errors.New(`ent: missing required field "Page.referred_id"`)}
	}
	if _, ok := pc.mutation.CrawlingVersion(); !ok {
		return &ValidationError{Name: "crawling_version", err: errors.New(`ent: missing required field "Page.crawling_version"`)}
	}
	if _, ok := pc.mutation.Domain(); !ok {
		return &ValidationError{Name: "domain", err: errors.New(`ent: missing required field "Page.domain"`)}
	}
	if v, ok := pc.mutation.Domain(); ok {
		if err := page.DomainValidator(v); err != nil {
			return &ValidationError{Name: "domain", err: fmt.Errorf(`ent: validator failed for field "Page.domain": %w`, err)}
		}
	}
	if _, ok := pc.mutation.Port(); !ok {
		return &ValidationError{Name: "port", err: errors.New(`ent: missing required field "Page.port"`)}
	}
	if v, ok := pc.mutation.Port(); ok {
		if err := page.PortValidator(v); err != nil {
			return &ValidationError{Name: "port", err: fmt.Errorf(`ent: validator failed for field "Page.port": %w`, err)}
		}
	}
	if _, ok := pc.mutation.IsHTTPS(); !ok {
		return &ValidationError{Name: "is_https", err: errors.New(`ent: missing required field "Page.is_https"`)}
	}
	if _, ok := pc.mutation.IndexedURL(); !ok {
		return &ValidationError{Name: "indexed_url", err: errors.New(`ent: missing required field "Page.indexed_url"`)}
	}
	if v, ok := pc.mutation.IndexedURL(); ok {
		if err := page.IndexedURLValidator(v); err != nil {
			return &ValidationError{Name: "indexed_url", err: fmt.Errorf(`ent: validator failed for field "Page.indexed_url": %w`, err)}
		}
	}
	if _, ok := pc.mutation.Path(); !ok {
		return &ValidationError{Name: "path", err: errors.New(`ent: missing required field "Page.path"`)}
	}
	if v, ok := pc.mutation.Path(); ok {
		if err := page.PathValidator(v); err != nil {
			return &ValidationError{Name: "path", err: fmt.Errorf(`ent: validator failed for field "Page.path": %w`, err)}
		}
	}
	if _, ok := pc.mutation.Querystring(); !ok {
		return &ValidationError{Name: "querystring", err: errors.New(`ent: missing required field "Page.querystring"`)}
	}
	if _, ok := pc.mutation.URL(); !ok {
		return &ValidationError{Name: "url", err: errors.New(`ent: missing required field "Page.url"`)}
	}
	if _, ok := pc.mutation.CountReferred(); !ok {
		return &ValidationError{Name: "count_referred", err: errors.New(`ent: missing required field "Page.count_referred"`)}
	}
	if _, ok := pc.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`ent: missing required field "Page.status"`)}
	}
	if v, ok := pc.mutation.Status(); ok {
		if err := page.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "Page.status": %w`, err)}
		}
	}
	if _, ok := pc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Page.created_at"`)}
	}
	if _, ok := pc.mutation.CreatedBy(); !ok {
		return &ValidationError{Name: "created_by", err: errors.New(`ent: missing required field "Page.created_by"`)}
	}
	if v, ok := pc.mutation.CreatedBy(); ok {
		if err := page.CreatedByValidator(v); err != nil {
			return &ValidationError{Name: "created_by", err: fmt.Errorf(`ent: validator failed for field "Page.created_by": %w`, err)}
		}
	}
	if _, ok := pc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "Page.updated_at"`)}
	}
	if _, ok := pc.mutation.UpdatedBy(); !ok {
		return &ValidationError{Name: "updated_by", err: errors.New(`ent: missing required field "Page.updated_by"`)}
	}
	if v, ok := pc.mutation.UpdatedBy(); ok {
		if err := page.UpdatedByValidator(v); err != nil {
			return &ValidationError{Name: "updated_by", err: fmt.Errorf(`ent: validator failed for field "Page.updated_by": %w`, err)}
		}
	}
	if _, ok := pc.mutation.Title(); !ok {
		return &ValidationError{Name: "title", err: errors.New(`ent: missing required field "Page.title"`)}
	}
	if _, ok := pc.mutation.Description(); !ok {
		return &ValidationError{Name: "description", err: errors.New(`ent: missing required field "Page.description"`)}
	}
	if _, ok := pc.mutation.Keywords(); !ok {
		return &ValidationError{Name: "keywords", err: errors.New(`ent: missing required field "Page.keywords"`)}
	}
	if _, ok := pc.mutation.ContentLanguage(); !ok {
		return &ValidationError{Name: "content_language", err: errors.New(`ent: missing required field "Page.content_language"`)}
	}
	if _, ok := pc.mutation.TwitterCard(); !ok {
		return &ValidationError{Name: "twitter_card", err: errors.New(`ent: missing required field "Page.twitter_card"`)}
	}
	if _, ok := pc.mutation.TwitterURL(); !ok {
		return &ValidationError{Name: "twitter_url", err: errors.New(`ent: missing required field "Page.twitter_url"`)}
	}
	if _, ok := pc.mutation.TwitterTitle(); !ok {
		return &ValidationError{Name: "twitter_title", err: errors.New(`ent: missing required field "Page.twitter_title"`)}
	}
	if _, ok := pc.mutation.TwitterDescription(); !ok {
		return &ValidationError{Name: "twitter_description", err: errors.New(`ent: missing required field "Page.twitter_description"`)}
	}
	if _, ok := pc.mutation.TwitterImage(); !ok {
		return &ValidationError{Name: "twitter_image", err: errors.New(`ent: missing required field "Page.twitter_image"`)}
	}
	if _, ok := pc.mutation.OgSiteName(); !ok {
		return &ValidationError{Name: "og_site_name", err: errors.New(`ent: missing required field "Page.og_site_name"`)}
	}
	if _, ok := pc.mutation.OgLocale(); !ok {
		return &ValidationError{Name: "og_locale", err: errors.New(`ent: missing required field "Page.og_locale"`)}
	}
	if _, ok := pc.mutation.OgTitle(); !ok {
		return &ValidationError{Name: "og_title", err: errors.New(`ent: missing required field "Page.og_title"`)}
	}
	if _, ok := pc.mutation.OgDescription(); !ok {
		return &ValidationError{Name: "og_description", err: errors.New(`ent: missing required field "Page.og_description"`)}
	}
	if _, ok := pc.mutation.OgType(); !ok {
		return &ValidationError{Name: "og_type", err: errors.New(`ent: missing required field "Page.og_type"`)}
	}
	if _, ok := pc.mutation.OgURL(); !ok {
		return &ValidationError{Name: "og_url", err: errors.New(`ent: missing required field "Page.og_url"`)}
	}
	if _, ok := pc.mutation.OgImage(); !ok {
		return &ValidationError{Name: "og_image", err: errors.New(`ent: missing required field "Page.og_image"`)}
	}
	if _, ok := pc.mutation.OgImageType(); !ok {
		return &ValidationError{Name: "og_image_type", err: errors.New(`ent: missing required field "Page.og_image_type"`)}
	}
	if _, ok := pc.mutation.OgImageURL(); !ok {
		return &ValidationError{Name: "og_image_url", err: errors.New(`ent: missing required field "Page.og_image_url"`)}
	}
	if _, ok := pc.mutation.OgImageSecureURL(); !ok {
		return &ValidationError{Name: "og_image_secure_url", err: errors.New(`ent: missing required field "Page.og_image_secure_url"`)}
	}
	if _, ok := pc.mutation.OgImageWidth(); !ok {
		return &ValidationError{Name: "og_image_width", err: errors.New(`ent: missing required field "Page.og_image_width"`)}
	}
	if _, ok := pc.mutation.OgImageHeight(); !ok {
		return &ValidationError{Name: "og_image_height", err: errors.New(`ent: missing required field "Page.og_image_height"`)}
	}
	if _, ok := pc.mutation.OgVideo(); !ok {
		return &ValidationError{Name: "og_video", err: errors.New(`ent: missing required field "Page.og_video"`)}
	}
	if _, ok := pc.mutation.OgVideoType(); !ok {
		return &ValidationError{Name: "og_video_type", err: errors.New(`ent: missing required field "Page.og_video_type"`)}
	}
	if _, ok := pc.mutation.OgVideoURL(); !ok {
		return &ValidationError{Name: "og_video_url", err: errors.New(`ent: missing required field "Page.og_video_url"`)}
	}
	if _, ok := pc.mutation.OgVideoSecureURL(); !ok {
		return &ValidationError{Name: "og_video_secure_url", err: errors.New(`ent: missing required field "Page.og_video_secure_url"`)}
	}
	if _, ok := pc.mutation.OgVideoWidth(); !ok {
		return &ValidationError{Name: "og_video_width", err: errors.New(`ent: missing required field "Page.og_video_width"`)}
	}
	if _, ok := pc.mutation.OgVideoHeight(); !ok {
		return &ValidationError{Name: "og_video_height", err: errors.New(`ent: missing required field "Page.og_video_height"`)}
	}
	return nil
}

func (pc *PageCreate) sqlSave(ctx context.Context) (*Page, error) {
	_node, _spec := pc.createSpec()
	if err := sqlgraph.CreateNode(ctx, pc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected Page.ID type: %T", _spec.ID.Value)
		}
	}
	return _node, nil
}

func (pc *PageCreate) createSpec() (*Page, *sqlgraph.CreateSpec) {
	var (
		_node = &Page{config: pc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: page.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: page.FieldID,
			},
		}
	)
	_spec.OnConflict = pc.conflict
	if id, ok := pc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := pc.mutation.ReferredID(); ok {
		_spec.SetField(page.FieldReferredID, field.TypeString, value)
		_node.ReferredID = value
	}
	if value, ok := pc.mutation.CrawlingVersion(); ok {
		_spec.SetField(page.FieldCrawlingVersion, field.TypeString, value)
		_node.CrawlingVersion = value
	}
	if value, ok := pc.mutation.Domain(); ok {
		_spec.SetField(page.FieldDomain, field.TypeString, value)
		_node.Domain = value
	}
	if value, ok := pc.mutation.Port(); ok {
		_spec.SetField(page.FieldPort, field.TypeString, value)
		_node.Port = value
	}
	if value, ok := pc.mutation.IsHTTPS(); ok {
		_spec.SetField(page.FieldIsHTTPS, field.TypeBool, value)
		_node.IsHTTPS = value
	}
	if value, ok := pc.mutation.IndexedURL(); ok {
		_spec.SetField(page.FieldIndexedURL, field.TypeString, value)
		_node.IndexedURL = value
	}
	if value, ok := pc.mutation.Path(); ok {
		_spec.SetField(page.FieldPath, field.TypeString, value)
		_node.Path = value
	}
	if value, ok := pc.mutation.Querystring(); ok {
		_spec.SetField(page.FieldQuerystring, field.TypeString, value)
		_node.Querystring = value
	}
	if value, ok := pc.mutation.URL(); ok {
		_spec.SetField(page.FieldURL, field.TypeString, value)
		_node.URL = value
	}
	if value, ok := pc.mutation.CountReferred(); ok {
		_spec.SetField(page.FieldCountReferred, field.TypeInt64, value)
		_node.CountReferred = value
	}
	if value, ok := pc.mutation.Status(); ok {
		_spec.SetField(page.FieldStatus, field.TypeEnum, value)
		_node.Status = value
	}
	if value, ok := pc.mutation.CreatedAt(); ok {
		_spec.SetField(page.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := pc.mutation.CreatedBy(); ok {
		_spec.SetField(page.FieldCreatedBy, field.TypeString, value)
		_node.CreatedBy = value
	}
	if value, ok := pc.mutation.UpdatedAt(); ok {
		_spec.SetField(page.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := pc.mutation.UpdatedBy(); ok {
		_spec.SetField(page.FieldUpdatedBy, field.TypeString, value)
		_node.UpdatedBy = value
	}
	if value, ok := pc.mutation.Title(); ok {
		_spec.SetField(page.FieldTitle, field.TypeString, value)
		_node.Title = value
	}
	if value, ok := pc.mutation.Description(); ok {
		_spec.SetField(page.FieldDescription, field.TypeString, value)
		_node.Description = value
	}
	if value, ok := pc.mutation.Keywords(); ok {
		_spec.SetField(page.FieldKeywords, field.TypeString, value)
		_node.Keywords = value
	}
	if value, ok := pc.mutation.ContentLanguage(); ok {
		_spec.SetField(page.FieldContentLanguage, field.TypeString, value)
		_node.ContentLanguage = value
	}
	if value, ok := pc.mutation.TwitterCard(); ok {
		_spec.SetField(page.FieldTwitterCard, field.TypeString, value)
		_node.TwitterCard = value
	}
	if value, ok := pc.mutation.TwitterURL(); ok {
		_spec.SetField(page.FieldTwitterURL, field.TypeString, value)
		_node.TwitterURL = value
	}
	if value, ok := pc.mutation.TwitterTitle(); ok {
		_spec.SetField(page.FieldTwitterTitle, field.TypeString, value)
		_node.TwitterTitle = value
	}
	if value, ok := pc.mutation.TwitterDescription(); ok {
		_spec.SetField(page.FieldTwitterDescription, field.TypeString, value)
		_node.TwitterDescription = value
	}
	if value, ok := pc.mutation.TwitterImage(); ok {
		_spec.SetField(page.FieldTwitterImage, field.TypeString, value)
		_node.TwitterImage = value
	}
	if value, ok := pc.mutation.OgSiteName(); ok {
		_spec.SetField(page.FieldOgSiteName, field.TypeString, value)
		_node.OgSiteName = value
	}
	if value, ok := pc.mutation.OgLocale(); ok {
		_spec.SetField(page.FieldOgLocale, field.TypeString, value)
		_node.OgLocale = value
	}
	if value, ok := pc.mutation.OgTitle(); ok {
		_spec.SetField(page.FieldOgTitle, field.TypeString, value)
		_node.OgTitle = value
	}
	if value, ok := pc.mutation.OgDescription(); ok {
		_spec.SetField(page.FieldOgDescription, field.TypeString, value)
		_node.OgDescription = value
	}
	if value, ok := pc.mutation.OgType(); ok {
		_spec.SetField(page.FieldOgType, field.TypeString, value)
		_node.OgType = value
	}
	if value, ok := pc.mutation.OgURL(); ok {
		_spec.SetField(page.FieldOgURL, field.TypeString, value)
		_node.OgURL = value
	}
	if value, ok := pc.mutation.OgImage(); ok {
		_spec.SetField(page.FieldOgImage, field.TypeString, value)
		_node.OgImage = value
	}
	if value, ok := pc.mutation.OgImageType(); ok {
		_spec.SetField(page.FieldOgImageType, field.TypeString, value)
		_node.OgImageType = value
	}
	if value, ok := pc.mutation.OgImageURL(); ok {
		_spec.SetField(page.FieldOgImageURL, field.TypeString, value)
		_node.OgImageURL = value
	}
	if value, ok := pc.mutation.OgImageSecureURL(); ok {
		_spec.SetField(page.FieldOgImageSecureURL, field.TypeString, value)
		_node.OgImageSecureURL = value
	}
	if value, ok := pc.mutation.OgImageWidth(); ok {
		_spec.SetField(page.FieldOgImageWidth, field.TypeString, value)
		_node.OgImageWidth = value
	}
	if value, ok := pc.mutation.OgImageHeight(); ok {
		_spec.SetField(page.FieldOgImageHeight, field.TypeString, value)
		_node.OgImageHeight = value
	}
	if value, ok := pc.mutation.OgVideo(); ok {
		_spec.SetField(page.FieldOgVideo, field.TypeString, value)
		_node.OgVideo = value
	}
	if value, ok := pc.mutation.OgVideoType(); ok {
		_spec.SetField(page.FieldOgVideoType, field.TypeString, value)
		_node.OgVideoType = value
	}
	if value, ok := pc.mutation.OgVideoURL(); ok {
		_spec.SetField(page.FieldOgVideoURL, field.TypeString, value)
		_node.OgVideoURL = value
	}
	if value, ok := pc.mutation.OgVideoSecureURL(); ok {
		_spec.SetField(page.FieldOgVideoSecureURL, field.TypeString, value)
		_node.OgVideoSecureURL = value
	}
	if value, ok := pc.mutation.OgVideoWidth(); ok {
		_spec.SetField(page.FieldOgVideoWidth, field.TypeString, value)
		_node.OgVideoWidth = value
	}
	if value, ok := pc.mutation.OgVideoHeight(); ok {
		_spec.SetField(page.FieldOgVideoHeight, field.TypeString, value)
		_node.OgVideoHeight = value
	}
	if nodes := pc.mutation.PageSourceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   page.PageSourceTable,
			Columns: []string{page.PageSourceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: pagesource.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Page.Create().
//		SetReferredID(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.PageUpsert) {
//			SetReferredID(v+v).
//		}).
//		Exec(ctx)
func (pc *PageCreate) OnConflict(opts ...sql.ConflictOption) *PageUpsertOne {
	pc.conflict = opts
	return &PageUpsertOne{
		create: pc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Page.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (pc *PageCreate) OnConflictColumns(columns ...string) *PageUpsertOne {
	pc.conflict = append(pc.conflict, sql.ConflictColumns(columns...))
	return &PageUpsertOne{
		create: pc,
	}
}

type (
	// PageUpsertOne is the builder for "upsert"-ing
	//  one Page node.
	PageUpsertOne struct {
		create *PageCreate
	}

	// PageUpsert is the "OnConflict" setter.
	PageUpsert struct {
		*sql.UpdateSet
	}
)

// SetReferredID sets the "referred_id" field.
func (u *PageUpsert) SetReferredID(v string) *PageUpsert {
	u.Set(page.FieldReferredID, v)
	return u
}

// UpdateReferredID sets the "referred_id" field to the value that was provided on create.
func (u *PageUpsert) UpdateReferredID() *PageUpsert {
	u.SetExcluded(page.FieldReferredID)
	return u
}

// SetCrawlingVersion sets the "crawling_version" field.
func (u *PageUpsert) SetCrawlingVersion(v string) *PageUpsert {
	u.Set(page.FieldCrawlingVersion, v)
	return u
}

// UpdateCrawlingVersion sets the "crawling_version" field to the value that was provided on create.
func (u *PageUpsert) UpdateCrawlingVersion() *PageUpsert {
	u.SetExcluded(page.FieldCrawlingVersion)
	return u
}

// SetDomain sets the "domain" field.
func (u *PageUpsert) SetDomain(v string) *PageUpsert {
	u.Set(page.FieldDomain, v)
	return u
}

// UpdateDomain sets the "domain" field to the value that was provided on create.
func (u *PageUpsert) UpdateDomain() *PageUpsert {
	u.SetExcluded(page.FieldDomain)
	return u
}

// SetPort sets the "port" field.
func (u *PageUpsert) SetPort(v string) *PageUpsert {
	u.Set(page.FieldPort, v)
	return u
}

// UpdatePort sets the "port" field to the value that was provided on create.
func (u *PageUpsert) UpdatePort() *PageUpsert {
	u.SetExcluded(page.FieldPort)
	return u
}

// SetIsHTTPS sets the "is_https" field.
func (u *PageUpsert) SetIsHTTPS(v bool) *PageUpsert {
	u.Set(page.FieldIsHTTPS, v)
	return u
}

// UpdateIsHTTPS sets the "is_https" field to the value that was provided on create.
func (u *PageUpsert) UpdateIsHTTPS() *PageUpsert {
	u.SetExcluded(page.FieldIsHTTPS)
	return u
}

// SetIndexedURL sets the "indexed_url" field.
func (u *PageUpsert) SetIndexedURL(v string) *PageUpsert {
	u.Set(page.FieldIndexedURL, v)
	return u
}

// UpdateIndexedURL sets the "indexed_url" field to the value that was provided on create.
func (u *PageUpsert) UpdateIndexedURL() *PageUpsert {
	u.SetExcluded(page.FieldIndexedURL)
	return u
}

// SetPath sets the "path" field.
func (u *PageUpsert) SetPath(v string) *PageUpsert {
	u.Set(page.FieldPath, v)
	return u
}

// UpdatePath sets the "path" field to the value that was provided on create.
func (u *PageUpsert) UpdatePath() *PageUpsert {
	u.SetExcluded(page.FieldPath)
	return u
}

// SetQuerystring sets the "querystring" field.
func (u *PageUpsert) SetQuerystring(v string) *PageUpsert {
	u.Set(page.FieldQuerystring, v)
	return u
}

// UpdateQuerystring sets the "querystring" field to the value that was provided on create.
func (u *PageUpsert) UpdateQuerystring() *PageUpsert {
	u.SetExcluded(page.FieldQuerystring)
	return u
}

// SetURL sets the "url" field.
func (u *PageUpsert) SetURL(v string) *PageUpsert {
	u.Set(page.FieldURL, v)
	return u
}

// UpdateURL sets the "url" field to the value that was provided on create.
func (u *PageUpsert) UpdateURL() *PageUpsert {
	u.SetExcluded(page.FieldURL)
	return u
}

// SetCountReferred sets the "count_referred" field.
func (u *PageUpsert) SetCountReferred(v int64) *PageUpsert {
	u.Set(page.FieldCountReferred, v)
	return u
}

// UpdateCountReferred sets the "count_referred" field to the value that was provided on create.
func (u *PageUpsert) UpdateCountReferred() *PageUpsert {
	u.SetExcluded(page.FieldCountReferred)
	return u
}

// AddCountReferred adds v to the "count_referred" field.
func (u *PageUpsert) AddCountReferred(v int64) *PageUpsert {
	u.Add(page.FieldCountReferred, v)
	return u
}

// SetStatus sets the "status" field.
func (u *PageUpsert) SetStatus(v page.Status) *PageUpsert {
	u.Set(page.FieldStatus, v)
	return u
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *PageUpsert) UpdateStatus() *PageUpsert {
	u.SetExcluded(page.FieldStatus)
	return u
}

// SetCreatedBy sets the "created_by" field.
func (u *PageUpsert) SetCreatedBy(v string) *PageUpsert {
	u.Set(page.FieldCreatedBy, v)
	return u
}

// UpdateCreatedBy sets the "created_by" field to the value that was provided on create.
func (u *PageUpsert) UpdateCreatedBy() *PageUpsert {
	u.SetExcluded(page.FieldCreatedBy)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *PageUpsert) SetUpdatedAt(v time.Time) *PageUpsert {
	u.Set(page.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *PageUpsert) UpdateUpdatedAt() *PageUpsert {
	u.SetExcluded(page.FieldUpdatedAt)
	return u
}

// SetUpdatedBy sets the "updated_by" field.
func (u *PageUpsert) SetUpdatedBy(v string) *PageUpsert {
	u.Set(page.FieldUpdatedBy, v)
	return u
}

// UpdateUpdatedBy sets the "updated_by" field to the value that was provided on create.
func (u *PageUpsert) UpdateUpdatedBy() *PageUpsert {
	u.SetExcluded(page.FieldUpdatedBy)
	return u
}

// SetTitle sets the "title" field.
func (u *PageUpsert) SetTitle(v string) *PageUpsert {
	u.Set(page.FieldTitle, v)
	return u
}

// UpdateTitle sets the "title" field to the value that was provided on create.
func (u *PageUpsert) UpdateTitle() *PageUpsert {
	u.SetExcluded(page.FieldTitle)
	return u
}

// SetDescription sets the "description" field.
func (u *PageUpsert) SetDescription(v string) *PageUpsert {
	u.Set(page.FieldDescription, v)
	return u
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *PageUpsert) UpdateDescription() *PageUpsert {
	u.SetExcluded(page.FieldDescription)
	return u
}

// SetKeywords sets the "keywords" field.
func (u *PageUpsert) SetKeywords(v string) *PageUpsert {
	u.Set(page.FieldKeywords, v)
	return u
}

// UpdateKeywords sets the "keywords" field to the value that was provided on create.
func (u *PageUpsert) UpdateKeywords() *PageUpsert {
	u.SetExcluded(page.FieldKeywords)
	return u
}

// SetContentLanguage sets the "content_language" field.
func (u *PageUpsert) SetContentLanguage(v string) *PageUpsert {
	u.Set(page.FieldContentLanguage, v)
	return u
}

// UpdateContentLanguage sets the "content_language" field to the value that was provided on create.
func (u *PageUpsert) UpdateContentLanguage() *PageUpsert {
	u.SetExcluded(page.FieldContentLanguage)
	return u
}

// SetTwitterCard sets the "twitter_card" field.
func (u *PageUpsert) SetTwitterCard(v string) *PageUpsert {
	u.Set(page.FieldTwitterCard, v)
	return u
}

// UpdateTwitterCard sets the "twitter_card" field to the value that was provided on create.
func (u *PageUpsert) UpdateTwitterCard() *PageUpsert {
	u.SetExcluded(page.FieldTwitterCard)
	return u
}

// SetTwitterURL sets the "twitter_url" field.
func (u *PageUpsert) SetTwitterURL(v string) *PageUpsert {
	u.Set(page.FieldTwitterURL, v)
	return u
}

// UpdateTwitterURL sets the "twitter_url" field to the value that was provided on create.
func (u *PageUpsert) UpdateTwitterURL() *PageUpsert {
	u.SetExcluded(page.FieldTwitterURL)
	return u
}

// SetTwitterTitle sets the "twitter_title" field.
func (u *PageUpsert) SetTwitterTitle(v string) *PageUpsert {
	u.Set(page.FieldTwitterTitle, v)
	return u
}

// UpdateTwitterTitle sets the "twitter_title" field to the value that was provided on create.
func (u *PageUpsert) UpdateTwitterTitle() *PageUpsert {
	u.SetExcluded(page.FieldTwitterTitle)
	return u
}

// SetTwitterDescription sets the "twitter_description" field.
func (u *PageUpsert) SetTwitterDescription(v string) *PageUpsert {
	u.Set(page.FieldTwitterDescription, v)
	return u
}

// UpdateTwitterDescription sets the "twitter_description" field to the value that was provided on create.
func (u *PageUpsert) UpdateTwitterDescription() *PageUpsert {
	u.SetExcluded(page.FieldTwitterDescription)
	return u
}

// SetTwitterImage sets the "twitter_image" field.
func (u *PageUpsert) SetTwitterImage(v string) *PageUpsert {
	u.Set(page.FieldTwitterImage, v)
	return u
}

// UpdateTwitterImage sets the "twitter_image" field to the value that was provided on create.
func (u *PageUpsert) UpdateTwitterImage() *PageUpsert {
	u.SetExcluded(page.FieldTwitterImage)
	return u
}

// SetOgSiteName sets the "og_site_name" field.
func (u *PageUpsert) SetOgSiteName(v string) *PageUpsert {
	u.Set(page.FieldOgSiteName, v)
	return u
}

// UpdateOgSiteName sets the "og_site_name" field to the value that was provided on create.
func (u *PageUpsert) UpdateOgSiteName() *PageUpsert {
	u.SetExcluded(page.FieldOgSiteName)
	return u
}

// SetOgLocale sets the "og_locale" field.
func (u *PageUpsert) SetOgLocale(v string) *PageUpsert {
	u.Set(page.FieldOgLocale, v)
	return u
}

// UpdateOgLocale sets the "og_locale" field to the value that was provided on create.
func (u *PageUpsert) UpdateOgLocale() *PageUpsert {
	u.SetExcluded(page.FieldOgLocale)
	return u
}

// SetOgTitle sets the "og_title" field.
func (u *PageUpsert) SetOgTitle(v string) *PageUpsert {
	u.Set(page.FieldOgTitle, v)
	return u
}

// UpdateOgTitle sets the "og_title" field to the value that was provided on create.
func (u *PageUpsert) UpdateOgTitle() *PageUpsert {
	u.SetExcluded(page.FieldOgTitle)
	return u
}

// SetOgDescription sets the "og_description" field.
func (u *PageUpsert) SetOgDescription(v string) *PageUpsert {
	u.Set(page.FieldOgDescription, v)
	return u
}

// UpdateOgDescription sets the "og_description" field to the value that was provided on create.
func (u *PageUpsert) UpdateOgDescription() *PageUpsert {
	u.SetExcluded(page.FieldOgDescription)
	return u
}

// SetOgType sets the "og_type" field.
func (u *PageUpsert) SetOgType(v string) *PageUpsert {
	u.Set(page.FieldOgType, v)
	return u
}

// UpdateOgType sets the "og_type" field to the value that was provided on create.
func (u *PageUpsert) UpdateOgType() *PageUpsert {
	u.SetExcluded(page.FieldOgType)
	return u
}

// SetOgURL sets the "og_url" field.
func (u *PageUpsert) SetOgURL(v string) *PageUpsert {
	u.Set(page.FieldOgURL, v)
	return u
}

// UpdateOgURL sets the "og_url" field to the value that was provided on create.
func (u *PageUpsert) UpdateOgURL() *PageUpsert {
	u.SetExcluded(page.FieldOgURL)
	return u
}

// SetOgImage sets the "og_image" field.
func (u *PageUpsert) SetOgImage(v string) *PageUpsert {
	u.Set(page.FieldOgImage, v)
	return u
}

// UpdateOgImage sets the "og_image" field to the value that was provided on create.
func (u *PageUpsert) UpdateOgImage() *PageUpsert {
	u.SetExcluded(page.FieldOgImage)
	return u
}

// SetOgImageType sets the "og_image_type" field.
func (u *PageUpsert) SetOgImageType(v string) *PageUpsert {
	u.Set(page.FieldOgImageType, v)
	return u
}

// UpdateOgImageType sets the "og_image_type" field to the value that was provided on create.
func (u *PageUpsert) UpdateOgImageType() *PageUpsert {
	u.SetExcluded(page.FieldOgImageType)
	return u
}

// SetOgImageURL sets the "og_image_url" field.
func (u *PageUpsert) SetOgImageURL(v string) *PageUpsert {
	u.Set(page.FieldOgImageURL, v)
	return u
}

// UpdateOgImageURL sets the "og_image_url" field to the value that was provided on create.
func (u *PageUpsert) UpdateOgImageURL() *PageUpsert {
	u.SetExcluded(page.FieldOgImageURL)
	return u
}

// SetOgImageSecureURL sets the "og_image_secure_url" field.
func (u *PageUpsert) SetOgImageSecureURL(v string) *PageUpsert {
	u.Set(page.FieldOgImageSecureURL, v)
	return u
}

// UpdateOgImageSecureURL sets the "og_image_secure_url" field to the value that was provided on create.
func (u *PageUpsert) UpdateOgImageSecureURL() *PageUpsert {
	u.SetExcluded(page.FieldOgImageSecureURL)
	return u
}

// SetOgImageWidth sets the "og_image_width" field.
func (u *PageUpsert) SetOgImageWidth(v string) *PageUpsert {
	u.Set(page.FieldOgImageWidth, v)
	return u
}

// UpdateOgImageWidth sets the "og_image_width" field to the value that was provided on create.
func (u *PageUpsert) UpdateOgImageWidth() *PageUpsert {
	u.SetExcluded(page.FieldOgImageWidth)
	return u
}

// SetOgImageHeight sets the "og_image_height" field.
func (u *PageUpsert) SetOgImageHeight(v string) *PageUpsert {
	u.Set(page.FieldOgImageHeight, v)
	return u
}

// UpdateOgImageHeight sets the "og_image_height" field to the value that was provided on create.
func (u *PageUpsert) UpdateOgImageHeight() *PageUpsert {
	u.SetExcluded(page.FieldOgImageHeight)
	return u
}

// SetOgVideo sets the "og_video" field.
func (u *PageUpsert) SetOgVideo(v string) *PageUpsert {
	u.Set(page.FieldOgVideo, v)
	return u
}

// UpdateOgVideo sets the "og_video" field to the value that was provided on create.
func (u *PageUpsert) UpdateOgVideo() *PageUpsert {
	u.SetExcluded(page.FieldOgVideo)
	return u
}

// SetOgVideoType sets the "og_video_type" field.
func (u *PageUpsert) SetOgVideoType(v string) *PageUpsert {
	u.Set(page.FieldOgVideoType, v)
	return u
}

// UpdateOgVideoType sets the "og_video_type" field to the value that was provided on create.
func (u *PageUpsert) UpdateOgVideoType() *PageUpsert {
	u.SetExcluded(page.FieldOgVideoType)
	return u
}

// SetOgVideoURL sets the "og_video_url" field.
func (u *PageUpsert) SetOgVideoURL(v string) *PageUpsert {
	u.Set(page.FieldOgVideoURL, v)
	return u
}

// UpdateOgVideoURL sets the "og_video_url" field to the value that was provided on create.
func (u *PageUpsert) UpdateOgVideoURL() *PageUpsert {
	u.SetExcluded(page.FieldOgVideoURL)
	return u
}

// SetOgVideoSecureURL sets the "og_video_secure_url" field.
func (u *PageUpsert) SetOgVideoSecureURL(v string) *PageUpsert {
	u.Set(page.FieldOgVideoSecureURL, v)
	return u
}

// UpdateOgVideoSecureURL sets the "og_video_secure_url" field to the value that was provided on create.
func (u *PageUpsert) UpdateOgVideoSecureURL() *PageUpsert {
	u.SetExcluded(page.FieldOgVideoSecureURL)
	return u
}

// SetOgVideoWidth sets the "og_video_width" field.
func (u *PageUpsert) SetOgVideoWidth(v string) *PageUpsert {
	u.Set(page.FieldOgVideoWidth, v)
	return u
}

// UpdateOgVideoWidth sets the "og_video_width" field to the value that was provided on create.
func (u *PageUpsert) UpdateOgVideoWidth() *PageUpsert {
	u.SetExcluded(page.FieldOgVideoWidth)
	return u
}

// SetOgVideoHeight sets the "og_video_height" field.
func (u *PageUpsert) SetOgVideoHeight(v string) *PageUpsert {
	u.Set(page.FieldOgVideoHeight, v)
	return u
}

// UpdateOgVideoHeight sets the "og_video_height" field to the value that was provided on create.
func (u *PageUpsert) UpdateOgVideoHeight() *PageUpsert {
	u.SetExcluded(page.FieldOgVideoHeight)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.Page.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(page.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *PageUpsertOne) UpdateNewValues() *PageUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(page.FieldID)
		}
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(page.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Page.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *PageUpsertOne) Ignore() *PageUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *PageUpsertOne) DoNothing() *PageUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the PageCreate.OnConflict
// documentation for more info.
func (u *PageUpsertOne) Update(set func(*PageUpsert)) *PageUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&PageUpsert{UpdateSet: update})
	}))
	return u
}

// SetReferredID sets the "referred_id" field.
func (u *PageUpsertOne) SetReferredID(v string) *PageUpsertOne {
	return u.Update(func(s *PageUpsert) {
		s.SetReferredID(v)
	})
}

// UpdateReferredID sets the "referred_id" field to the value that was provided on create.
func (u *PageUpsertOne) UpdateReferredID() *PageUpsertOne {
	return u.Update(func(s *PageUpsert) {
		s.UpdateReferredID()
	})
}

// SetCrawlingVersion sets the "crawling_version" field.
func (u *PageUpsertOne) SetCrawlingVersion(v string) *PageUpsertOne {
	return u.Update(func(s *PageUpsert) {
		s.SetCrawlingVersion(v)
	})
}

// UpdateCrawlingVersion sets the "crawling_version" field to the value that was provided on create.
func (u *PageUpsertOne) UpdateCrawlingVersion() *PageUpsertOne {
	return u.Update(func(s *PageUpsert) {
		s.UpdateCrawlingVersion()
	})
}

// SetDomain sets the "domain" field.
func (u *PageUpsertOne) SetDomain(v string) *PageUpsertOne {
	return u.Update(func(s *PageUpsert) {
		s.SetDomain(v)
	})
}

// UpdateDomain sets the "domain" field to the value that was provided on create.
func (u *PageUpsertOne) UpdateDomain() *PageUpsertOne {
	return u.Update(func(s *PageUpsert) {
		s.UpdateDomain()
	})
}

// SetPort sets the "port" field.
func (u *PageUpsertOne) SetPort(v string) *PageUpsertOne {
	return u.Update(func(s *PageUpsert) {
		s.SetPort(v)
	})
}

// UpdatePort sets the "port" field to the value that was provided on create.
func (u *PageUpsertOne) UpdatePort() *PageUpsertOne {
	return u.Update(func(s *PageUpsert) {
		s.UpdatePort()
	})
}

// SetIsHTTPS sets the "is_https" field.
func (u *PageUpsertOne) SetIsHTTPS(v bool) *PageUpsertOne {
	return u.Update(func(s *PageUpsert) {
		s.SetIsHTTPS(v)
	})
}

// UpdateIsHTTPS sets the "is_https" field to the value that was provided on create.
func (u *PageUpsertOne) UpdateIsHTTPS() *PageUpsertOne {
	return u.Update(func(s *PageUpsert) {
		s.UpdateIsHTTPS()
	})
}

// SetIndexedURL sets the "indexed_url" field.
func (u *PageUpsertOne) SetIndexedURL(v string) *PageUpsertOne {
	return u.Update(func(s *PageUpsert) {
		s.SetIndexedURL(v)
	})
}

// UpdateIndexedURL sets the "indexed_url" field to the value that was provided on create.
func (u *PageUpsertOne) UpdateIndexedURL() *PageUpsertOne {
	return u.Update(func(s *PageUpsert) {
		s.UpdateIndexedURL()
	})
}

// SetPath sets the "path" field.
func (u *PageUpsertOne) SetPath(v string) *PageUpsertOne {
	return u.Update(func(s *PageUpsert) {
		s.SetPath(v)
	})
}

// UpdatePath sets the "path" field to the value that was provided on create.
func (u *PageUpsertOne) UpdatePath() *PageUpsertOne {
	return u.Update(func(s *PageUpsert) {
		s.UpdatePath()
	})
}

// SetQuerystring sets the "querystring" field.
func (u *PageUpsertOne) SetQuerystring(v string) *PageUpsertOne {
	return u.Update(func(s *PageUpsert) {
		s.SetQuerystring(v)
	})
}

// UpdateQuerystring sets the "querystring" field to the value that was provided on create.
func (u *PageUpsertOne) UpdateQuerystring() *PageUpsertOne {
	return u.Update(func(s *PageUpsert) {
		s.UpdateQuerystring()
	})
}

// SetURL sets the "url" field.
func (u *PageUpsertOne) SetURL(v string) *PageUpsertOne {
	return u.Update(func(s *PageUpsert) {
		s.SetURL(v)
	})
}

// UpdateURL sets the "url" field to the value that was provided on create.
func (u *PageUpsertOne) UpdateURL() *PageUpsertOne {
	return u.Update(func(s *PageUpsert) {
		s.UpdateURL()
	})
}

// SetCountReferred sets the "count_referred" field.
func (u *PageUpsertOne) SetCountReferred(v int64) *PageUpsertOne {
	return u.Update(func(s *PageUpsert) {
		s.SetCountReferred(v)
	})
}

// AddCountReferred adds v to the "count_referred" field.
func (u *PageUpsertOne) AddCountReferred(v int64) *PageUpsertOne {
	return u.Update(func(s *PageUpsert) {
		s.AddCountReferred(v)
	})
}

// UpdateCountReferred sets the "count_referred" field to the value that was provided on create.
func (u *PageUpsertOne) UpdateCountReferred() *PageUpsertOne {
	return u.Update(func(s *PageUpsert) {
		s.UpdateCountReferred()
	})
}

// SetStatus sets the "status" field.
func (u *PageUpsertOne) SetStatus(v page.Status) *PageUpsertOne {
	return u.Update(func(s *PageUpsert) {
		s.SetStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *PageUpsertOne) UpdateStatus() *PageUpsertOne {
	return u.Update(func(s *PageUpsert) {
		s.UpdateStatus()
	})
}

// SetCreatedBy sets the "created_by" field.
func (u *PageUpsertOne) SetCreatedBy(v string) *PageUpsertOne {
	return u.Update(func(s *PageUpsert) {
		s.SetCreatedBy(v)
	})
}

// UpdateCreatedBy sets the "created_by" field to the value that was provided on create.
func (u *PageUpsertOne) UpdateCreatedBy() *PageUpsertOne {
	return u.Update(func(s *PageUpsert) {
		s.UpdateCreatedBy()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *PageUpsertOne) SetUpdatedAt(v time.Time) *PageUpsertOne {
	return u.Update(func(s *PageUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *PageUpsertOne) UpdateUpdatedAt() *PageUpsertOne {
	return u.Update(func(s *PageUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetUpdatedBy sets the "updated_by" field.
func (u *PageUpsertOne) SetUpdatedBy(v string) *PageUpsertOne {
	return u.Update(func(s *PageUpsert) {
		s.SetUpdatedBy(v)
	})
}

// UpdateUpdatedBy sets the "updated_by" field to the value that was provided on create.
func (u *PageUpsertOne) UpdateUpdatedBy() *PageUpsertOne {
	return u.Update(func(s *PageUpsert) {
		s.UpdateUpdatedBy()
	})
}

// SetTitle sets the "title" field.
func (u *PageUpsertOne) SetTitle(v string) *PageUpsertOne {
	return u.Update(func(s *PageUpsert) {
		s.SetTitle(v)
	})
}

// UpdateTitle sets the "title" field to the value that was provided on create.
func (u *PageUpsertOne) UpdateTitle() *PageUpsertOne {
	return u.Update(func(s *PageUpsert) {
		s.UpdateTitle()
	})
}

// SetDescription sets the "description" field.
func (u *PageUpsertOne) SetDescription(v string) *PageUpsertOne {
	return u.Update(func(s *PageUpsert) {
		s.SetDescription(v)
	})
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *PageUpsertOne) UpdateDescription() *PageUpsertOne {
	return u.Update(func(s *PageUpsert) {
		s.UpdateDescription()
	})
}

// SetKeywords sets the "keywords" field.
func (u *PageUpsertOne) SetKeywords(v string) *PageUpsertOne {
	return u.Update(func(s *PageUpsert) {
		s.SetKeywords(v)
	})
}

// UpdateKeywords sets the "keywords" field to the value that was provided on create.
func (u *PageUpsertOne) UpdateKeywords() *PageUpsertOne {
	return u.Update(func(s *PageUpsert) {
		s.UpdateKeywords()
	})
}

// SetContentLanguage sets the "content_language" field.
func (u *PageUpsertOne) SetContentLanguage(v string) *PageUpsertOne {
	return u.Update(func(s *PageUpsert) {
		s.SetContentLanguage(v)
	})
}

// UpdateContentLanguage sets the "content_language" field to the value that was provided on create.
func (u *PageUpsertOne) UpdateContentLanguage() *PageUpsertOne {
	return u.Update(func(s *PageUpsert) {
		s.UpdateContentLanguage()
	})
}

// SetTwitterCard sets the "twitter_card" field.
func (u *PageUpsertOne) SetTwitterCard(v string) *PageUpsertOne {
	return u.Update(func(s *PageUpsert) {
		s.SetTwitterCard(v)
	})
}

// UpdateTwitterCard sets the "twitter_card" field to the value that was provided on create.
func (u *PageUpsertOne) UpdateTwitterCard() *PageUpsertOne {
	return u.Update(func(s *PageUpsert) {
		s.UpdateTwitterCard()
	})
}

// SetTwitterURL sets the "twitter_url" field.
func (u *PageUpsertOne) SetTwitterURL(v string) *PageUpsertOne {
	return u.Update(func(s *PageUpsert) {
		s.SetTwitterURL(v)
	})
}

// UpdateTwitterURL sets the "twitter_url" field to the value that was provided on create.
func (u *PageUpsertOne) UpdateTwitterURL() *PageUpsertOne {
	return u.Update(func(s *PageUpsert) {
		s.UpdateTwitterURL()
	})
}

// SetTwitterTitle sets the "twitter_title" field.
func (u *PageUpsertOne) SetTwitterTitle(v string) *PageUpsertOne {
	return u.Update(func(s *PageUpsert) {
		s.SetTwitterTitle(v)
	})
}

// UpdateTwitterTitle sets the "twitter_title" field to the value that was provided on create.
func (u *PageUpsertOne) UpdateTwitterTitle() *PageUpsertOne {
	return u.Update(func(s *PageUpsert) {
		s.UpdateTwitterTitle()
	})
}

// SetTwitterDescription sets the "twitter_description" field.
func (u *PageUpsertOne) SetTwitterDescription(v string) *PageUpsertOne {
	return u.Update(func(s *PageUpsert) {
		s.SetTwitterDescription(v)
	})
}

// UpdateTwitterDescription sets the "twitter_description" field to the value that was provided on create.
func (u *PageUpsertOne) UpdateTwitterDescription() *PageUpsertOne {
	return u.Update(func(s *PageUpsert) {
		s.UpdateTwitterDescription()
	})
}

// SetTwitterImage sets the "twitter_image" field.
func (u *PageUpsertOne) SetTwitterImage(v string) *PageUpsertOne {
	return u.Update(func(s *PageUpsert) {
		s.SetTwitterImage(v)
	})
}

// UpdateTwitterImage sets the "twitter_image" field to the value that was provided on create.
func (u *PageUpsertOne) UpdateTwitterImage() *PageUpsertOne {
	return u.Update(func(s *PageUpsert) {
		s.UpdateTwitterImage()
	})
}

// SetOgSiteName sets the "og_site_name" field.
func (u *PageUpsertOne) SetOgSiteName(v string) *PageUpsertOne {
	return u.Update(func(s *PageUpsert) {
		s.SetOgSiteName(v)
	})
}

// UpdateOgSiteName sets the "og_site_name" field to the value that was provided on create.
func (u *PageUpsertOne) UpdateOgSiteName() *PageUpsertOne {
	return u.Update(func(s *PageUpsert) {
		s.UpdateOgSiteName()
	})
}

// SetOgLocale sets the "og_locale" field.
func (u *PageUpsertOne) SetOgLocale(v string) *PageUpsertOne {
	return u.Update(func(s *PageUpsert) {
		s.SetOgLocale(v)
	})
}

// UpdateOgLocale sets the "og_locale" field to the value that was provided on create.
func (u *PageUpsertOne) UpdateOgLocale() *PageUpsertOne {
	return u.Update(func(s *PageUpsert) {
		s.UpdateOgLocale()
	})
}

// SetOgTitle sets the "og_title" field.
func (u *PageUpsertOne) SetOgTitle(v string) *PageUpsertOne {
	return u.Update(func(s *PageUpsert) {
		s.SetOgTitle(v)
	})
}

// UpdateOgTitle sets the "og_title" field to the value that was provided on create.
func (u *PageUpsertOne) UpdateOgTitle() *PageUpsertOne {
	return u.Update(func(s *PageUpsert) {
		s.UpdateOgTitle()
	})
}

// SetOgDescription sets the "og_description" field.
func (u *PageUpsertOne) SetOgDescription(v string) *PageUpsertOne {
	return u.Update(func(s *PageUpsert) {
		s.SetOgDescription(v)
	})
}

// UpdateOgDescription sets the "og_description" field to the value that was provided on create.
func (u *PageUpsertOne) UpdateOgDescription() *PageUpsertOne {
	return u.Update(func(s *PageUpsert) {
		s.UpdateOgDescription()
	})
}

// SetOgType sets the "og_type" field.
func (u *PageUpsertOne) SetOgType(v string) *PageUpsertOne {
	return u.Update(func(s *PageUpsert) {
		s.SetOgType(v)
	})
}

// UpdateOgType sets the "og_type" field to the value that was provided on create.
func (u *PageUpsertOne) UpdateOgType() *PageUpsertOne {
	return u.Update(func(s *PageUpsert) {
		s.UpdateOgType()
	})
}

// SetOgURL sets the "og_url" field.
func (u *PageUpsertOne) SetOgURL(v string) *PageUpsertOne {
	return u.Update(func(s *PageUpsert) {
		s.SetOgURL(v)
	})
}

// UpdateOgURL sets the "og_url" field to the value that was provided on create.
func (u *PageUpsertOne) UpdateOgURL() *PageUpsertOne {
	return u.Update(func(s *PageUpsert) {
		s.UpdateOgURL()
	})
}

// SetOgImage sets the "og_image" field.
func (u *PageUpsertOne) SetOgImage(v string) *PageUpsertOne {
	return u.Update(func(s *PageUpsert) {
		s.SetOgImage(v)
	})
}

// UpdateOgImage sets the "og_image" field to the value that was provided on create.
func (u *PageUpsertOne) UpdateOgImage() *PageUpsertOne {
	return u.Update(func(s *PageUpsert) {
		s.UpdateOgImage()
	})
}

// SetOgImageType sets the "og_image_type" field.
func (u *PageUpsertOne) SetOgImageType(v string) *PageUpsertOne {
	return u.Update(func(s *PageUpsert) {
		s.SetOgImageType(v)
	})
}

// UpdateOgImageType sets the "og_image_type" field to the value that was provided on create.
func (u *PageUpsertOne) UpdateOgImageType() *PageUpsertOne {
	return u.Update(func(s *PageUpsert) {
		s.UpdateOgImageType()
	})
}

// SetOgImageURL sets the "og_image_url" field.
func (u *PageUpsertOne) SetOgImageURL(v string) *PageUpsertOne {
	return u.Update(func(s *PageUpsert) {
		s.SetOgImageURL(v)
	})
}

// UpdateOgImageURL sets the "og_image_url" field to the value that was provided on create.
func (u *PageUpsertOne) UpdateOgImageURL() *PageUpsertOne {
	return u.Update(func(s *PageUpsert) {
		s.UpdateOgImageURL()
	})
}

// SetOgImageSecureURL sets the "og_image_secure_url" field.
func (u *PageUpsertOne) SetOgImageSecureURL(v string) *PageUpsertOne {
	return u.Update(func(s *PageUpsert) {
		s.SetOgImageSecureURL(v)
	})
}

// UpdateOgImageSecureURL sets the "og_image_secure_url" field to the value that was provided on create.
func (u *PageUpsertOne) UpdateOgImageSecureURL() *PageUpsertOne {
	return u.Update(func(s *PageUpsert) {
		s.UpdateOgImageSecureURL()
	})
}

// SetOgImageWidth sets the "og_image_width" field.
func (u *PageUpsertOne) SetOgImageWidth(v string) *PageUpsertOne {
	return u.Update(func(s *PageUpsert) {
		s.SetOgImageWidth(v)
	})
}

// UpdateOgImageWidth sets the "og_image_width" field to the value that was provided on create.
func (u *PageUpsertOne) UpdateOgImageWidth() *PageUpsertOne {
	return u.Update(func(s *PageUpsert) {
		s.UpdateOgImageWidth()
	})
}

// SetOgImageHeight sets the "og_image_height" field.
func (u *PageUpsertOne) SetOgImageHeight(v string) *PageUpsertOne {
	return u.Update(func(s *PageUpsert) {
		s.SetOgImageHeight(v)
	})
}

// UpdateOgImageHeight sets the "og_image_height" field to the value that was provided on create.
func (u *PageUpsertOne) UpdateOgImageHeight() *PageUpsertOne {
	return u.Update(func(s *PageUpsert) {
		s.UpdateOgImageHeight()
	})
}

// SetOgVideo sets the "og_video" field.
func (u *PageUpsertOne) SetOgVideo(v string) *PageUpsertOne {
	return u.Update(func(s *PageUpsert) {
		s.SetOgVideo(v)
	})
}

// UpdateOgVideo sets the "og_video" field to the value that was provided on create.
func (u *PageUpsertOne) UpdateOgVideo() *PageUpsertOne {
	return u.Update(func(s *PageUpsert) {
		s.UpdateOgVideo()
	})
}

// SetOgVideoType sets the "og_video_type" field.
func (u *PageUpsertOne) SetOgVideoType(v string) *PageUpsertOne {
	return u.Update(func(s *PageUpsert) {
		s.SetOgVideoType(v)
	})
}

// UpdateOgVideoType sets the "og_video_type" field to the value that was provided on create.
func (u *PageUpsertOne) UpdateOgVideoType() *PageUpsertOne {
	return u.Update(func(s *PageUpsert) {
		s.UpdateOgVideoType()
	})
}

// SetOgVideoURL sets the "og_video_url" field.
func (u *PageUpsertOne) SetOgVideoURL(v string) *PageUpsertOne {
	return u.Update(func(s *PageUpsert) {
		s.SetOgVideoURL(v)
	})
}

// UpdateOgVideoURL sets the "og_video_url" field to the value that was provided on create.
func (u *PageUpsertOne) UpdateOgVideoURL() *PageUpsertOne {
	return u.Update(func(s *PageUpsert) {
		s.UpdateOgVideoURL()
	})
}

// SetOgVideoSecureURL sets the "og_video_secure_url" field.
func (u *PageUpsertOne) SetOgVideoSecureURL(v string) *PageUpsertOne {
	return u.Update(func(s *PageUpsert) {
		s.SetOgVideoSecureURL(v)
	})
}

// UpdateOgVideoSecureURL sets the "og_video_secure_url" field to the value that was provided on create.
func (u *PageUpsertOne) UpdateOgVideoSecureURL() *PageUpsertOne {
	return u.Update(func(s *PageUpsert) {
		s.UpdateOgVideoSecureURL()
	})
}

// SetOgVideoWidth sets the "og_video_width" field.
func (u *PageUpsertOne) SetOgVideoWidth(v string) *PageUpsertOne {
	return u.Update(func(s *PageUpsert) {
		s.SetOgVideoWidth(v)
	})
}

// UpdateOgVideoWidth sets the "og_video_width" field to the value that was provided on create.
func (u *PageUpsertOne) UpdateOgVideoWidth() *PageUpsertOne {
	return u.Update(func(s *PageUpsert) {
		s.UpdateOgVideoWidth()
	})
}

// SetOgVideoHeight sets the "og_video_height" field.
func (u *PageUpsertOne) SetOgVideoHeight(v string) *PageUpsertOne {
	return u.Update(func(s *PageUpsert) {
		s.SetOgVideoHeight(v)
	})
}

// UpdateOgVideoHeight sets the "og_video_height" field to the value that was provided on create.
func (u *PageUpsertOne) UpdateOgVideoHeight() *PageUpsertOne {
	return u.Update(func(s *PageUpsert) {
		s.UpdateOgVideoHeight()
	})
}

// Exec executes the query.
func (u *PageUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for PageCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *PageUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *PageUpsertOne) ID(ctx context.Context) (id string, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: PageUpsertOne.ID is not supported by MySQL driver. Use PageUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *PageUpsertOne) IDX(ctx context.Context) string {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// PageCreateBulk is the builder for creating many Page entities in bulk.
type PageCreateBulk struct {
	config
	builders []*PageCreate
	conflict []sql.ConflictOption
}

// Save creates the Page entities in the database.
func (pcb *PageCreateBulk) Save(ctx context.Context) ([]*Page, error) {
	specs := make([]*sqlgraph.CreateSpec, len(pcb.builders))
	nodes := make([]*Page, len(pcb.builders))
	mutators := make([]Mutator, len(pcb.builders))
	for i := range pcb.builders {
		func(i int, root context.Context) {
			builder := pcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*PageMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, pcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = pcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, pcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, pcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (pcb *PageCreateBulk) SaveX(ctx context.Context) []*Page {
	v, err := pcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pcb *PageCreateBulk) Exec(ctx context.Context) error {
	_, err := pcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pcb *PageCreateBulk) ExecX(ctx context.Context) {
	if err := pcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Page.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.PageUpsert) {
//			SetReferredID(v+v).
//		}).
//		Exec(ctx)
func (pcb *PageCreateBulk) OnConflict(opts ...sql.ConflictOption) *PageUpsertBulk {
	pcb.conflict = opts
	return &PageUpsertBulk{
		create: pcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Page.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (pcb *PageCreateBulk) OnConflictColumns(columns ...string) *PageUpsertBulk {
	pcb.conflict = append(pcb.conflict, sql.ConflictColumns(columns...))
	return &PageUpsertBulk{
		create: pcb,
	}
}

// PageUpsertBulk is the builder for "upsert"-ing
// a bulk of Page nodes.
type PageUpsertBulk struct {
	create *PageCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Page.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(page.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *PageUpsertBulk) UpdateNewValues() *PageUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(page.FieldID)
			}
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(page.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Page.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *PageUpsertBulk) Ignore() *PageUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *PageUpsertBulk) DoNothing() *PageUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the PageCreateBulk.OnConflict
// documentation for more info.
func (u *PageUpsertBulk) Update(set func(*PageUpsert)) *PageUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&PageUpsert{UpdateSet: update})
	}))
	return u
}

// SetReferredID sets the "referred_id" field.
func (u *PageUpsertBulk) SetReferredID(v string) *PageUpsertBulk {
	return u.Update(func(s *PageUpsert) {
		s.SetReferredID(v)
	})
}

// UpdateReferredID sets the "referred_id" field to the value that was provided on create.
func (u *PageUpsertBulk) UpdateReferredID() *PageUpsertBulk {
	return u.Update(func(s *PageUpsert) {
		s.UpdateReferredID()
	})
}

// SetCrawlingVersion sets the "crawling_version" field.
func (u *PageUpsertBulk) SetCrawlingVersion(v string) *PageUpsertBulk {
	return u.Update(func(s *PageUpsert) {
		s.SetCrawlingVersion(v)
	})
}

// UpdateCrawlingVersion sets the "crawling_version" field to the value that was provided on create.
func (u *PageUpsertBulk) UpdateCrawlingVersion() *PageUpsertBulk {
	return u.Update(func(s *PageUpsert) {
		s.UpdateCrawlingVersion()
	})
}

// SetDomain sets the "domain" field.
func (u *PageUpsertBulk) SetDomain(v string) *PageUpsertBulk {
	return u.Update(func(s *PageUpsert) {
		s.SetDomain(v)
	})
}

// UpdateDomain sets the "domain" field to the value that was provided on create.
func (u *PageUpsertBulk) UpdateDomain() *PageUpsertBulk {
	return u.Update(func(s *PageUpsert) {
		s.UpdateDomain()
	})
}

// SetPort sets the "port" field.
func (u *PageUpsertBulk) SetPort(v string) *PageUpsertBulk {
	return u.Update(func(s *PageUpsert) {
		s.SetPort(v)
	})
}

// UpdatePort sets the "port" field to the value that was provided on create.
func (u *PageUpsertBulk) UpdatePort() *PageUpsertBulk {
	return u.Update(func(s *PageUpsert) {
		s.UpdatePort()
	})
}

// SetIsHTTPS sets the "is_https" field.
func (u *PageUpsertBulk) SetIsHTTPS(v bool) *PageUpsertBulk {
	return u.Update(func(s *PageUpsert) {
		s.SetIsHTTPS(v)
	})
}

// UpdateIsHTTPS sets the "is_https" field to the value that was provided on create.
func (u *PageUpsertBulk) UpdateIsHTTPS() *PageUpsertBulk {
	return u.Update(func(s *PageUpsert) {
		s.UpdateIsHTTPS()
	})
}

// SetIndexedURL sets the "indexed_url" field.
func (u *PageUpsertBulk) SetIndexedURL(v string) *PageUpsertBulk {
	return u.Update(func(s *PageUpsert) {
		s.SetIndexedURL(v)
	})
}

// UpdateIndexedURL sets the "indexed_url" field to the value that was provided on create.
func (u *PageUpsertBulk) UpdateIndexedURL() *PageUpsertBulk {
	return u.Update(func(s *PageUpsert) {
		s.UpdateIndexedURL()
	})
}

// SetPath sets the "path" field.
func (u *PageUpsertBulk) SetPath(v string) *PageUpsertBulk {
	return u.Update(func(s *PageUpsert) {
		s.SetPath(v)
	})
}

// UpdatePath sets the "path" field to the value that was provided on create.
func (u *PageUpsertBulk) UpdatePath() *PageUpsertBulk {
	return u.Update(func(s *PageUpsert) {
		s.UpdatePath()
	})
}

// SetQuerystring sets the "querystring" field.
func (u *PageUpsertBulk) SetQuerystring(v string) *PageUpsertBulk {
	return u.Update(func(s *PageUpsert) {
		s.SetQuerystring(v)
	})
}

// UpdateQuerystring sets the "querystring" field to the value that was provided on create.
func (u *PageUpsertBulk) UpdateQuerystring() *PageUpsertBulk {
	return u.Update(func(s *PageUpsert) {
		s.UpdateQuerystring()
	})
}

// SetURL sets the "url" field.
func (u *PageUpsertBulk) SetURL(v string) *PageUpsertBulk {
	return u.Update(func(s *PageUpsert) {
		s.SetURL(v)
	})
}

// UpdateURL sets the "url" field to the value that was provided on create.
func (u *PageUpsertBulk) UpdateURL() *PageUpsertBulk {
	return u.Update(func(s *PageUpsert) {
		s.UpdateURL()
	})
}

// SetCountReferred sets the "count_referred" field.
func (u *PageUpsertBulk) SetCountReferred(v int64) *PageUpsertBulk {
	return u.Update(func(s *PageUpsert) {
		s.SetCountReferred(v)
	})
}

// AddCountReferred adds v to the "count_referred" field.
func (u *PageUpsertBulk) AddCountReferred(v int64) *PageUpsertBulk {
	return u.Update(func(s *PageUpsert) {
		s.AddCountReferred(v)
	})
}

// UpdateCountReferred sets the "count_referred" field to the value that was provided on create.
func (u *PageUpsertBulk) UpdateCountReferred() *PageUpsertBulk {
	return u.Update(func(s *PageUpsert) {
		s.UpdateCountReferred()
	})
}

// SetStatus sets the "status" field.
func (u *PageUpsertBulk) SetStatus(v page.Status) *PageUpsertBulk {
	return u.Update(func(s *PageUpsert) {
		s.SetStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *PageUpsertBulk) UpdateStatus() *PageUpsertBulk {
	return u.Update(func(s *PageUpsert) {
		s.UpdateStatus()
	})
}

// SetCreatedBy sets the "created_by" field.
func (u *PageUpsertBulk) SetCreatedBy(v string) *PageUpsertBulk {
	return u.Update(func(s *PageUpsert) {
		s.SetCreatedBy(v)
	})
}

// UpdateCreatedBy sets the "created_by" field to the value that was provided on create.
func (u *PageUpsertBulk) UpdateCreatedBy() *PageUpsertBulk {
	return u.Update(func(s *PageUpsert) {
		s.UpdateCreatedBy()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *PageUpsertBulk) SetUpdatedAt(v time.Time) *PageUpsertBulk {
	return u.Update(func(s *PageUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *PageUpsertBulk) UpdateUpdatedAt() *PageUpsertBulk {
	return u.Update(func(s *PageUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetUpdatedBy sets the "updated_by" field.
func (u *PageUpsertBulk) SetUpdatedBy(v string) *PageUpsertBulk {
	return u.Update(func(s *PageUpsert) {
		s.SetUpdatedBy(v)
	})
}

// UpdateUpdatedBy sets the "updated_by" field to the value that was provided on create.
func (u *PageUpsertBulk) UpdateUpdatedBy() *PageUpsertBulk {
	return u.Update(func(s *PageUpsert) {
		s.UpdateUpdatedBy()
	})
}

// SetTitle sets the "title" field.
func (u *PageUpsertBulk) SetTitle(v string) *PageUpsertBulk {
	return u.Update(func(s *PageUpsert) {
		s.SetTitle(v)
	})
}

// UpdateTitle sets the "title" field to the value that was provided on create.
func (u *PageUpsertBulk) UpdateTitle() *PageUpsertBulk {
	return u.Update(func(s *PageUpsert) {
		s.UpdateTitle()
	})
}

// SetDescription sets the "description" field.
func (u *PageUpsertBulk) SetDescription(v string) *PageUpsertBulk {
	return u.Update(func(s *PageUpsert) {
		s.SetDescription(v)
	})
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *PageUpsertBulk) UpdateDescription() *PageUpsertBulk {
	return u.Update(func(s *PageUpsert) {
		s.UpdateDescription()
	})
}

// SetKeywords sets the "keywords" field.
func (u *PageUpsertBulk) SetKeywords(v string) *PageUpsertBulk {
	return u.Update(func(s *PageUpsert) {
		s.SetKeywords(v)
	})
}

// UpdateKeywords sets the "keywords" field to the value that was provided on create.
func (u *PageUpsertBulk) UpdateKeywords() *PageUpsertBulk {
	return u.Update(func(s *PageUpsert) {
		s.UpdateKeywords()
	})
}

// SetContentLanguage sets the "content_language" field.
func (u *PageUpsertBulk) SetContentLanguage(v string) *PageUpsertBulk {
	return u.Update(func(s *PageUpsert) {
		s.SetContentLanguage(v)
	})
}

// UpdateContentLanguage sets the "content_language" field to the value that was provided on create.
func (u *PageUpsertBulk) UpdateContentLanguage() *PageUpsertBulk {
	return u.Update(func(s *PageUpsert) {
		s.UpdateContentLanguage()
	})
}

// SetTwitterCard sets the "twitter_card" field.
func (u *PageUpsertBulk) SetTwitterCard(v string) *PageUpsertBulk {
	return u.Update(func(s *PageUpsert) {
		s.SetTwitterCard(v)
	})
}

// UpdateTwitterCard sets the "twitter_card" field to the value that was provided on create.
func (u *PageUpsertBulk) UpdateTwitterCard() *PageUpsertBulk {
	return u.Update(func(s *PageUpsert) {
		s.UpdateTwitterCard()
	})
}

// SetTwitterURL sets the "twitter_url" field.
func (u *PageUpsertBulk) SetTwitterURL(v string) *PageUpsertBulk {
	return u.Update(func(s *PageUpsert) {
		s.SetTwitterURL(v)
	})
}

// UpdateTwitterURL sets the "twitter_url" field to the value that was provided on create.
func (u *PageUpsertBulk) UpdateTwitterURL() *PageUpsertBulk {
	return u.Update(func(s *PageUpsert) {
		s.UpdateTwitterURL()
	})
}

// SetTwitterTitle sets the "twitter_title" field.
func (u *PageUpsertBulk) SetTwitterTitle(v string) *PageUpsertBulk {
	return u.Update(func(s *PageUpsert) {
		s.SetTwitterTitle(v)
	})
}

// UpdateTwitterTitle sets the "twitter_title" field to the value that was provided on create.
func (u *PageUpsertBulk) UpdateTwitterTitle() *PageUpsertBulk {
	return u.Update(func(s *PageUpsert) {
		s.UpdateTwitterTitle()
	})
}

// SetTwitterDescription sets the "twitter_description" field.
func (u *PageUpsertBulk) SetTwitterDescription(v string) *PageUpsertBulk {
	return u.Update(func(s *PageUpsert) {
		s.SetTwitterDescription(v)
	})
}

// UpdateTwitterDescription sets the "twitter_description" field to the value that was provided on create.
func (u *PageUpsertBulk) UpdateTwitterDescription() *PageUpsertBulk {
	return u.Update(func(s *PageUpsert) {
		s.UpdateTwitterDescription()
	})
}

// SetTwitterImage sets the "twitter_image" field.
func (u *PageUpsertBulk) SetTwitterImage(v string) *PageUpsertBulk {
	return u.Update(func(s *PageUpsert) {
		s.SetTwitterImage(v)
	})
}

// UpdateTwitterImage sets the "twitter_image" field to the value that was provided on create.
func (u *PageUpsertBulk) UpdateTwitterImage() *PageUpsertBulk {
	return u.Update(func(s *PageUpsert) {
		s.UpdateTwitterImage()
	})
}

// SetOgSiteName sets the "og_site_name" field.
func (u *PageUpsertBulk) SetOgSiteName(v string) *PageUpsertBulk {
	return u.Update(func(s *PageUpsert) {
		s.SetOgSiteName(v)
	})
}

// UpdateOgSiteName sets the "og_site_name" field to the value that was provided on create.
func (u *PageUpsertBulk) UpdateOgSiteName() *PageUpsertBulk {
	return u.Update(func(s *PageUpsert) {
		s.UpdateOgSiteName()
	})
}

// SetOgLocale sets the "og_locale" field.
func (u *PageUpsertBulk) SetOgLocale(v string) *PageUpsertBulk {
	return u.Update(func(s *PageUpsert) {
		s.SetOgLocale(v)
	})
}

// UpdateOgLocale sets the "og_locale" field to the value that was provided on create.
func (u *PageUpsertBulk) UpdateOgLocale() *PageUpsertBulk {
	return u.Update(func(s *PageUpsert) {
		s.UpdateOgLocale()
	})
}

// SetOgTitle sets the "og_title" field.
func (u *PageUpsertBulk) SetOgTitle(v string) *PageUpsertBulk {
	return u.Update(func(s *PageUpsert) {
		s.SetOgTitle(v)
	})
}

// UpdateOgTitle sets the "og_title" field to the value that was provided on create.
func (u *PageUpsertBulk) UpdateOgTitle() *PageUpsertBulk {
	return u.Update(func(s *PageUpsert) {
		s.UpdateOgTitle()
	})
}

// SetOgDescription sets the "og_description" field.
func (u *PageUpsertBulk) SetOgDescription(v string) *PageUpsertBulk {
	return u.Update(func(s *PageUpsert) {
		s.SetOgDescription(v)
	})
}

// UpdateOgDescription sets the "og_description" field to the value that was provided on create.
func (u *PageUpsertBulk) UpdateOgDescription() *PageUpsertBulk {
	return u.Update(func(s *PageUpsert) {
		s.UpdateOgDescription()
	})
}

// SetOgType sets the "og_type" field.
func (u *PageUpsertBulk) SetOgType(v string) *PageUpsertBulk {
	return u.Update(func(s *PageUpsert) {
		s.SetOgType(v)
	})
}

// UpdateOgType sets the "og_type" field to the value that was provided on create.
func (u *PageUpsertBulk) UpdateOgType() *PageUpsertBulk {
	return u.Update(func(s *PageUpsert) {
		s.UpdateOgType()
	})
}

// SetOgURL sets the "og_url" field.
func (u *PageUpsertBulk) SetOgURL(v string) *PageUpsertBulk {
	return u.Update(func(s *PageUpsert) {
		s.SetOgURL(v)
	})
}

// UpdateOgURL sets the "og_url" field to the value that was provided on create.
func (u *PageUpsertBulk) UpdateOgURL() *PageUpsertBulk {
	return u.Update(func(s *PageUpsert) {
		s.UpdateOgURL()
	})
}

// SetOgImage sets the "og_image" field.
func (u *PageUpsertBulk) SetOgImage(v string) *PageUpsertBulk {
	return u.Update(func(s *PageUpsert) {
		s.SetOgImage(v)
	})
}

// UpdateOgImage sets the "og_image" field to the value that was provided on create.
func (u *PageUpsertBulk) UpdateOgImage() *PageUpsertBulk {
	return u.Update(func(s *PageUpsert) {
		s.UpdateOgImage()
	})
}

// SetOgImageType sets the "og_image_type" field.
func (u *PageUpsertBulk) SetOgImageType(v string) *PageUpsertBulk {
	return u.Update(func(s *PageUpsert) {
		s.SetOgImageType(v)
	})
}

// UpdateOgImageType sets the "og_image_type" field to the value that was provided on create.
func (u *PageUpsertBulk) UpdateOgImageType() *PageUpsertBulk {
	return u.Update(func(s *PageUpsert) {
		s.UpdateOgImageType()
	})
}

// SetOgImageURL sets the "og_image_url" field.
func (u *PageUpsertBulk) SetOgImageURL(v string) *PageUpsertBulk {
	return u.Update(func(s *PageUpsert) {
		s.SetOgImageURL(v)
	})
}

// UpdateOgImageURL sets the "og_image_url" field to the value that was provided on create.
func (u *PageUpsertBulk) UpdateOgImageURL() *PageUpsertBulk {
	return u.Update(func(s *PageUpsert) {
		s.UpdateOgImageURL()
	})
}

// SetOgImageSecureURL sets the "og_image_secure_url" field.
func (u *PageUpsertBulk) SetOgImageSecureURL(v string) *PageUpsertBulk {
	return u.Update(func(s *PageUpsert) {
		s.SetOgImageSecureURL(v)
	})
}

// UpdateOgImageSecureURL sets the "og_image_secure_url" field to the value that was provided on create.
func (u *PageUpsertBulk) UpdateOgImageSecureURL() *PageUpsertBulk {
	return u.Update(func(s *PageUpsert) {
		s.UpdateOgImageSecureURL()
	})
}

// SetOgImageWidth sets the "og_image_width" field.
func (u *PageUpsertBulk) SetOgImageWidth(v string) *PageUpsertBulk {
	return u.Update(func(s *PageUpsert) {
		s.SetOgImageWidth(v)
	})
}

// UpdateOgImageWidth sets the "og_image_width" field to the value that was provided on create.
func (u *PageUpsertBulk) UpdateOgImageWidth() *PageUpsertBulk {
	return u.Update(func(s *PageUpsert) {
		s.UpdateOgImageWidth()
	})
}

// SetOgImageHeight sets the "og_image_height" field.
func (u *PageUpsertBulk) SetOgImageHeight(v string) *PageUpsertBulk {
	return u.Update(func(s *PageUpsert) {
		s.SetOgImageHeight(v)
	})
}

// UpdateOgImageHeight sets the "og_image_height" field to the value that was provided on create.
func (u *PageUpsertBulk) UpdateOgImageHeight() *PageUpsertBulk {
	return u.Update(func(s *PageUpsert) {
		s.UpdateOgImageHeight()
	})
}

// SetOgVideo sets the "og_video" field.
func (u *PageUpsertBulk) SetOgVideo(v string) *PageUpsertBulk {
	return u.Update(func(s *PageUpsert) {
		s.SetOgVideo(v)
	})
}

// UpdateOgVideo sets the "og_video" field to the value that was provided on create.
func (u *PageUpsertBulk) UpdateOgVideo() *PageUpsertBulk {
	return u.Update(func(s *PageUpsert) {
		s.UpdateOgVideo()
	})
}

// SetOgVideoType sets the "og_video_type" field.
func (u *PageUpsertBulk) SetOgVideoType(v string) *PageUpsertBulk {
	return u.Update(func(s *PageUpsert) {
		s.SetOgVideoType(v)
	})
}

// UpdateOgVideoType sets the "og_video_type" field to the value that was provided on create.
func (u *PageUpsertBulk) UpdateOgVideoType() *PageUpsertBulk {
	return u.Update(func(s *PageUpsert) {
		s.UpdateOgVideoType()
	})
}

// SetOgVideoURL sets the "og_video_url" field.
func (u *PageUpsertBulk) SetOgVideoURL(v string) *PageUpsertBulk {
	return u.Update(func(s *PageUpsert) {
		s.SetOgVideoURL(v)
	})
}

// UpdateOgVideoURL sets the "og_video_url" field to the value that was provided on create.
func (u *PageUpsertBulk) UpdateOgVideoURL() *PageUpsertBulk {
	return u.Update(func(s *PageUpsert) {
		s.UpdateOgVideoURL()
	})
}

// SetOgVideoSecureURL sets the "og_video_secure_url" field.
func (u *PageUpsertBulk) SetOgVideoSecureURL(v string) *PageUpsertBulk {
	return u.Update(func(s *PageUpsert) {
		s.SetOgVideoSecureURL(v)
	})
}

// UpdateOgVideoSecureURL sets the "og_video_secure_url" field to the value that was provided on create.
func (u *PageUpsertBulk) UpdateOgVideoSecureURL() *PageUpsertBulk {
	return u.Update(func(s *PageUpsert) {
		s.UpdateOgVideoSecureURL()
	})
}

// SetOgVideoWidth sets the "og_video_width" field.
func (u *PageUpsertBulk) SetOgVideoWidth(v string) *PageUpsertBulk {
	return u.Update(func(s *PageUpsert) {
		s.SetOgVideoWidth(v)
	})
}

// UpdateOgVideoWidth sets the "og_video_width" field to the value that was provided on create.
func (u *PageUpsertBulk) UpdateOgVideoWidth() *PageUpsertBulk {
	return u.Update(func(s *PageUpsert) {
		s.UpdateOgVideoWidth()
	})
}

// SetOgVideoHeight sets the "og_video_height" field.
func (u *PageUpsertBulk) SetOgVideoHeight(v string) *PageUpsertBulk {
	return u.Update(func(s *PageUpsert) {
		s.SetOgVideoHeight(v)
	})
}

// UpdateOgVideoHeight sets the "og_video_height" field to the value that was provided on create.
func (u *PageUpsertBulk) UpdateOgVideoHeight() *PageUpsertBulk {
	return u.Update(func(s *PageUpsert) {
		s.UpdateOgVideoHeight()
	})
}

// Exec executes the query.
func (u *PageUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the PageCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for PageCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *PageUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
