// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"sync"
	"time"

	"github.com/drakejin/crawler/internal/storage/db/ent/page"
	"github.com/drakejin/crawler/internal/storage/db/ent/pagelink"
	"github.com/drakejin/crawler/internal/storage/db/ent/pagesource"
	"github.com/drakejin/crawler/internal/storage/db/ent/predicate"

	"entgo.io/ent"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypePage       = "Page"
	TypePageLink   = "PageLink"
	TypePageSource = "PageSource"
)

// PageMutation represents an operation that mutates the Page nodes in the graph.
type PageMutation struct {
	config
	op                  Op
	typ                 string
	id                  *string
	referred_id         *string
	crawling_version    *string
	domain              *string
	port                *string
	is_https            *bool
	indexed_url         *string
	_path               *string
	querystring         *string
	url                 *string
	count_referred      *int64
	addcount_referred   *int64
	status              *page.Status
	created_at          *time.Time
	created_by          *string
	updated_at          *time.Time
	updated_by          *string
	title               *string
	description         *string
	keywords            *string
	content_language    *string
	twitter_card        *string
	twitter_url         *string
	twitter_title       *string
	twitter_description *string
	twitter_image       *string
	og_site_name        *string
	og_locale           *string
	og_title            *string
	og_description      *string
	og_type             *string
	og_url              *string
	og_image            *string
	og_image_type       *string
	og_image_url        *string
	og_image_secure_url *string
	og_image_width      *string
	og_image_height     *string
	og_video            *string
	og_video_type       *string
	og_video_url        *string
	og_video_secure_url *string
	og_video_width      *string
	og_video_height     *string
	clearedFields       map[string]struct{}
	page_source         map[string]struct{}
	removedpage_source  map[string]struct{}
	clearedpage_source  bool
	done                bool
	oldValue            func(context.Context) (*Page, error)
	predicates          []predicate.Page
}

var _ ent.Mutation = (*PageMutation)(nil)

// pageOption allows management of the mutation configuration using functional options.
type pageOption func(*PageMutation)

// newPageMutation creates new mutation for the Page entity.
func newPageMutation(c config, op Op, opts ...pageOption) *PageMutation {
	m := &PageMutation{
		config:        c,
		op:            op,
		typ:           TypePage,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withPageID sets the ID field of the mutation.
func withPageID(id string) pageOption {
	return func(m *PageMutation) {
		var (
			err   error
			once  sync.Once
			value *Page
		)
		m.oldValue = func(ctx context.Context) (*Page, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Page.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withPage sets the old Page of the mutation.
func withPage(node *Page) pageOption {
	return func(m *PageMutation) {
		m.oldValue = func(context.Context) (*Page, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m PageMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m PageMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Page entities.
func (m *PageMutation) SetID(id string) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *PageMutation) ID() (id string, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *PageMutation) IDs(ctx context.Context) ([]string, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []string{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Page.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetReferredID sets the "referred_id" field.
func (m *PageMutation) SetReferredID(s string) {
	m.referred_id = &s
}

// ReferredID returns the value of the "referred_id" field in the mutation.
func (m *PageMutation) ReferredID() (r string, exists bool) {
	v := m.referred_id
	if v == nil {
		return
	}
	return *v, true
}

// OldReferredID returns the old "referred_id" field's value of the Page entity.
// If the Page object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PageMutation) OldReferredID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldReferredID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldReferredID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldReferredID: %w", err)
	}
	return oldValue.ReferredID, nil
}

// ResetReferredID resets all changes to the "referred_id" field.
func (m *PageMutation) ResetReferredID() {
	m.referred_id = nil
}

// SetCrawlingVersion sets the "crawling_version" field.
func (m *PageMutation) SetCrawlingVersion(s string) {
	m.crawling_version = &s
}

// CrawlingVersion returns the value of the "crawling_version" field in the mutation.
func (m *PageMutation) CrawlingVersion() (r string, exists bool) {
	v := m.crawling_version
	if v == nil {
		return
	}
	return *v, true
}

// OldCrawlingVersion returns the old "crawling_version" field's value of the Page entity.
// If the Page object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PageMutation) OldCrawlingVersion(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCrawlingVersion is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCrawlingVersion requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCrawlingVersion: %w", err)
	}
	return oldValue.CrawlingVersion, nil
}

// ResetCrawlingVersion resets all changes to the "crawling_version" field.
func (m *PageMutation) ResetCrawlingVersion() {
	m.crawling_version = nil
}

// SetDomain sets the "domain" field.
func (m *PageMutation) SetDomain(s string) {
	m.domain = &s
}

// Domain returns the value of the "domain" field in the mutation.
func (m *PageMutation) Domain() (r string, exists bool) {
	v := m.domain
	if v == nil {
		return
	}
	return *v, true
}

// OldDomain returns the old "domain" field's value of the Page entity.
// If the Page object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PageMutation) OldDomain(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDomain is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDomain requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDomain: %w", err)
	}
	return oldValue.Domain, nil
}

// ResetDomain resets all changes to the "domain" field.
func (m *PageMutation) ResetDomain() {
	m.domain = nil
}

// SetPort sets the "port" field.
func (m *PageMutation) SetPort(s string) {
	m.port = &s
}

// Port returns the value of the "port" field in the mutation.
func (m *PageMutation) Port() (r string, exists bool) {
	v := m.port
	if v == nil {
		return
	}
	return *v, true
}

// OldPort returns the old "port" field's value of the Page entity.
// If the Page object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PageMutation) OldPort(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPort is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPort requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPort: %w", err)
	}
	return oldValue.Port, nil
}

// ResetPort resets all changes to the "port" field.
func (m *PageMutation) ResetPort() {
	m.port = nil
}

// SetIsHTTPS sets the "is_https" field.
func (m *PageMutation) SetIsHTTPS(b bool) {
	m.is_https = &b
}

// IsHTTPS returns the value of the "is_https" field in the mutation.
func (m *PageMutation) IsHTTPS() (r bool, exists bool) {
	v := m.is_https
	if v == nil {
		return
	}
	return *v, true
}

// OldIsHTTPS returns the old "is_https" field's value of the Page entity.
// If the Page object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PageMutation) OldIsHTTPS(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldIsHTTPS is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldIsHTTPS requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIsHTTPS: %w", err)
	}
	return oldValue.IsHTTPS, nil
}

// ResetIsHTTPS resets all changes to the "is_https" field.
func (m *PageMutation) ResetIsHTTPS() {
	m.is_https = nil
}

// SetIndexedURL sets the "indexed_url" field.
func (m *PageMutation) SetIndexedURL(s string) {
	m.indexed_url = &s
}

// IndexedURL returns the value of the "indexed_url" field in the mutation.
func (m *PageMutation) IndexedURL() (r string, exists bool) {
	v := m.indexed_url
	if v == nil {
		return
	}
	return *v, true
}

// OldIndexedURL returns the old "indexed_url" field's value of the Page entity.
// If the Page object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PageMutation) OldIndexedURL(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldIndexedURL is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldIndexedURL requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIndexedURL: %w", err)
	}
	return oldValue.IndexedURL, nil
}

// ResetIndexedURL resets all changes to the "indexed_url" field.
func (m *PageMutation) ResetIndexedURL() {
	m.indexed_url = nil
}

// SetPath sets the "path" field.
func (m *PageMutation) SetPath(s string) {
	m._path = &s
}

// Path returns the value of the "path" field in the mutation.
func (m *PageMutation) Path() (r string, exists bool) {
	v := m._path
	if v == nil {
		return
	}
	return *v, true
}

// OldPath returns the old "path" field's value of the Page entity.
// If the Page object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PageMutation) OldPath(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPath is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPath requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPath: %w", err)
	}
	return oldValue.Path, nil
}

// ResetPath resets all changes to the "path" field.
func (m *PageMutation) ResetPath() {
	m._path = nil
}

// SetQuerystring sets the "querystring" field.
func (m *PageMutation) SetQuerystring(s string) {
	m.querystring = &s
}

// Querystring returns the value of the "querystring" field in the mutation.
func (m *PageMutation) Querystring() (r string, exists bool) {
	v := m.querystring
	if v == nil {
		return
	}
	return *v, true
}

// OldQuerystring returns the old "querystring" field's value of the Page entity.
// If the Page object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PageMutation) OldQuerystring(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldQuerystring is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldQuerystring requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldQuerystring: %w", err)
	}
	return oldValue.Querystring, nil
}

// ResetQuerystring resets all changes to the "querystring" field.
func (m *PageMutation) ResetQuerystring() {
	m.querystring = nil
}

// SetURL sets the "url" field.
func (m *PageMutation) SetURL(s string) {
	m.url = &s
}

// URL returns the value of the "url" field in the mutation.
func (m *PageMutation) URL() (r string, exists bool) {
	v := m.url
	if v == nil {
		return
	}
	return *v, true
}

// OldURL returns the old "url" field's value of the Page entity.
// If the Page object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PageMutation) OldURL(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldURL is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldURL requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldURL: %w", err)
	}
	return oldValue.URL, nil
}

// ResetURL resets all changes to the "url" field.
func (m *PageMutation) ResetURL() {
	m.url = nil
}

// SetCountReferred sets the "count_referred" field.
func (m *PageMutation) SetCountReferred(i int64) {
	m.count_referred = &i
	m.addcount_referred = nil
}

// CountReferred returns the value of the "count_referred" field in the mutation.
func (m *PageMutation) CountReferred() (r int64, exists bool) {
	v := m.count_referred
	if v == nil {
		return
	}
	return *v, true
}

// OldCountReferred returns the old "count_referred" field's value of the Page entity.
// If the Page object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PageMutation) OldCountReferred(ctx context.Context) (v int64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCountReferred is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCountReferred requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCountReferred: %w", err)
	}
	return oldValue.CountReferred, nil
}

// AddCountReferred adds i to the "count_referred" field.
func (m *PageMutation) AddCountReferred(i int64) {
	if m.addcount_referred != nil {
		*m.addcount_referred += i
	} else {
		m.addcount_referred = &i
	}
}

// AddedCountReferred returns the value that was added to the "count_referred" field in this mutation.
func (m *PageMutation) AddedCountReferred() (r int64, exists bool) {
	v := m.addcount_referred
	if v == nil {
		return
	}
	return *v, true
}

// ResetCountReferred resets all changes to the "count_referred" field.
func (m *PageMutation) ResetCountReferred() {
	m.count_referred = nil
	m.addcount_referred = nil
}

// SetStatus sets the "status" field.
func (m *PageMutation) SetStatus(pa page.Status) {
	m.status = &pa
}

// Status returns the value of the "status" field in the mutation.
func (m *PageMutation) Status() (r page.Status, exists bool) {
	v := m.status
	if v == nil {
		return
	}
	return *v, true
}

// OldStatus returns the old "status" field's value of the Page entity.
// If the Page object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PageMutation) OldStatus(ctx context.Context) (v page.Status, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldStatus is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldStatus requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStatus: %w", err)
	}
	return oldValue.Status, nil
}

// ResetStatus resets all changes to the "status" field.
func (m *PageMutation) ResetStatus() {
	m.status = nil
}

// SetCreatedAt sets the "created_at" field.
func (m *PageMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *PageMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the Page entity.
// If the Page object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PageMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *PageMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetCreatedBy sets the "created_by" field.
func (m *PageMutation) SetCreatedBy(s string) {
	m.created_by = &s
}

// CreatedBy returns the value of the "created_by" field in the mutation.
func (m *PageMutation) CreatedBy() (r string, exists bool) {
	v := m.created_by
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedBy returns the old "created_by" field's value of the Page entity.
// If the Page object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PageMutation) OldCreatedBy(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedBy is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedBy requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedBy: %w", err)
	}
	return oldValue.CreatedBy, nil
}

// ResetCreatedBy resets all changes to the "created_by" field.
func (m *PageMutation) ResetCreatedBy() {
	m.created_by = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *PageMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *PageMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the Page entity.
// If the Page object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PageMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *PageMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// SetUpdatedBy sets the "updated_by" field.
func (m *PageMutation) SetUpdatedBy(s string) {
	m.updated_by = &s
}

// UpdatedBy returns the value of the "updated_by" field in the mutation.
func (m *PageMutation) UpdatedBy() (r string, exists bool) {
	v := m.updated_by
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedBy returns the old "updated_by" field's value of the Page entity.
// If the Page object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PageMutation) OldUpdatedBy(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedBy is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedBy requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedBy: %w", err)
	}
	return oldValue.UpdatedBy, nil
}

// ResetUpdatedBy resets all changes to the "updated_by" field.
func (m *PageMutation) ResetUpdatedBy() {
	m.updated_by = nil
}

// SetTitle sets the "title" field.
func (m *PageMutation) SetTitle(s string) {
	m.title = &s
}

// Title returns the value of the "title" field in the mutation.
func (m *PageMutation) Title() (r string, exists bool) {
	v := m.title
	if v == nil {
		return
	}
	return *v, true
}

// OldTitle returns the old "title" field's value of the Page entity.
// If the Page object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PageMutation) OldTitle(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTitle is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTitle requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTitle: %w", err)
	}
	return oldValue.Title, nil
}

// ResetTitle resets all changes to the "title" field.
func (m *PageMutation) ResetTitle() {
	m.title = nil
}

// SetDescription sets the "description" field.
func (m *PageMutation) SetDescription(s string) {
	m.description = &s
}

// Description returns the value of the "description" field in the mutation.
func (m *PageMutation) Description() (r string, exists bool) {
	v := m.description
	if v == nil {
		return
	}
	return *v, true
}

// OldDescription returns the old "description" field's value of the Page entity.
// If the Page object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PageMutation) OldDescription(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDescription is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDescription requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDescription: %w", err)
	}
	return oldValue.Description, nil
}

// ResetDescription resets all changes to the "description" field.
func (m *PageMutation) ResetDescription() {
	m.description = nil
}

// SetKeywords sets the "keywords" field.
func (m *PageMutation) SetKeywords(s string) {
	m.keywords = &s
}

// Keywords returns the value of the "keywords" field in the mutation.
func (m *PageMutation) Keywords() (r string, exists bool) {
	v := m.keywords
	if v == nil {
		return
	}
	return *v, true
}

// OldKeywords returns the old "keywords" field's value of the Page entity.
// If the Page object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PageMutation) OldKeywords(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldKeywords is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldKeywords requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldKeywords: %w", err)
	}
	return oldValue.Keywords, nil
}

// ResetKeywords resets all changes to the "keywords" field.
func (m *PageMutation) ResetKeywords() {
	m.keywords = nil
}

// SetContentLanguage sets the "content_language" field.
func (m *PageMutation) SetContentLanguage(s string) {
	m.content_language = &s
}

// ContentLanguage returns the value of the "content_language" field in the mutation.
func (m *PageMutation) ContentLanguage() (r string, exists bool) {
	v := m.content_language
	if v == nil {
		return
	}
	return *v, true
}

// OldContentLanguage returns the old "content_language" field's value of the Page entity.
// If the Page object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PageMutation) OldContentLanguage(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldContentLanguage is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldContentLanguage requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldContentLanguage: %w", err)
	}
	return oldValue.ContentLanguage, nil
}

// ResetContentLanguage resets all changes to the "content_language" field.
func (m *PageMutation) ResetContentLanguage() {
	m.content_language = nil
}

// SetTwitterCard sets the "twitter_card" field.
func (m *PageMutation) SetTwitterCard(s string) {
	m.twitter_card = &s
}

// TwitterCard returns the value of the "twitter_card" field in the mutation.
func (m *PageMutation) TwitterCard() (r string, exists bool) {
	v := m.twitter_card
	if v == nil {
		return
	}
	return *v, true
}

// OldTwitterCard returns the old "twitter_card" field's value of the Page entity.
// If the Page object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PageMutation) OldTwitterCard(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTwitterCard is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTwitterCard requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTwitterCard: %w", err)
	}
	return oldValue.TwitterCard, nil
}

// ResetTwitterCard resets all changes to the "twitter_card" field.
func (m *PageMutation) ResetTwitterCard() {
	m.twitter_card = nil
}

// SetTwitterURL sets the "twitter_url" field.
func (m *PageMutation) SetTwitterURL(s string) {
	m.twitter_url = &s
}

// TwitterURL returns the value of the "twitter_url" field in the mutation.
func (m *PageMutation) TwitterURL() (r string, exists bool) {
	v := m.twitter_url
	if v == nil {
		return
	}
	return *v, true
}

// OldTwitterURL returns the old "twitter_url" field's value of the Page entity.
// If the Page object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PageMutation) OldTwitterURL(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTwitterURL is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTwitterURL requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTwitterURL: %w", err)
	}
	return oldValue.TwitterURL, nil
}

// ResetTwitterURL resets all changes to the "twitter_url" field.
func (m *PageMutation) ResetTwitterURL() {
	m.twitter_url = nil
}

// SetTwitterTitle sets the "twitter_title" field.
func (m *PageMutation) SetTwitterTitle(s string) {
	m.twitter_title = &s
}

// TwitterTitle returns the value of the "twitter_title" field in the mutation.
func (m *PageMutation) TwitterTitle() (r string, exists bool) {
	v := m.twitter_title
	if v == nil {
		return
	}
	return *v, true
}

// OldTwitterTitle returns the old "twitter_title" field's value of the Page entity.
// If the Page object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PageMutation) OldTwitterTitle(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTwitterTitle is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTwitterTitle requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTwitterTitle: %w", err)
	}
	return oldValue.TwitterTitle, nil
}

// ResetTwitterTitle resets all changes to the "twitter_title" field.
func (m *PageMutation) ResetTwitterTitle() {
	m.twitter_title = nil
}

// SetTwitterDescription sets the "twitter_description" field.
func (m *PageMutation) SetTwitterDescription(s string) {
	m.twitter_description = &s
}

// TwitterDescription returns the value of the "twitter_description" field in the mutation.
func (m *PageMutation) TwitterDescription() (r string, exists bool) {
	v := m.twitter_description
	if v == nil {
		return
	}
	return *v, true
}

// OldTwitterDescription returns the old "twitter_description" field's value of the Page entity.
// If the Page object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PageMutation) OldTwitterDescription(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTwitterDescription is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTwitterDescription requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTwitterDescription: %w", err)
	}
	return oldValue.TwitterDescription, nil
}

// ResetTwitterDescription resets all changes to the "twitter_description" field.
func (m *PageMutation) ResetTwitterDescription() {
	m.twitter_description = nil
}

// SetTwitterImage sets the "twitter_image" field.
func (m *PageMutation) SetTwitterImage(s string) {
	m.twitter_image = &s
}

// TwitterImage returns the value of the "twitter_image" field in the mutation.
func (m *PageMutation) TwitterImage() (r string, exists bool) {
	v := m.twitter_image
	if v == nil {
		return
	}
	return *v, true
}

// OldTwitterImage returns the old "twitter_image" field's value of the Page entity.
// If the Page object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PageMutation) OldTwitterImage(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTwitterImage is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTwitterImage requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTwitterImage: %w", err)
	}
	return oldValue.TwitterImage, nil
}

// ResetTwitterImage resets all changes to the "twitter_image" field.
func (m *PageMutation) ResetTwitterImage() {
	m.twitter_image = nil
}

// SetOgSiteName sets the "og_site_name" field.
func (m *PageMutation) SetOgSiteName(s string) {
	m.og_site_name = &s
}

// OgSiteName returns the value of the "og_site_name" field in the mutation.
func (m *PageMutation) OgSiteName() (r string, exists bool) {
	v := m.og_site_name
	if v == nil {
		return
	}
	return *v, true
}

// OldOgSiteName returns the old "og_site_name" field's value of the Page entity.
// If the Page object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PageMutation) OldOgSiteName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldOgSiteName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldOgSiteName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldOgSiteName: %w", err)
	}
	return oldValue.OgSiteName, nil
}

// ResetOgSiteName resets all changes to the "og_site_name" field.
func (m *PageMutation) ResetOgSiteName() {
	m.og_site_name = nil
}

// SetOgLocale sets the "og_locale" field.
func (m *PageMutation) SetOgLocale(s string) {
	m.og_locale = &s
}

// OgLocale returns the value of the "og_locale" field in the mutation.
func (m *PageMutation) OgLocale() (r string, exists bool) {
	v := m.og_locale
	if v == nil {
		return
	}
	return *v, true
}

// OldOgLocale returns the old "og_locale" field's value of the Page entity.
// If the Page object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PageMutation) OldOgLocale(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldOgLocale is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldOgLocale requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldOgLocale: %w", err)
	}
	return oldValue.OgLocale, nil
}

// ResetOgLocale resets all changes to the "og_locale" field.
func (m *PageMutation) ResetOgLocale() {
	m.og_locale = nil
}

// SetOgTitle sets the "og_title" field.
func (m *PageMutation) SetOgTitle(s string) {
	m.og_title = &s
}

// OgTitle returns the value of the "og_title" field in the mutation.
func (m *PageMutation) OgTitle() (r string, exists bool) {
	v := m.og_title
	if v == nil {
		return
	}
	return *v, true
}

// OldOgTitle returns the old "og_title" field's value of the Page entity.
// If the Page object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PageMutation) OldOgTitle(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldOgTitle is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldOgTitle requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldOgTitle: %w", err)
	}
	return oldValue.OgTitle, nil
}

// ResetOgTitle resets all changes to the "og_title" field.
func (m *PageMutation) ResetOgTitle() {
	m.og_title = nil
}

// SetOgDescription sets the "og_description" field.
func (m *PageMutation) SetOgDescription(s string) {
	m.og_description = &s
}

// OgDescription returns the value of the "og_description" field in the mutation.
func (m *PageMutation) OgDescription() (r string, exists bool) {
	v := m.og_description
	if v == nil {
		return
	}
	return *v, true
}

// OldOgDescription returns the old "og_description" field's value of the Page entity.
// If the Page object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PageMutation) OldOgDescription(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldOgDescription is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldOgDescription requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldOgDescription: %w", err)
	}
	return oldValue.OgDescription, nil
}

// ResetOgDescription resets all changes to the "og_description" field.
func (m *PageMutation) ResetOgDescription() {
	m.og_description = nil
}

// SetOgType sets the "og_type" field.
func (m *PageMutation) SetOgType(s string) {
	m.og_type = &s
}

// OgType returns the value of the "og_type" field in the mutation.
func (m *PageMutation) OgType() (r string, exists bool) {
	v := m.og_type
	if v == nil {
		return
	}
	return *v, true
}

// OldOgType returns the old "og_type" field's value of the Page entity.
// If the Page object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PageMutation) OldOgType(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldOgType is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldOgType requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldOgType: %w", err)
	}
	return oldValue.OgType, nil
}

// ResetOgType resets all changes to the "og_type" field.
func (m *PageMutation) ResetOgType() {
	m.og_type = nil
}

// SetOgURL sets the "og_url" field.
func (m *PageMutation) SetOgURL(s string) {
	m.og_url = &s
}

// OgURL returns the value of the "og_url" field in the mutation.
func (m *PageMutation) OgURL() (r string, exists bool) {
	v := m.og_url
	if v == nil {
		return
	}
	return *v, true
}

// OldOgURL returns the old "og_url" field's value of the Page entity.
// If the Page object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PageMutation) OldOgURL(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldOgURL is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldOgURL requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldOgURL: %w", err)
	}
	return oldValue.OgURL, nil
}

// ResetOgURL resets all changes to the "og_url" field.
func (m *PageMutation) ResetOgURL() {
	m.og_url = nil
}

// SetOgImage sets the "og_image" field.
func (m *PageMutation) SetOgImage(s string) {
	m.og_image = &s
}

// OgImage returns the value of the "og_image" field in the mutation.
func (m *PageMutation) OgImage() (r string, exists bool) {
	v := m.og_image
	if v == nil {
		return
	}
	return *v, true
}

// OldOgImage returns the old "og_image" field's value of the Page entity.
// If the Page object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PageMutation) OldOgImage(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldOgImage is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldOgImage requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldOgImage: %w", err)
	}
	return oldValue.OgImage, nil
}

// ResetOgImage resets all changes to the "og_image" field.
func (m *PageMutation) ResetOgImage() {
	m.og_image = nil
}

// SetOgImageType sets the "og_image_type" field.
func (m *PageMutation) SetOgImageType(s string) {
	m.og_image_type = &s
}

// OgImageType returns the value of the "og_image_type" field in the mutation.
func (m *PageMutation) OgImageType() (r string, exists bool) {
	v := m.og_image_type
	if v == nil {
		return
	}
	return *v, true
}

// OldOgImageType returns the old "og_image_type" field's value of the Page entity.
// If the Page object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PageMutation) OldOgImageType(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldOgImageType is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldOgImageType requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldOgImageType: %w", err)
	}
	return oldValue.OgImageType, nil
}

// ResetOgImageType resets all changes to the "og_image_type" field.
func (m *PageMutation) ResetOgImageType() {
	m.og_image_type = nil
}

// SetOgImageURL sets the "og_image_url" field.
func (m *PageMutation) SetOgImageURL(s string) {
	m.og_image_url = &s
}

// OgImageURL returns the value of the "og_image_url" field in the mutation.
func (m *PageMutation) OgImageURL() (r string, exists bool) {
	v := m.og_image_url
	if v == nil {
		return
	}
	return *v, true
}

// OldOgImageURL returns the old "og_image_url" field's value of the Page entity.
// If the Page object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PageMutation) OldOgImageURL(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldOgImageURL is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldOgImageURL requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldOgImageURL: %w", err)
	}
	return oldValue.OgImageURL, nil
}

// ResetOgImageURL resets all changes to the "og_image_url" field.
func (m *PageMutation) ResetOgImageURL() {
	m.og_image_url = nil
}

// SetOgImageSecureURL sets the "og_image_secure_url" field.
func (m *PageMutation) SetOgImageSecureURL(s string) {
	m.og_image_secure_url = &s
}

// OgImageSecureURL returns the value of the "og_image_secure_url" field in the mutation.
func (m *PageMutation) OgImageSecureURL() (r string, exists bool) {
	v := m.og_image_secure_url
	if v == nil {
		return
	}
	return *v, true
}

// OldOgImageSecureURL returns the old "og_image_secure_url" field's value of the Page entity.
// If the Page object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PageMutation) OldOgImageSecureURL(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldOgImageSecureURL is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldOgImageSecureURL requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldOgImageSecureURL: %w", err)
	}
	return oldValue.OgImageSecureURL, nil
}

// ResetOgImageSecureURL resets all changes to the "og_image_secure_url" field.
func (m *PageMutation) ResetOgImageSecureURL() {
	m.og_image_secure_url = nil
}

// SetOgImageWidth sets the "og_image_width" field.
func (m *PageMutation) SetOgImageWidth(s string) {
	m.og_image_width = &s
}

// OgImageWidth returns the value of the "og_image_width" field in the mutation.
func (m *PageMutation) OgImageWidth() (r string, exists bool) {
	v := m.og_image_width
	if v == nil {
		return
	}
	return *v, true
}

// OldOgImageWidth returns the old "og_image_width" field's value of the Page entity.
// If the Page object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PageMutation) OldOgImageWidth(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldOgImageWidth is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldOgImageWidth requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldOgImageWidth: %w", err)
	}
	return oldValue.OgImageWidth, nil
}

// ResetOgImageWidth resets all changes to the "og_image_width" field.
func (m *PageMutation) ResetOgImageWidth() {
	m.og_image_width = nil
}

// SetOgImageHeight sets the "og_image_height" field.
func (m *PageMutation) SetOgImageHeight(s string) {
	m.og_image_height = &s
}

// OgImageHeight returns the value of the "og_image_height" field in the mutation.
func (m *PageMutation) OgImageHeight() (r string, exists bool) {
	v := m.og_image_height
	if v == nil {
		return
	}
	return *v, true
}

// OldOgImageHeight returns the old "og_image_height" field's value of the Page entity.
// If the Page object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PageMutation) OldOgImageHeight(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldOgImageHeight is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldOgImageHeight requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldOgImageHeight: %w", err)
	}
	return oldValue.OgImageHeight, nil
}

// ResetOgImageHeight resets all changes to the "og_image_height" field.
func (m *PageMutation) ResetOgImageHeight() {
	m.og_image_height = nil
}

// SetOgVideo sets the "og_video" field.
func (m *PageMutation) SetOgVideo(s string) {
	m.og_video = &s
}

// OgVideo returns the value of the "og_video" field in the mutation.
func (m *PageMutation) OgVideo() (r string, exists bool) {
	v := m.og_video
	if v == nil {
		return
	}
	return *v, true
}

// OldOgVideo returns the old "og_video" field's value of the Page entity.
// If the Page object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PageMutation) OldOgVideo(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldOgVideo is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldOgVideo requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldOgVideo: %w", err)
	}
	return oldValue.OgVideo, nil
}

// ResetOgVideo resets all changes to the "og_video" field.
func (m *PageMutation) ResetOgVideo() {
	m.og_video = nil
}

// SetOgVideoType sets the "og_video_type" field.
func (m *PageMutation) SetOgVideoType(s string) {
	m.og_video_type = &s
}

// OgVideoType returns the value of the "og_video_type" field in the mutation.
func (m *PageMutation) OgVideoType() (r string, exists bool) {
	v := m.og_video_type
	if v == nil {
		return
	}
	return *v, true
}

// OldOgVideoType returns the old "og_video_type" field's value of the Page entity.
// If the Page object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PageMutation) OldOgVideoType(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldOgVideoType is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldOgVideoType requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldOgVideoType: %w", err)
	}
	return oldValue.OgVideoType, nil
}

// ResetOgVideoType resets all changes to the "og_video_type" field.
func (m *PageMutation) ResetOgVideoType() {
	m.og_video_type = nil
}

// SetOgVideoURL sets the "og_video_url" field.
func (m *PageMutation) SetOgVideoURL(s string) {
	m.og_video_url = &s
}

// OgVideoURL returns the value of the "og_video_url" field in the mutation.
func (m *PageMutation) OgVideoURL() (r string, exists bool) {
	v := m.og_video_url
	if v == nil {
		return
	}
	return *v, true
}

// OldOgVideoURL returns the old "og_video_url" field's value of the Page entity.
// If the Page object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PageMutation) OldOgVideoURL(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldOgVideoURL is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldOgVideoURL requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldOgVideoURL: %w", err)
	}
	return oldValue.OgVideoURL, nil
}

// ResetOgVideoURL resets all changes to the "og_video_url" field.
func (m *PageMutation) ResetOgVideoURL() {
	m.og_video_url = nil
}

// SetOgVideoSecureURL sets the "og_video_secure_url" field.
func (m *PageMutation) SetOgVideoSecureURL(s string) {
	m.og_video_secure_url = &s
}

// OgVideoSecureURL returns the value of the "og_video_secure_url" field in the mutation.
func (m *PageMutation) OgVideoSecureURL() (r string, exists bool) {
	v := m.og_video_secure_url
	if v == nil {
		return
	}
	return *v, true
}

// OldOgVideoSecureURL returns the old "og_video_secure_url" field's value of the Page entity.
// If the Page object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PageMutation) OldOgVideoSecureURL(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldOgVideoSecureURL is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldOgVideoSecureURL requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldOgVideoSecureURL: %w", err)
	}
	return oldValue.OgVideoSecureURL, nil
}

// ResetOgVideoSecureURL resets all changes to the "og_video_secure_url" field.
func (m *PageMutation) ResetOgVideoSecureURL() {
	m.og_video_secure_url = nil
}

// SetOgVideoWidth sets the "og_video_width" field.
func (m *PageMutation) SetOgVideoWidth(s string) {
	m.og_video_width = &s
}

// OgVideoWidth returns the value of the "og_video_width" field in the mutation.
func (m *PageMutation) OgVideoWidth() (r string, exists bool) {
	v := m.og_video_width
	if v == nil {
		return
	}
	return *v, true
}

// OldOgVideoWidth returns the old "og_video_width" field's value of the Page entity.
// If the Page object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PageMutation) OldOgVideoWidth(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldOgVideoWidth is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldOgVideoWidth requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldOgVideoWidth: %w", err)
	}
	return oldValue.OgVideoWidth, nil
}

// ResetOgVideoWidth resets all changes to the "og_video_width" field.
func (m *PageMutation) ResetOgVideoWidth() {
	m.og_video_width = nil
}

// SetOgVideoHeight sets the "og_video_height" field.
func (m *PageMutation) SetOgVideoHeight(s string) {
	m.og_video_height = &s
}

// OgVideoHeight returns the value of the "og_video_height" field in the mutation.
func (m *PageMutation) OgVideoHeight() (r string, exists bool) {
	v := m.og_video_height
	if v == nil {
		return
	}
	return *v, true
}

// OldOgVideoHeight returns the old "og_video_height" field's value of the Page entity.
// If the Page object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PageMutation) OldOgVideoHeight(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldOgVideoHeight is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldOgVideoHeight requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldOgVideoHeight: %w", err)
	}
	return oldValue.OgVideoHeight, nil
}

// ResetOgVideoHeight resets all changes to the "og_video_height" field.
func (m *PageMutation) ResetOgVideoHeight() {
	m.og_video_height = nil
}

// AddPageSourceIDs adds the "page_source" edge to the PageSource entity by ids.
func (m *PageMutation) AddPageSourceIDs(ids ...string) {
	if m.page_source == nil {
		m.page_source = make(map[string]struct{})
	}
	for i := range ids {
		m.page_source[ids[i]] = struct{}{}
	}
}

// ClearPageSource clears the "page_source" edge to the PageSource entity.
func (m *PageMutation) ClearPageSource() {
	m.clearedpage_source = true
}

// PageSourceCleared reports if the "page_source" edge to the PageSource entity was cleared.
func (m *PageMutation) PageSourceCleared() bool {
	return m.clearedpage_source
}

// RemovePageSourceIDs removes the "page_source" edge to the PageSource entity by IDs.
func (m *PageMutation) RemovePageSourceIDs(ids ...string) {
	if m.removedpage_source == nil {
		m.removedpage_source = make(map[string]struct{})
	}
	for i := range ids {
		delete(m.page_source, ids[i])
		m.removedpage_source[ids[i]] = struct{}{}
	}
}

// RemovedPageSource returns the removed IDs of the "page_source" edge to the PageSource entity.
func (m *PageMutation) RemovedPageSourceIDs() (ids []string) {
	for id := range m.removedpage_source {
		ids = append(ids, id)
	}
	return
}

// PageSourceIDs returns the "page_source" edge IDs in the mutation.
func (m *PageMutation) PageSourceIDs() (ids []string) {
	for id := range m.page_source {
		ids = append(ids, id)
	}
	return
}

// ResetPageSource resets all changes to the "page_source" edge.
func (m *PageMutation) ResetPageSource() {
	m.page_source = nil
	m.clearedpage_source = false
	m.removedpage_source = nil
}

// Where appends a list predicates to the PageMutation builder.
func (m *PageMutation) Where(ps ...predicate.Page) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *PageMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Page).
func (m *PageMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *PageMutation) Fields() []string {
	fields := make([]string, 0, 42)
	if m.referred_id != nil {
		fields = append(fields, page.FieldReferredID)
	}
	if m.crawling_version != nil {
		fields = append(fields, page.FieldCrawlingVersion)
	}
	if m.domain != nil {
		fields = append(fields, page.FieldDomain)
	}
	if m.port != nil {
		fields = append(fields, page.FieldPort)
	}
	if m.is_https != nil {
		fields = append(fields, page.FieldIsHTTPS)
	}
	if m.indexed_url != nil {
		fields = append(fields, page.FieldIndexedURL)
	}
	if m._path != nil {
		fields = append(fields, page.FieldPath)
	}
	if m.querystring != nil {
		fields = append(fields, page.FieldQuerystring)
	}
	if m.url != nil {
		fields = append(fields, page.FieldURL)
	}
	if m.count_referred != nil {
		fields = append(fields, page.FieldCountReferred)
	}
	if m.status != nil {
		fields = append(fields, page.FieldStatus)
	}
	if m.created_at != nil {
		fields = append(fields, page.FieldCreatedAt)
	}
	if m.created_by != nil {
		fields = append(fields, page.FieldCreatedBy)
	}
	if m.updated_at != nil {
		fields = append(fields, page.FieldUpdatedAt)
	}
	if m.updated_by != nil {
		fields = append(fields, page.FieldUpdatedBy)
	}
	if m.title != nil {
		fields = append(fields, page.FieldTitle)
	}
	if m.description != nil {
		fields = append(fields, page.FieldDescription)
	}
	if m.keywords != nil {
		fields = append(fields, page.FieldKeywords)
	}
	if m.content_language != nil {
		fields = append(fields, page.FieldContentLanguage)
	}
	if m.twitter_card != nil {
		fields = append(fields, page.FieldTwitterCard)
	}
	if m.twitter_url != nil {
		fields = append(fields, page.FieldTwitterURL)
	}
	if m.twitter_title != nil {
		fields = append(fields, page.FieldTwitterTitle)
	}
	if m.twitter_description != nil {
		fields = append(fields, page.FieldTwitterDescription)
	}
	if m.twitter_image != nil {
		fields = append(fields, page.FieldTwitterImage)
	}
	if m.og_site_name != nil {
		fields = append(fields, page.FieldOgSiteName)
	}
	if m.og_locale != nil {
		fields = append(fields, page.FieldOgLocale)
	}
	if m.og_title != nil {
		fields = append(fields, page.FieldOgTitle)
	}
	if m.og_description != nil {
		fields = append(fields, page.FieldOgDescription)
	}
	if m.og_type != nil {
		fields = append(fields, page.FieldOgType)
	}
	if m.og_url != nil {
		fields = append(fields, page.FieldOgURL)
	}
	if m.og_image != nil {
		fields = append(fields, page.FieldOgImage)
	}
	if m.og_image_type != nil {
		fields = append(fields, page.FieldOgImageType)
	}
	if m.og_image_url != nil {
		fields = append(fields, page.FieldOgImageURL)
	}
	if m.og_image_secure_url != nil {
		fields = append(fields, page.FieldOgImageSecureURL)
	}
	if m.og_image_width != nil {
		fields = append(fields, page.FieldOgImageWidth)
	}
	if m.og_image_height != nil {
		fields = append(fields, page.FieldOgImageHeight)
	}
	if m.og_video != nil {
		fields = append(fields, page.FieldOgVideo)
	}
	if m.og_video_type != nil {
		fields = append(fields, page.FieldOgVideoType)
	}
	if m.og_video_url != nil {
		fields = append(fields, page.FieldOgVideoURL)
	}
	if m.og_video_secure_url != nil {
		fields = append(fields, page.FieldOgVideoSecureURL)
	}
	if m.og_video_width != nil {
		fields = append(fields, page.FieldOgVideoWidth)
	}
	if m.og_video_height != nil {
		fields = append(fields, page.FieldOgVideoHeight)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *PageMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case page.FieldReferredID:
		return m.ReferredID()
	case page.FieldCrawlingVersion:
		return m.CrawlingVersion()
	case page.FieldDomain:
		return m.Domain()
	case page.FieldPort:
		return m.Port()
	case page.FieldIsHTTPS:
		return m.IsHTTPS()
	case page.FieldIndexedURL:
		return m.IndexedURL()
	case page.FieldPath:
		return m.Path()
	case page.FieldQuerystring:
		return m.Querystring()
	case page.FieldURL:
		return m.URL()
	case page.FieldCountReferred:
		return m.CountReferred()
	case page.FieldStatus:
		return m.Status()
	case page.FieldCreatedAt:
		return m.CreatedAt()
	case page.FieldCreatedBy:
		return m.CreatedBy()
	case page.FieldUpdatedAt:
		return m.UpdatedAt()
	case page.FieldUpdatedBy:
		return m.UpdatedBy()
	case page.FieldTitle:
		return m.Title()
	case page.FieldDescription:
		return m.Description()
	case page.FieldKeywords:
		return m.Keywords()
	case page.FieldContentLanguage:
		return m.ContentLanguage()
	case page.FieldTwitterCard:
		return m.TwitterCard()
	case page.FieldTwitterURL:
		return m.TwitterURL()
	case page.FieldTwitterTitle:
		return m.TwitterTitle()
	case page.FieldTwitterDescription:
		return m.TwitterDescription()
	case page.FieldTwitterImage:
		return m.TwitterImage()
	case page.FieldOgSiteName:
		return m.OgSiteName()
	case page.FieldOgLocale:
		return m.OgLocale()
	case page.FieldOgTitle:
		return m.OgTitle()
	case page.FieldOgDescription:
		return m.OgDescription()
	case page.FieldOgType:
		return m.OgType()
	case page.FieldOgURL:
		return m.OgURL()
	case page.FieldOgImage:
		return m.OgImage()
	case page.FieldOgImageType:
		return m.OgImageType()
	case page.FieldOgImageURL:
		return m.OgImageURL()
	case page.FieldOgImageSecureURL:
		return m.OgImageSecureURL()
	case page.FieldOgImageWidth:
		return m.OgImageWidth()
	case page.FieldOgImageHeight:
		return m.OgImageHeight()
	case page.FieldOgVideo:
		return m.OgVideo()
	case page.FieldOgVideoType:
		return m.OgVideoType()
	case page.FieldOgVideoURL:
		return m.OgVideoURL()
	case page.FieldOgVideoSecureURL:
		return m.OgVideoSecureURL()
	case page.FieldOgVideoWidth:
		return m.OgVideoWidth()
	case page.FieldOgVideoHeight:
		return m.OgVideoHeight()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *PageMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case page.FieldReferredID:
		return m.OldReferredID(ctx)
	case page.FieldCrawlingVersion:
		return m.OldCrawlingVersion(ctx)
	case page.FieldDomain:
		return m.OldDomain(ctx)
	case page.FieldPort:
		return m.OldPort(ctx)
	case page.FieldIsHTTPS:
		return m.OldIsHTTPS(ctx)
	case page.FieldIndexedURL:
		return m.OldIndexedURL(ctx)
	case page.FieldPath:
		return m.OldPath(ctx)
	case page.FieldQuerystring:
		return m.OldQuerystring(ctx)
	case page.FieldURL:
		return m.OldURL(ctx)
	case page.FieldCountReferred:
		return m.OldCountReferred(ctx)
	case page.FieldStatus:
		return m.OldStatus(ctx)
	case page.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case page.FieldCreatedBy:
		return m.OldCreatedBy(ctx)
	case page.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case page.FieldUpdatedBy:
		return m.OldUpdatedBy(ctx)
	case page.FieldTitle:
		return m.OldTitle(ctx)
	case page.FieldDescription:
		return m.OldDescription(ctx)
	case page.FieldKeywords:
		return m.OldKeywords(ctx)
	case page.FieldContentLanguage:
		return m.OldContentLanguage(ctx)
	case page.FieldTwitterCard:
		return m.OldTwitterCard(ctx)
	case page.FieldTwitterURL:
		return m.OldTwitterURL(ctx)
	case page.FieldTwitterTitle:
		return m.OldTwitterTitle(ctx)
	case page.FieldTwitterDescription:
		return m.OldTwitterDescription(ctx)
	case page.FieldTwitterImage:
		return m.OldTwitterImage(ctx)
	case page.FieldOgSiteName:
		return m.OldOgSiteName(ctx)
	case page.FieldOgLocale:
		return m.OldOgLocale(ctx)
	case page.FieldOgTitle:
		return m.OldOgTitle(ctx)
	case page.FieldOgDescription:
		return m.OldOgDescription(ctx)
	case page.FieldOgType:
		return m.OldOgType(ctx)
	case page.FieldOgURL:
		return m.OldOgURL(ctx)
	case page.FieldOgImage:
		return m.OldOgImage(ctx)
	case page.FieldOgImageType:
		return m.OldOgImageType(ctx)
	case page.FieldOgImageURL:
		return m.OldOgImageURL(ctx)
	case page.FieldOgImageSecureURL:
		return m.OldOgImageSecureURL(ctx)
	case page.FieldOgImageWidth:
		return m.OldOgImageWidth(ctx)
	case page.FieldOgImageHeight:
		return m.OldOgImageHeight(ctx)
	case page.FieldOgVideo:
		return m.OldOgVideo(ctx)
	case page.FieldOgVideoType:
		return m.OldOgVideoType(ctx)
	case page.FieldOgVideoURL:
		return m.OldOgVideoURL(ctx)
	case page.FieldOgVideoSecureURL:
		return m.OldOgVideoSecureURL(ctx)
	case page.FieldOgVideoWidth:
		return m.OldOgVideoWidth(ctx)
	case page.FieldOgVideoHeight:
		return m.OldOgVideoHeight(ctx)
	}
	return nil, fmt.Errorf("unknown Page field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *PageMutation) SetField(name string, value ent.Value) error {
	switch name {
	case page.FieldReferredID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetReferredID(v)
		return nil
	case page.FieldCrawlingVersion:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCrawlingVersion(v)
		return nil
	case page.FieldDomain:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDomain(v)
		return nil
	case page.FieldPort:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPort(v)
		return nil
	case page.FieldIsHTTPS:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIsHTTPS(v)
		return nil
	case page.FieldIndexedURL:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIndexedURL(v)
		return nil
	case page.FieldPath:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPath(v)
		return nil
	case page.FieldQuerystring:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetQuerystring(v)
		return nil
	case page.FieldURL:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetURL(v)
		return nil
	case page.FieldCountReferred:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCountReferred(v)
		return nil
	case page.FieldStatus:
		v, ok := value.(page.Status)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStatus(v)
		return nil
	case page.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case page.FieldCreatedBy:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedBy(v)
		return nil
	case page.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case page.FieldUpdatedBy:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedBy(v)
		return nil
	case page.FieldTitle:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTitle(v)
		return nil
	case page.FieldDescription:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDescription(v)
		return nil
	case page.FieldKeywords:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetKeywords(v)
		return nil
	case page.FieldContentLanguage:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetContentLanguage(v)
		return nil
	case page.FieldTwitterCard:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTwitterCard(v)
		return nil
	case page.FieldTwitterURL:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTwitterURL(v)
		return nil
	case page.FieldTwitterTitle:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTwitterTitle(v)
		return nil
	case page.FieldTwitterDescription:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTwitterDescription(v)
		return nil
	case page.FieldTwitterImage:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTwitterImage(v)
		return nil
	case page.FieldOgSiteName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetOgSiteName(v)
		return nil
	case page.FieldOgLocale:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetOgLocale(v)
		return nil
	case page.FieldOgTitle:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetOgTitle(v)
		return nil
	case page.FieldOgDescription:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetOgDescription(v)
		return nil
	case page.FieldOgType:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetOgType(v)
		return nil
	case page.FieldOgURL:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetOgURL(v)
		return nil
	case page.FieldOgImage:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetOgImage(v)
		return nil
	case page.FieldOgImageType:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetOgImageType(v)
		return nil
	case page.FieldOgImageURL:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetOgImageURL(v)
		return nil
	case page.FieldOgImageSecureURL:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetOgImageSecureURL(v)
		return nil
	case page.FieldOgImageWidth:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetOgImageWidth(v)
		return nil
	case page.FieldOgImageHeight:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetOgImageHeight(v)
		return nil
	case page.FieldOgVideo:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetOgVideo(v)
		return nil
	case page.FieldOgVideoType:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetOgVideoType(v)
		return nil
	case page.FieldOgVideoURL:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetOgVideoURL(v)
		return nil
	case page.FieldOgVideoSecureURL:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetOgVideoSecureURL(v)
		return nil
	case page.FieldOgVideoWidth:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetOgVideoWidth(v)
		return nil
	case page.FieldOgVideoHeight:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetOgVideoHeight(v)
		return nil
	}
	return fmt.Errorf("unknown Page field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *PageMutation) AddedFields() []string {
	var fields []string
	if m.addcount_referred != nil {
		fields = append(fields, page.FieldCountReferred)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *PageMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case page.FieldCountReferred:
		return m.AddedCountReferred()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *PageMutation) AddField(name string, value ent.Value) error {
	switch name {
	case page.FieldCountReferred:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddCountReferred(v)
		return nil
	}
	return fmt.Errorf("unknown Page numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *PageMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *PageMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *PageMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Page nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *PageMutation) ResetField(name string) error {
	switch name {
	case page.FieldReferredID:
		m.ResetReferredID()
		return nil
	case page.FieldCrawlingVersion:
		m.ResetCrawlingVersion()
		return nil
	case page.FieldDomain:
		m.ResetDomain()
		return nil
	case page.FieldPort:
		m.ResetPort()
		return nil
	case page.FieldIsHTTPS:
		m.ResetIsHTTPS()
		return nil
	case page.FieldIndexedURL:
		m.ResetIndexedURL()
		return nil
	case page.FieldPath:
		m.ResetPath()
		return nil
	case page.FieldQuerystring:
		m.ResetQuerystring()
		return nil
	case page.FieldURL:
		m.ResetURL()
		return nil
	case page.FieldCountReferred:
		m.ResetCountReferred()
		return nil
	case page.FieldStatus:
		m.ResetStatus()
		return nil
	case page.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case page.FieldCreatedBy:
		m.ResetCreatedBy()
		return nil
	case page.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case page.FieldUpdatedBy:
		m.ResetUpdatedBy()
		return nil
	case page.FieldTitle:
		m.ResetTitle()
		return nil
	case page.FieldDescription:
		m.ResetDescription()
		return nil
	case page.FieldKeywords:
		m.ResetKeywords()
		return nil
	case page.FieldContentLanguage:
		m.ResetContentLanguage()
		return nil
	case page.FieldTwitterCard:
		m.ResetTwitterCard()
		return nil
	case page.FieldTwitterURL:
		m.ResetTwitterURL()
		return nil
	case page.FieldTwitterTitle:
		m.ResetTwitterTitle()
		return nil
	case page.FieldTwitterDescription:
		m.ResetTwitterDescription()
		return nil
	case page.FieldTwitterImage:
		m.ResetTwitterImage()
		return nil
	case page.FieldOgSiteName:
		m.ResetOgSiteName()
		return nil
	case page.FieldOgLocale:
		m.ResetOgLocale()
		return nil
	case page.FieldOgTitle:
		m.ResetOgTitle()
		return nil
	case page.FieldOgDescription:
		m.ResetOgDescription()
		return nil
	case page.FieldOgType:
		m.ResetOgType()
		return nil
	case page.FieldOgURL:
		m.ResetOgURL()
		return nil
	case page.FieldOgImage:
		m.ResetOgImage()
		return nil
	case page.FieldOgImageType:
		m.ResetOgImageType()
		return nil
	case page.FieldOgImageURL:
		m.ResetOgImageURL()
		return nil
	case page.FieldOgImageSecureURL:
		m.ResetOgImageSecureURL()
		return nil
	case page.FieldOgImageWidth:
		m.ResetOgImageWidth()
		return nil
	case page.FieldOgImageHeight:
		m.ResetOgImageHeight()
		return nil
	case page.FieldOgVideo:
		m.ResetOgVideo()
		return nil
	case page.FieldOgVideoType:
		m.ResetOgVideoType()
		return nil
	case page.FieldOgVideoURL:
		m.ResetOgVideoURL()
		return nil
	case page.FieldOgVideoSecureURL:
		m.ResetOgVideoSecureURL()
		return nil
	case page.FieldOgVideoWidth:
		m.ResetOgVideoWidth()
		return nil
	case page.FieldOgVideoHeight:
		m.ResetOgVideoHeight()
		return nil
	}
	return fmt.Errorf("unknown Page field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *PageMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.page_source != nil {
		edges = append(edges, page.EdgePageSource)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *PageMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case page.EdgePageSource:
		ids := make([]ent.Value, 0, len(m.page_source))
		for id := range m.page_source {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *PageMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removedpage_source != nil {
		edges = append(edges, page.EdgePageSource)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *PageMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case page.EdgePageSource:
		ids := make([]ent.Value, 0, len(m.removedpage_source))
		for id := range m.removedpage_source {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *PageMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedpage_source {
		edges = append(edges, page.EdgePageSource)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *PageMutation) EdgeCleared(name string) bool {
	switch name {
	case page.EdgePageSource:
		return m.clearedpage_source
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *PageMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Page unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *PageMutation) ResetEdge(name string) error {
	switch name {
	case page.EdgePageSource:
		m.ResetPageSource()
		return nil
	}
	return fmt.Errorf("unknown Page edge %s", name)
}

// PageLinkMutation represents an operation that mutates the PageLink nodes in the graph.
type PageLinkMutation struct {
	config
	op            Op
	typ           string
	id            *int64
	source_id     *int64
	addsource_id  *int64
	target_id     *int64
	addtarget_id  *int64
	created_at    *time.Time
	created_by    *string
	updated_at    *time.Time
	updated_by    *string
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*PageLink, error)
	predicates    []predicate.PageLink
}

var _ ent.Mutation = (*PageLinkMutation)(nil)

// pagelinkOption allows management of the mutation configuration using functional options.
type pagelinkOption func(*PageLinkMutation)

// newPageLinkMutation creates new mutation for the PageLink entity.
func newPageLinkMutation(c config, op Op, opts ...pagelinkOption) *PageLinkMutation {
	m := &PageLinkMutation{
		config:        c,
		op:            op,
		typ:           TypePageLink,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withPageLinkID sets the ID field of the mutation.
func withPageLinkID(id int64) pagelinkOption {
	return func(m *PageLinkMutation) {
		var (
			err   error
			once  sync.Once
			value *PageLink
		)
		m.oldValue = func(ctx context.Context) (*PageLink, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().PageLink.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withPageLink sets the old PageLink of the mutation.
func withPageLink(node *PageLink) pagelinkOption {
	return func(m *PageLinkMutation) {
		m.oldValue = func(context.Context) (*PageLink, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m PageLinkMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m PageLinkMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of PageLink entities.
func (m *PageLinkMutation) SetID(id int64) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *PageLinkMutation) ID() (id int64, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *PageLinkMutation) IDs(ctx context.Context) ([]int64, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int64{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().PageLink.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetSourceID sets the "source_id" field.
func (m *PageLinkMutation) SetSourceID(i int64) {
	m.source_id = &i
	m.addsource_id = nil
}

// SourceID returns the value of the "source_id" field in the mutation.
func (m *PageLinkMutation) SourceID() (r int64, exists bool) {
	v := m.source_id
	if v == nil {
		return
	}
	return *v, true
}

// OldSourceID returns the old "source_id" field's value of the PageLink entity.
// If the PageLink object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PageLinkMutation) OldSourceID(ctx context.Context) (v int64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSourceID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSourceID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSourceID: %w", err)
	}
	return oldValue.SourceID, nil
}

// AddSourceID adds i to the "source_id" field.
func (m *PageLinkMutation) AddSourceID(i int64) {
	if m.addsource_id != nil {
		*m.addsource_id += i
	} else {
		m.addsource_id = &i
	}
}

// AddedSourceID returns the value that was added to the "source_id" field in this mutation.
func (m *PageLinkMutation) AddedSourceID() (r int64, exists bool) {
	v := m.addsource_id
	if v == nil {
		return
	}
	return *v, true
}

// ResetSourceID resets all changes to the "source_id" field.
func (m *PageLinkMutation) ResetSourceID() {
	m.source_id = nil
	m.addsource_id = nil
}

// SetTargetID sets the "target_id" field.
func (m *PageLinkMutation) SetTargetID(i int64) {
	m.target_id = &i
	m.addtarget_id = nil
}

// TargetID returns the value of the "target_id" field in the mutation.
func (m *PageLinkMutation) TargetID() (r int64, exists bool) {
	v := m.target_id
	if v == nil {
		return
	}
	return *v, true
}

// OldTargetID returns the old "target_id" field's value of the PageLink entity.
// If the PageLink object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PageLinkMutation) OldTargetID(ctx context.Context) (v int64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTargetID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTargetID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTargetID: %w", err)
	}
	return oldValue.TargetID, nil
}

// AddTargetID adds i to the "target_id" field.
func (m *PageLinkMutation) AddTargetID(i int64) {
	if m.addtarget_id != nil {
		*m.addtarget_id += i
	} else {
		m.addtarget_id = &i
	}
}

// AddedTargetID returns the value that was added to the "target_id" field in this mutation.
func (m *PageLinkMutation) AddedTargetID() (r int64, exists bool) {
	v := m.addtarget_id
	if v == nil {
		return
	}
	return *v, true
}

// ResetTargetID resets all changes to the "target_id" field.
func (m *PageLinkMutation) ResetTargetID() {
	m.target_id = nil
	m.addtarget_id = nil
}

// SetCreatedAt sets the "created_at" field.
func (m *PageLinkMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *PageLinkMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the PageLink entity.
// If the PageLink object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PageLinkMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *PageLinkMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetCreatedBy sets the "created_by" field.
func (m *PageLinkMutation) SetCreatedBy(s string) {
	m.created_by = &s
}

// CreatedBy returns the value of the "created_by" field in the mutation.
func (m *PageLinkMutation) CreatedBy() (r string, exists bool) {
	v := m.created_by
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedBy returns the old "created_by" field's value of the PageLink entity.
// If the PageLink object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PageLinkMutation) OldCreatedBy(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedBy is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedBy requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedBy: %w", err)
	}
	return oldValue.CreatedBy, nil
}

// ResetCreatedBy resets all changes to the "created_by" field.
func (m *PageLinkMutation) ResetCreatedBy() {
	m.created_by = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *PageLinkMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *PageLinkMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the PageLink entity.
// If the PageLink object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PageLinkMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *PageLinkMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// SetUpdatedBy sets the "updated_by" field.
func (m *PageLinkMutation) SetUpdatedBy(s string) {
	m.updated_by = &s
}

// UpdatedBy returns the value of the "updated_by" field in the mutation.
func (m *PageLinkMutation) UpdatedBy() (r string, exists bool) {
	v := m.updated_by
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedBy returns the old "updated_by" field's value of the PageLink entity.
// If the PageLink object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PageLinkMutation) OldUpdatedBy(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedBy is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedBy requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedBy: %w", err)
	}
	return oldValue.UpdatedBy, nil
}

// ResetUpdatedBy resets all changes to the "updated_by" field.
func (m *PageLinkMutation) ResetUpdatedBy() {
	m.updated_by = nil
}

// Where appends a list predicates to the PageLinkMutation builder.
func (m *PageLinkMutation) Where(ps ...predicate.PageLink) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *PageLinkMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (PageLink).
func (m *PageLinkMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *PageLinkMutation) Fields() []string {
	fields := make([]string, 0, 6)
	if m.source_id != nil {
		fields = append(fields, pagelink.FieldSourceID)
	}
	if m.target_id != nil {
		fields = append(fields, pagelink.FieldTargetID)
	}
	if m.created_at != nil {
		fields = append(fields, pagelink.FieldCreatedAt)
	}
	if m.created_by != nil {
		fields = append(fields, pagelink.FieldCreatedBy)
	}
	if m.updated_at != nil {
		fields = append(fields, pagelink.FieldUpdatedAt)
	}
	if m.updated_by != nil {
		fields = append(fields, pagelink.FieldUpdatedBy)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *PageLinkMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case pagelink.FieldSourceID:
		return m.SourceID()
	case pagelink.FieldTargetID:
		return m.TargetID()
	case pagelink.FieldCreatedAt:
		return m.CreatedAt()
	case pagelink.FieldCreatedBy:
		return m.CreatedBy()
	case pagelink.FieldUpdatedAt:
		return m.UpdatedAt()
	case pagelink.FieldUpdatedBy:
		return m.UpdatedBy()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *PageLinkMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case pagelink.FieldSourceID:
		return m.OldSourceID(ctx)
	case pagelink.FieldTargetID:
		return m.OldTargetID(ctx)
	case pagelink.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case pagelink.FieldCreatedBy:
		return m.OldCreatedBy(ctx)
	case pagelink.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case pagelink.FieldUpdatedBy:
		return m.OldUpdatedBy(ctx)
	}
	return nil, fmt.Errorf("unknown PageLink field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *PageLinkMutation) SetField(name string, value ent.Value) error {
	switch name {
	case pagelink.FieldSourceID:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSourceID(v)
		return nil
	case pagelink.FieldTargetID:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTargetID(v)
		return nil
	case pagelink.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case pagelink.FieldCreatedBy:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedBy(v)
		return nil
	case pagelink.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case pagelink.FieldUpdatedBy:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedBy(v)
		return nil
	}
	return fmt.Errorf("unknown PageLink field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *PageLinkMutation) AddedFields() []string {
	var fields []string
	if m.addsource_id != nil {
		fields = append(fields, pagelink.FieldSourceID)
	}
	if m.addtarget_id != nil {
		fields = append(fields, pagelink.FieldTargetID)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *PageLinkMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case pagelink.FieldSourceID:
		return m.AddedSourceID()
	case pagelink.FieldTargetID:
		return m.AddedTargetID()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *PageLinkMutation) AddField(name string, value ent.Value) error {
	switch name {
	case pagelink.FieldSourceID:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddSourceID(v)
		return nil
	case pagelink.FieldTargetID:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddTargetID(v)
		return nil
	}
	return fmt.Errorf("unknown PageLink numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *PageLinkMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *PageLinkMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *PageLinkMutation) ClearField(name string) error {
	return fmt.Errorf("unknown PageLink nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *PageLinkMutation) ResetField(name string) error {
	switch name {
	case pagelink.FieldSourceID:
		m.ResetSourceID()
		return nil
	case pagelink.FieldTargetID:
		m.ResetTargetID()
		return nil
	case pagelink.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case pagelink.FieldCreatedBy:
		m.ResetCreatedBy()
		return nil
	case pagelink.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case pagelink.FieldUpdatedBy:
		m.ResetUpdatedBy()
		return nil
	}
	return fmt.Errorf("unknown PageLink field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *PageLinkMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *PageLinkMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *PageLinkMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *PageLinkMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *PageLinkMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *PageLinkMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *PageLinkMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown PageLink unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *PageLinkMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown PageLink edge %s", name)
}

// PageSourceMutation represents an operation that mutates the PageSource nodes in the graph.
type PageSourceMutation struct {
	config
	op               Op
	typ              string
	id               *string
	referred_page_id *string
	url              *string
	referred_url     *string
	source           *string
	clearedFields    map[string]struct{}
	page             *string
	clearedpage      bool
	done             bool
	oldValue         func(context.Context) (*PageSource, error)
	predicates       []predicate.PageSource
}

var _ ent.Mutation = (*PageSourceMutation)(nil)

// pagesourceOption allows management of the mutation configuration using functional options.
type pagesourceOption func(*PageSourceMutation)

// newPageSourceMutation creates new mutation for the PageSource entity.
func newPageSourceMutation(c config, op Op, opts ...pagesourceOption) *PageSourceMutation {
	m := &PageSourceMutation{
		config:        c,
		op:            op,
		typ:           TypePageSource,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withPageSourceID sets the ID field of the mutation.
func withPageSourceID(id string) pagesourceOption {
	return func(m *PageSourceMutation) {
		var (
			err   error
			once  sync.Once
			value *PageSource
		)
		m.oldValue = func(ctx context.Context) (*PageSource, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().PageSource.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withPageSource sets the old PageSource of the mutation.
func withPageSource(node *PageSource) pagesourceOption {
	return func(m *PageSourceMutation) {
		m.oldValue = func(context.Context) (*PageSource, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m PageSourceMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m PageSourceMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of PageSource entities.
func (m *PageSourceMutation) SetID(id string) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *PageSourceMutation) ID() (id string, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *PageSourceMutation) IDs(ctx context.Context) ([]string, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []string{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().PageSource.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetPageID sets the "page_id" field.
func (m *PageSourceMutation) SetPageID(s string) {
	m.page = &s
}

// PageID returns the value of the "page_id" field in the mutation.
func (m *PageSourceMutation) PageID() (r string, exists bool) {
	v := m.page
	if v == nil {
		return
	}
	return *v, true
}

// OldPageID returns the old "page_id" field's value of the PageSource entity.
// If the PageSource object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PageSourceMutation) OldPageID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPageID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPageID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPageID: %w", err)
	}
	return oldValue.PageID, nil
}

// ResetPageID resets all changes to the "page_id" field.
func (m *PageSourceMutation) ResetPageID() {
	m.page = nil
}

// SetReferredPageID sets the "referred_page_id" field.
func (m *PageSourceMutation) SetReferredPageID(s string) {
	m.referred_page_id = &s
}

// ReferredPageID returns the value of the "referred_page_id" field in the mutation.
func (m *PageSourceMutation) ReferredPageID() (r string, exists bool) {
	v := m.referred_page_id
	if v == nil {
		return
	}
	return *v, true
}

// OldReferredPageID returns the old "referred_page_id" field's value of the PageSource entity.
// If the PageSource object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PageSourceMutation) OldReferredPageID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldReferredPageID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldReferredPageID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldReferredPageID: %w", err)
	}
	return oldValue.ReferredPageID, nil
}

// ResetReferredPageID resets all changes to the "referred_page_id" field.
func (m *PageSourceMutation) ResetReferredPageID() {
	m.referred_page_id = nil
}

// SetURL sets the "url" field.
func (m *PageSourceMutation) SetURL(s string) {
	m.url = &s
}

// URL returns the value of the "url" field in the mutation.
func (m *PageSourceMutation) URL() (r string, exists bool) {
	v := m.url
	if v == nil {
		return
	}
	return *v, true
}

// OldURL returns the old "url" field's value of the PageSource entity.
// If the PageSource object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PageSourceMutation) OldURL(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldURL is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldURL requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldURL: %w", err)
	}
	return oldValue.URL, nil
}

// ResetURL resets all changes to the "url" field.
func (m *PageSourceMutation) ResetURL() {
	m.url = nil
}

// SetReferredURL sets the "referred_url" field.
func (m *PageSourceMutation) SetReferredURL(s string) {
	m.referred_url = &s
}

// ReferredURL returns the value of the "referred_url" field in the mutation.
func (m *PageSourceMutation) ReferredURL() (r string, exists bool) {
	v := m.referred_url
	if v == nil {
		return
	}
	return *v, true
}

// OldReferredURL returns the old "referred_url" field's value of the PageSource entity.
// If the PageSource object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PageSourceMutation) OldReferredURL(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldReferredURL is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldReferredURL requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldReferredURL: %w", err)
	}
	return oldValue.ReferredURL, nil
}

// ResetReferredURL resets all changes to the "referred_url" field.
func (m *PageSourceMutation) ResetReferredURL() {
	m.referred_url = nil
}

// SetSource sets the "source" field.
func (m *PageSourceMutation) SetSource(s string) {
	m.source = &s
}

// Source returns the value of the "source" field in the mutation.
func (m *PageSourceMutation) Source() (r string, exists bool) {
	v := m.source
	if v == nil {
		return
	}
	return *v, true
}

// OldSource returns the old "source" field's value of the PageSource entity.
// If the PageSource object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PageSourceMutation) OldSource(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSource is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSource requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSource: %w", err)
	}
	return oldValue.Source, nil
}

// ResetSource resets all changes to the "source" field.
func (m *PageSourceMutation) ResetSource() {
	m.source = nil
}

// ClearPage clears the "page" edge to the Page entity.
func (m *PageSourceMutation) ClearPage() {
	m.clearedpage = true
}

// PageCleared reports if the "page" edge to the Page entity was cleared.
func (m *PageSourceMutation) PageCleared() bool {
	return m.clearedpage
}

// PageIDs returns the "page" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// PageID instead. It exists only for internal usage by the builders.
func (m *PageSourceMutation) PageIDs() (ids []string) {
	if id := m.page; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetPage resets all changes to the "page" edge.
func (m *PageSourceMutation) ResetPage() {
	m.page = nil
	m.clearedpage = false
}

// Where appends a list predicates to the PageSourceMutation builder.
func (m *PageSourceMutation) Where(ps ...predicate.PageSource) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *PageSourceMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (PageSource).
func (m *PageSourceMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *PageSourceMutation) Fields() []string {
	fields := make([]string, 0, 5)
	if m.page != nil {
		fields = append(fields, pagesource.FieldPageID)
	}
	if m.referred_page_id != nil {
		fields = append(fields, pagesource.FieldReferredPageID)
	}
	if m.url != nil {
		fields = append(fields, pagesource.FieldURL)
	}
	if m.referred_url != nil {
		fields = append(fields, pagesource.FieldReferredURL)
	}
	if m.source != nil {
		fields = append(fields, pagesource.FieldSource)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *PageSourceMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case pagesource.FieldPageID:
		return m.PageID()
	case pagesource.FieldReferredPageID:
		return m.ReferredPageID()
	case pagesource.FieldURL:
		return m.URL()
	case pagesource.FieldReferredURL:
		return m.ReferredURL()
	case pagesource.FieldSource:
		return m.Source()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *PageSourceMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case pagesource.FieldPageID:
		return m.OldPageID(ctx)
	case pagesource.FieldReferredPageID:
		return m.OldReferredPageID(ctx)
	case pagesource.FieldURL:
		return m.OldURL(ctx)
	case pagesource.FieldReferredURL:
		return m.OldReferredURL(ctx)
	case pagesource.FieldSource:
		return m.OldSource(ctx)
	}
	return nil, fmt.Errorf("unknown PageSource field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *PageSourceMutation) SetField(name string, value ent.Value) error {
	switch name {
	case pagesource.FieldPageID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPageID(v)
		return nil
	case pagesource.FieldReferredPageID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetReferredPageID(v)
		return nil
	case pagesource.FieldURL:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetURL(v)
		return nil
	case pagesource.FieldReferredURL:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetReferredURL(v)
		return nil
	case pagesource.FieldSource:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSource(v)
		return nil
	}
	return fmt.Errorf("unknown PageSource field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *PageSourceMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *PageSourceMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *PageSourceMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown PageSource numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *PageSourceMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *PageSourceMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *PageSourceMutation) ClearField(name string) error {
	return fmt.Errorf("unknown PageSource nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *PageSourceMutation) ResetField(name string) error {
	switch name {
	case pagesource.FieldPageID:
		m.ResetPageID()
		return nil
	case pagesource.FieldReferredPageID:
		m.ResetReferredPageID()
		return nil
	case pagesource.FieldURL:
		m.ResetURL()
		return nil
	case pagesource.FieldReferredURL:
		m.ResetReferredURL()
		return nil
	case pagesource.FieldSource:
		m.ResetSource()
		return nil
	}
	return fmt.Errorf("unknown PageSource field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *PageSourceMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.page != nil {
		edges = append(edges, pagesource.EdgePage)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *PageSourceMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case pagesource.EdgePage:
		if id := m.page; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *PageSourceMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *PageSourceMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *PageSourceMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedpage {
		edges = append(edges, pagesource.EdgePage)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *PageSourceMutation) EdgeCleared(name string) bool {
	switch name {
	case pagesource.EdgePage:
		return m.clearedpage
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *PageSourceMutation) ClearEdge(name string) error {
	switch name {
	case pagesource.EdgePage:
		m.ClearPage()
		return nil
	}
	return fmt.Errorf("unknown PageSource unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *PageSourceMutation) ResetEdge(name string) error {
	switch name {
	case pagesource.EdgePage:
		m.ResetPage()
		return nil
	}
	return fmt.Errorf("unknown PageSource edge %s", name)
}
