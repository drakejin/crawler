// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/drakejin/crawler/internal/storage/db/ent/pagereferred"
	"github.com/google/uuid"
)

// PageReferredCreate is the builder for creating a PageReferred entity.
type PageReferredCreate struct {
	config
	mutation *PageReferredMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetSourceID sets the "source_id" field.
func (prc *PageReferredCreate) SetSourceID(u uuid.UUID) *PageReferredCreate {
	prc.mutation.SetSourceID(u)
	return prc
}

// SetTargetID sets the "target_id" field.
func (prc *PageReferredCreate) SetTargetID(u uuid.UUID) *PageReferredCreate {
	prc.mutation.SetTargetID(u)
	return prc
}

// SetCreatedAt sets the "created_at" field.
func (prc *PageReferredCreate) SetCreatedAt(t time.Time) *PageReferredCreate {
	prc.mutation.SetCreatedAt(t)
	return prc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (prc *PageReferredCreate) SetNillableCreatedAt(t *time.Time) *PageReferredCreate {
	if t != nil {
		prc.SetCreatedAt(*t)
	}
	return prc
}

// SetCreatedBy sets the "created_by" field.
func (prc *PageReferredCreate) SetCreatedBy(s string) *PageReferredCreate {
	prc.mutation.SetCreatedBy(s)
	return prc
}

// SetUpdatedAt sets the "updated_at" field.
func (prc *PageReferredCreate) SetUpdatedAt(t time.Time) *PageReferredCreate {
	prc.mutation.SetUpdatedAt(t)
	return prc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (prc *PageReferredCreate) SetNillableUpdatedAt(t *time.Time) *PageReferredCreate {
	if t != nil {
		prc.SetUpdatedAt(*t)
	}
	return prc
}

// SetUpdatedBy sets the "updated_by" field.
func (prc *PageReferredCreate) SetUpdatedBy(s string) *PageReferredCreate {
	prc.mutation.SetUpdatedBy(s)
	return prc
}

// SetID sets the "id" field.
func (prc *PageReferredCreate) SetID(u uuid.UUID) *PageReferredCreate {
	prc.mutation.SetID(u)
	return prc
}

// Mutation returns the PageReferredMutation object of the builder.
func (prc *PageReferredCreate) Mutation() *PageReferredMutation {
	return prc.mutation
}

// Save creates the PageReferred in the database.
func (prc *PageReferredCreate) Save(ctx context.Context) (*PageReferred, error) {
	var (
		err  error
		node *PageReferred
	)
	prc.defaults()
	if len(prc.hooks) == 0 {
		if err = prc.check(); err != nil {
			return nil, err
		}
		node, err = prc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*PageReferredMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = prc.check(); err != nil {
				return nil, err
			}
			prc.mutation = mutation
			if node, err = prc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(prc.hooks) - 1; i >= 0; i-- {
			if prc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = prc.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, prc.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*PageReferred)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from PageReferredMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (prc *PageReferredCreate) SaveX(ctx context.Context) *PageReferred {
	v, err := prc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (prc *PageReferredCreate) Exec(ctx context.Context) error {
	_, err := prc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (prc *PageReferredCreate) ExecX(ctx context.Context) {
	if err := prc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (prc *PageReferredCreate) defaults() {
	if _, ok := prc.mutation.CreatedAt(); !ok {
		v := pagereferred.DefaultCreatedAt()
		prc.mutation.SetCreatedAt(v)
	}
	if _, ok := prc.mutation.UpdatedAt(); !ok {
		v := pagereferred.DefaultUpdatedAt()
		prc.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (prc *PageReferredCreate) check() error {
	if _, ok := prc.mutation.SourceID(); !ok {
		return &ValidationError{Name: "source_id", err: errors.New(`ent: missing required field "PageReferred.source_id"`)}
	}
	if _, ok := prc.mutation.TargetID(); !ok {
		return &ValidationError{Name: "target_id", err: errors.New(`ent: missing required field "PageReferred.target_id"`)}
	}
	if _, ok := prc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "PageReferred.created_at"`)}
	}
	if _, ok := prc.mutation.CreatedBy(); !ok {
		return &ValidationError{Name: "created_by", err: errors.New(`ent: missing required field "PageReferred.created_by"`)}
	}
	if v, ok := prc.mutation.CreatedBy(); ok {
		if err := pagereferred.CreatedByValidator(v); err != nil {
			return &ValidationError{Name: "created_by", err: fmt.Errorf(`ent: validator failed for field "PageReferred.created_by": %w`, err)}
		}
	}
	if _, ok := prc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "PageReferred.updated_at"`)}
	}
	if _, ok := prc.mutation.UpdatedBy(); !ok {
		return &ValidationError{Name: "updated_by", err: errors.New(`ent: missing required field "PageReferred.updated_by"`)}
	}
	if v, ok := prc.mutation.UpdatedBy(); ok {
		if err := pagereferred.UpdatedByValidator(v); err != nil {
			return &ValidationError{Name: "updated_by", err: fmt.Errorf(`ent: validator failed for field "PageReferred.updated_by": %w`, err)}
		}
	}
	return nil
}

func (prc *PageReferredCreate) sqlSave(ctx context.Context) (*PageReferred, error) {
	_node, _spec := prc.createSpec()
	if err := sqlgraph.CreateNode(ctx, prc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	return _node, nil
}

func (prc *PageReferredCreate) createSpec() (*PageReferred, *sqlgraph.CreateSpec) {
	var (
		_node = &PageReferred{config: prc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: pagereferred.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: pagereferred.FieldID,
			},
		}
	)
	_spec.OnConflict = prc.conflict
	if id, ok := prc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := prc.mutation.SourceID(); ok {
		_spec.SetField(pagereferred.FieldSourceID, field.TypeUUID, value)
		_node.SourceID = value
	}
	if value, ok := prc.mutation.TargetID(); ok {
		_spec.SetField(pagereferred.FieldTargetID, field.TypeUUID, value)
		_node.TargetID = value
	}
	if value, ok := prc.mutation.CreatedAt(); ok {
		_spec.SetField(pagereferred.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := prc.mutation.CreatedBy(); ok {
		_spec.SetField(pagereferred.FieldCreatedBy, field.TypeString, value)
		_node.CreatedBy = value
	}
	if value, ok := prc.mutation.UpdatedAt(); ok {
		_spec.SetField(pagereferred.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := prc.mutation.UpdatedBy(); ok {
		_spec.SetField(pagereferred.FieldUpdatedBy, field.TypeString, value)
		_node.UpdatedBy = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.PageReferred.Create().
//		SetSourceID(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.PageReferredUpsert) {
//			SetSourceID(v+v).
//		}).
//		Exec(ctx)
func (prc *PageReferredCreate) OnConflict(opts ...sql.ConflictOption) *PageReferredUpsertOne {
	prc.conflict = opts
	return &PageReferredUpsertOne{
		create: prc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.PageReferred.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (prc *PageReferredCreate) OnConflictColumns(columns ...string) *PageReferredUpsertOne {
	prc.conflict = append(prc.conflict, sql.ConflictColumns(columns...))
	return &PageReferredUpsertOne{
		create: prc,
	}
}

type (
	// PageReferredUpsertOne is the builder for "upsert"-ing
	//  one PageReferred node.
	PageReferredUpsertOne struct {
		create *PageReferredCreate
	}

	// PageReferredUpsert is the "OnConflict" setter.
	PageReferredUpsert struct {
		*sql.UpdateSet
	}
)

// SetSourceID sets the "source_id" field.
func (u *PageReferredUpsert) SetSourceID(v uuid.UUID) *PageReferredUpsert {
	u.Set(pagereferred.FieldSourceID, v)
	return u
}

// UpdateSourceID sets the "source_id" field to the value that was provided on create.
func (u *PageReferredUpsert) UpdateSourceID() *PageReferredUpsert {
	u.SetExcluded(pagereferred.FieldSourceID)
	return u
}

// SetTargetID sets the "target_id" field.
func (u *PageReferredUpsert) SetTargetID(v uuid.UUID) *PageReferredUpsert {
	u.Set(pagereferred.FieldTargetID, v)
	return u
}

// UpdateTargetID sets the "target_id" field to the value that was provided on create.
func (u *PageReferredUpsert) UpdateTargetID() *PageReferredUpsert {
	u.SetExcluded(pagereferred.FieldTargetID)
	return u
}

// SetCreatedBy sets the "created_by" field.
func (u *PageReferredUpsert) SetCreatedBy(v string) *PageReferredUpsert {
	u.Set(pagereferred.FieldCreatedBy, v)
	return u
}

// UpdateCreatedBy sets the "created_by" field to the value that was provided on create.
func (u *PageReferredUpsert) UpdateCreatedBy() *PageReferredUpsert {
	u.SetExcluded(pagereferred.FieldCreatedBy)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *PageReferredUpsert) SetUpdatedAt(v time.Time) *PageReferredUpsert {
	u.Set(pagereferred.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *PageReferredUpsert) UpdateUpdatedAt() *PageReferredUpsert {
	u.SetExcluded(pagereferred.FieldUpdatedAt)
	return u
}

// SetUpdatedBy sets the "updated_by" field.
func (u *PageReferredUpsert) SetUpdatedBy(v string) *PageReferredUpsert {
	u.Set(pagereferred.FieldUpdatedBy, v)
	return u
}

// UpdateUpdatedBy sets the "updated_by" field to the value that was provided on create.
func (u *PageReferredUpsert) UpdateUpdatedBy() *PageReferredUpsert {
	u.SetExcluded(pagereferred.FieldUpdatedBy)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.PageReferred.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(pagereferred.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *PageReferredUpsertOne) UpdateNewValues() *PageReferredUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(pagereferred.FieldID)
		}
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(pagereferred.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.PageReferred.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *PageReferredUpsertOne) Ignore() *PageReferredUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *PageReferredUpsertOne) DoNothing() *PageReferredUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the PageReferredCreate.OnConflict
// documentation for more info.
func (u *PageReferredUpsertOne) Update(set func(*PageReferredUpsert)) *PageReferredUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&PageReferredUpsert{UpdateSet: update})
	}))
	return u
}

// SetSourceID sets the "source_id" field.
func (u *PageReferredUpsertOne) SetSourceID(v uuid.UUID) *PageReferredUpsertOne {
	return u.Update(func(s *PageReferredUpsert) {
		s.SetSourceID(v)
	})
}

// UpdateSourceID sets the "source_id" field to the value that was provided on create.
func (u *PageReferredUpsertOne) UpdateSourceID() *PageReferredUpsertOne {
	return u.Update(func(s *PageReferredUpsert) {
		s.UpdateSourceID()
	})
}

// SetTargetID sets the "target_id" field.
func (u *PageReferredUpsertOne) SetTargetID(v uuid.UUID) *PageReferredUpsertOne {
	return u.Update(func(s *PageReferredUpsert) {
		s.SetTargetID(v)
	})
}

// UpdateTargetID sets the "target_id" field to the value that was provided on create.
func (u *PageReferredUpsertOne) UpdateTargetID() *PageReferredUpsertOne {
	return u.Update(func(s *PageReferredUpsert) {
		s.UpdateTargetID()
	})
}

// SetCreatedBy sets the "created_by" field.
func (u *PageReferredUpsertOne) SetCreatedBy(v string) *PageReferredUpsertOne {
	return u.Update(func(s *PageReferredUpsert) {
		s.SetCreatedBy(v)
	})
}

// UpdateCreatedBy sets the "created_by" field to the value that was provided on create.
func (u *PageReferredUpsertOne) UpdateCreatedBy() *PageReferredUpsertOne {
	return u.Update(func(s *PageReferredUpsert) {
		s.UpdateCreatedBy()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *PageReferredUpsertOne) SetUpdatedAt(v time.Time) *PageReferredUpsertOne {
	return u.Update(func(s *PageReferredUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *PageReferredUpsertOne) UpdateUpdatedAt() *PageReferredUpsertOne {
	return u.Update(func(s *PageReferredUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetUpdatedBy sets the "updated_by" field.
func (u *PageReferredUpsertOne) SetUpdatedBy(v string) *PageReferredUpsertOne {
	return u.Update(func(s *PageReferredUpsert) {
		s.SetUpdatedBy(v)
	})
}

// UpdateUpdatedBy sets the "updated_by" field to the value that was provided on create.
func (u *PageReferredUpsertOne) UpdateUpdatedBy() *PageReferredUpsertOne {
	return u.Update(func(s *PageReferredUpsert) {
		s.UpdateUpdatedBy()
	})
}

// Exec executes the query.
func (u *PageReferredUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for PageReferredCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *PageReferredUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *PageReferredUpsertOne) ID(ctx context.Context) (id uuid.UUID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: PageReferredUpsertOne.ID is not supported by MySQL driver. Use PageReferredUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *PageReferredUpsertOne) IDX(ctx context.Context) uuid.UUID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// PageReferredCreateBulk is the builder for creating many PageReferred entities in bulk.
type PageReferredCreateBulk struct {
	config
	builders []*PageReferredCreate
	conflict []sql.ConflictOption
}

// Save creates the PageReferred entities in the database.
func (prcb *PageReferredCreateBulk) Save(ctx context.Context) ([]*PageReferred, error) {
	specs := make([]*sqlgraph.CreateSpec, len(prcb.builders))
	nodes := make([]*PageReferred, len(prcb.builders))
	mutators := make([]Mutator, len(prcb.builders))
	for i := range prcb.builders {
		func(i int, root context.Context) {
			builder := prcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*PageReferredMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, prcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = prcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, prcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, prcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (prcb *PageReferredCreateBulk) SaveX(ctx context.Context) []*PageReferred {
	v, err := prcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (prcb *PageReferredCreateBulk) Exec(ctx context.Context) error {
	_, err := prcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (prcb *PageReferredCreateBulk) ExecX(ctx context.Context) {
	if err := prcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.PageReferred.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.PageReferredUpsert) {
//			SetSourceID(v+v).
//		}).
//		Exec(ctx)
func (prcb *PageReferredCreateBulk) OnConflict(opts ...sql.ConflictOption) *PageReferredUpsertBulk {
	prcb.conflict = opts
	return &PageReferredUpsertBulk{
		create: prcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.PageReferred.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (prcb *PageReferredCreateBulk) OnConflictColumns(columns ...string) *PageReferredUpsertBulk {
	prcb.conflict = append(prcb.conflict, sql.ConflictColumns(columns...))
	return &PageReferredUpsertBulk{
		create: prcb,
	}
}

// PageReferredUpsertBulk is the builder for "upsert"-ing
// a bulk of PageReferred nodes.
type PageReferredUpsertBulk struct {
	create *PageReferredCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.PageReferred.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(pagereferred.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *PageReferredUpsertBulk) UpdateNewValues() *PageReferredUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(pagereferred.FieldID)
			}
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(pagereferred.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.PageReferred.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *PageReferredUpsertBulk) Ignore() *PageReferredUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *PageReferredUpsertBulk) DoNothing() *PageReferredUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the PageReferredCreateBulk.OnConflict
// documentation for more info.
func (u *PageReferredUpsertBulk) Update(set func(*PageReferredUpsert)) *PageReferredUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&PageReferredUpsert{UpdateSet: update})
	}))
	return u
}

// SetSourceID sets the "source_id" field.
func (u *PageReferredUpsertBulk) SetSourceID(v uuid.UUID) *PageReferredUpsertBulk {
	return u.Update(func(s *PageReferredUpsert) {
		s.SetSourceID(v)
	})
}

// UpdateSourceID sets the "source_id" field to the value that was provided on create.
func (u *PageReferredUpsertBulk) UpdateSourceID() *PageReferredUpsertBulk {
	return u.Update(func(s *PageReferredUpsert) {
		s.UpdateSourceID()
	})
}

// SetTargetID sets the "target_id" field.
func (u *PageReferredUpsertBulk) SetTargetID(v uuid.UUID) *PageReferredUpsertBulk {
	return u.Update(func(s *PageReferredUpsert) {
		s.SetTargetID(v)
	})
}

// UpdateTargetID sets the "target_id" field to the value that was provided on create.
func (u *PageReferredUpsertBulk) UpdateTargetID() *PageReferredUpsertBulk {
	return u.Update(func(s *PageReferredUpsert) {
		s.UpdateTargetID()
	})
}

// SetCreatedBy sets the "created_by" field.
func (u *PageReferredUpsertBulk) SetCreatedBy(v string) *PageReferredUpsertBulk {
	return u.Update(func(s *PageReferredUpsert) {
		s.SetCreatedBy(v)
	})
}

// UpdateCreatedBy sets the "created_by" field to the value that was provided on create.
func (u *PageReferredUpsertBulk) UpdateCreatedBy() *PageReferredUpsertBulk {
	return u.Update(func(s *PageReferredUpsert) {
		s.UpdateCreatedBy()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *PageReferredUpsertBulk) SetUpdatedAt(v time.Time) *PageReferredUpsertBulk {
	return u.Update(func(s *PageReferredUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *PageReferredUpsertBulk) UpdateUpdatedAt() *PageReferredUpsertBulk {
	return u.Update(func(s *PageReferredUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetUpdatedBy sets the "updated_by" field.
func (u *PageReferredUpsertBulk) SetUpdatedBy(v string) *PageReferredUpsertBulk {
	return u.Update(func(s *PageReferredUpsert) {
		s.SetUpdatedBy(v)
	})
}

// UpdateUpdatedBy sets the "updated_by" field to the value that was provided on create.
func (u *PageReferredUpsertBulk) UpdateUpdatedBy() *PageReferredUpsertBulk {
	return u.Update(func(s *PageReferredUpsert) {
		s.UpdateUpdatedBy()
	})
}

// Exec executes the query.
func (u *PageReferredUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the PageReferredCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for PageReferredCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *PageReferredUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
