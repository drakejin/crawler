// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/drakejin/crawler/internal/storage/db/ent/page"
	"github.com/drakejin/crawler/internal/storage/db/ent/pagesource"
)

// PageSource is the model entity for the PageSource schema.
type PageSource struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// PageID holds the value of the "page_id" field.
	PageID string `json:"page_id,omitempty"`
	// ReferredPageID holds the value of the "referred_page_id" field.
	ReferredPageID string `json:"referred_page_id,omitempty"`
	// this mean url
	URL string `json:"url,omitempty"`
	// this mean previous referred_url
	ReferredURL string `json:"referred_url,omitempty"`
	// html view source code
	Source string `json:"source,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the PageSourceQuery when eager-loading is set.
	Edges PageSourceEdges `json:"edges"`
}

// PageSourceEdges holds the relations/edges for other nodes in the graph.
type PageSourceEdges struct {
	// Page holds the value of the page edge.
	Page *Page `json:"page,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// PageOrErr returns the Page value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e PageSourceEdges) PageOrErr() (*Page, error) {
	if e.loadedTypes[0] {
		if e.Page == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: page.Label}
		}
		return e.Page, nil
	}
	return nil, &NotLoadedError{edge: "page"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*PageSource) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case pagesource.FieldID, pagesource.FieldPageID, pagesource.FieldReferredPageID, pagesource.FieldURL, pagesource.FieldReferredURL, pagesource.FieldSource:
			values[i] = new(sql.NullString)
		default:
			return nil, fmt.Errorf("unexpected column %q for type PageSource", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the PageSource fields.
func (ps *PageSource) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case pagesource.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				ps.ID = value.String
			}
		case pagesource.FieldPageID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field page_id", values[i])
			} else if value.Valid {
				ps.PageID = value.String
			}
		case pagesource.FieldReferredPageID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field referred_page_id", values[i])
			} else if value.Valid {
				ps.ReferredPageID = value.String
			}
		case pagesource.FieldURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field url", values[i])
			} else if value.Valid {
				ps.URL = value.String
			}
		case pagesource.FieldReferredURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field referred_url", values[i])
			} else if value.Valid {
				ps.ReferredURL = value.String
			}
		case pagesource.FieldSource:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field source", values[i])
			} else if value.Valid {
				ps.Source = value.String
			}
		}
	}
	return nil
}

// QueryPage queries the "page" edge of the PageSource entity.
func (ps *PageSource) QueryPage() *PageQuery {
	return (&PageSourceClient{config: ps.config}).QueryPage(ps)
}

// Update returns a builder for updating this PageSource.
// Note that you need to call PageSource.Unwrap() before calling this method if this PageSource
// was returned from a transaction, and the transaction was committed or rolled back.
func (ps *PageSource) Update() *PageSourceUpdateOne {
	return (&PageSourceClient{config: ps.config}).UpdateOne(ps)
}

// Unwrap unwraps the PageSource entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ps *PageSource) Unwrap() *PageSource {
	_tx, ok := ps.config.driver.(*txDriver)
	if !ok {
		panic("ent: PageSource is not a transactional entity")
	}
	ps.config.driver = _tx.drv
	return ps
}

// String implements the fmt.Stringer.
func (ps *PageSource) String() string {
	var builder strings.Builder
	builder.WriteString("PageSource(")
	builder.WriteString(fmt.Sprintf("id=%v, ", ps.ID))
	builder.WriteString("page_id=")
	builder.WriteString(ps.PageID)
	builder.WriteString(", ")
	builder.WriteString("referred_page_id=")
	builder.WriteString(ps.ReferredPageID)
	builder.WriteString(", ")
	builder.WriteString("url=")
	builder.WriteString(ps.URL)
	builder.WriteString(", ")
	builder.WriteString("referred_url=")
	builder.WriteString(ps.ReferredURL)
	builder.WriteString(", ")
	builder.WriteString("source=")
	builder.WriteString(ps.Source)
	builder.WriteByte(')')
	return builder.String()
}

// PageSources is a parsable slice of PageSource.
type PageSources []*PageSource

func (ps PageSources) config(cfg config) {
	for _i := range ps {
		ps[_i].config = cfg
	}
}
