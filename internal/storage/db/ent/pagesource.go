// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/drakejin/crawler/internal/storage/db/ent/pagesource"
	"github.com/google/uuid"
)

// PageSource is the model entity for the PageSource schema.
type PageSource struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// html view source code
	Source           string `json:"source,omitempty"`
	page_page_source *uuid.UUID
}

// scanValues returns the types for scanning values from sql.Rows.
func (*PageSource) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case pagesource.FieldSource:
			values[i] = new(sql.NullString)
		case pagesource.FieldID:
			values[i] = new(uuid.UUID)
		case pagesource.ForeignKeys[0]: // page_page_source
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		default:
			return nil, fmt.Errorf("unexpected column %q for type PageSource", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the PageSource fields.
func (ps *PageSource) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case pagesource.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				ps.ID = *value
			}
		case pagesource.FieldSource:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field source", values[i])
			} else if value.Valid {
				ps.Source = value.String
			}
		case pagesource.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field page_page_source", values[i])
			} else if value.Valid {
				ps.page_page_source = new(uuid.UUID)
				*ps.page_page_source = *value.S.(*uuid.UUID)
			}
		}
	}
	return nil
}

// Update returns a builder for updating this PageSource.
// Note that you need to call PageSource.Unwrap() before calling this method if this PageSource
// was returned from a transaction, and the transaction was committed or rolled back.
func (ps *PageSource) Update() *PageSourceUpdateOne {
	return (&PageSourceClient{config: ps.config}).UpdateOne(ps)
}

// Unwrap unwraps the PageSource entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ps *PageSource) Unwrap() *PageSource {
	_tx, ok := ps.config.driver.(*txDriver)
	if !ok {
		panic("ent: PageSource is not a transactional entity")
	}
	ps.config.driver = _tx.drv
	return ps
}

// String implements the fmt.Stringer.
func (ps *PageSource) String() string {
	var builder strings.Builder
	builder.WriteString("PageSource(")
	builder.WriteString(fmt.Sprintf("id=%v, ", ps.ID))
	builder.WriteString("source=")
	builder.WriteString(ps.Source)
	builder.WriteByte(')')
	return builder.String()
}

// PageSources is a parsable slice of PageSource.
type PageSources []*PageSource

func (ps PageSources) config(cfg config) {
	for _i := range ps {
		ps[_i].config = cfg
	}
}
