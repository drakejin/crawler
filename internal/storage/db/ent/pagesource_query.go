// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"math"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/drakejin/crawler/internal/storage/db/ent/page"
	"github.com/drakejin/crawler/internal/storage/db/ent/pagesource"
	"github.com/drakejin/crawler/internal/storage/db/ent/predicate"
)

// PageSourceQuery is the builder for querying PageSource entities.
type PageSourceQuery struct {
	config
	limit      *int
	offset     *int
	unique     *bool
	order      []OrderFunc
	fields     []string
	predicates []predicate.PageSource
	withPage   *PageQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the PageSourceQuery builder.
func (psq *PageSourceQuery) Where(ps ...predicate.PageSource) *PageSourceQuery {
	psq.predicates = append(psq.predicates, ps...)
	return psq
}

// Limit adds a limit step to the query.
func (psq *PageSourceQuery) Limit(limit int) *PageSourceQuery {
	psq.limit = &limit
	return psq
}

// Offset adds an offset step to the query.
func (psq *PageSourceQuery) Offset(offset int) *PageSourceQuery {
	psq.offset = &offset
	return psq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (psq *PageSourceQuery) Unique(unique bool) *PageSourceQuery {
	psq.unique = &unique
	return psq
}

// Order adds an order step to the query.
func (psq *PageSourceQuery) Order(o ...OrderFunc) *PageSourceQuery {
	psq.order = append(psq.order, o...)
	return psq
}

// QueryPage chains the current query on the "page" edge.
func (psq *PageSourceQuery) QueryPage() *PageQuery {
	query := &PageQuery{config: psq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := psq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := psq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(pagesource.Table, pagesource.FieldID, selector),
			sqlgraph.To(page.Table, page.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, pagesource.PageTable, pagesource.PageColumn),
		)
		fromU = sqlgraph.SetNeighbors(psq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first PageSource entity from the query.
// Returns a *NotFoundError when no PageSource was found.
func (psq *PageSourceQuery) First(ctx context.Context) (*PageSource, error) {
	nodes, err := psq.Limit(1).All(ctx)
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{pagesource.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (psq *PageSourceQuery) FirstX(ctx context.Context) *PageSource {
	node, err := psq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first PageSource ID from the query.
// Returns a *NotFoundError when no PageSource ID was found.
func (psq *PageSourceQuery) FirstID(ctx context.Context) (id string, err error) {
	var ids []string
	if ids, err = psq.Limit(1).IDs(ctx); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{pagesource.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (psq *PageSourceQuery) FirstIDX(ctx context.Context) string {
	id, err := psq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single PageSource entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one PageSource entity is found.
// Returns a *NotFoundError when no PageSource entities are found.
func (psq *PageSourceQuery) Only(ctx context.Context) (*PageSource, error) {
	nodes, err := psq.Limit(2).All(ctx)
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{pagesource.Label}
	default:
		return nil, &NotSingularError{pagesource.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (psq *PageSourceQuery) OnlyX(ctx context.Context) *PageSource {
	node, err := psq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only PageSource ID in the query.
// Returns a *NotSingularError when more than one PageSource ID is found.
// Returns a *NotFoundError when no entities are found.
func (psq *PageSourceQuery) OnlyID(ctx context.Context) (id string, err error) {
	var ids []string
	if ids, err = psq.Limit(2).IDs(ctx); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{pagesource.Label}
	default:
		err = &NotSingularError{pagesource.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (psq *PageSourceQuery) OnlyIDX(ctx context.Context) string {
	id, err := psq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of PageSources.
func (psq *PageSourceQuery) All(ctx context.Context) ([]*PageSource, error) {
	if err := psq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	return psq.sqlAll(ctx)
}

// AllX is like All, but panics if an error occurs.
func (psq *PageSourceQuery) AllX(ctx context.Context) []*PageSource {
	nodes, err := psq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of PageSource IDs.
func (psq *PageSourceQuery) IDs(ctx context.Context) ([]string, error) {
	var ids []string
	if err := psq.Select(pagesource.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (psq *PageSourceQuery) IDsX(ctx context.Context) []string {
	ids, err := psq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (psq *PageSourceQuery) Count(ctx context.Context) (int, error) {
	if err := psq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return psq.sqlCount(ctx)
}

// CountX is like Count, but panics if an error occurs.
func (psq *PageSourceQuery) CountX(ctx context.Context) int {
	count, err := psq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (psq *PageSourceQuery) Exist(ctx context.Context) (bool, error) {
	if err := psq.prepareQuery(ctx); err != nil {
		return false, err
	}
	return psq.sqlExist(ctx)
}

// ExistX is like Exist, but panics if an error occurs.
func (psq *PageSourceQuery) ExistX(ctx context.Context) bool {
	exist, err := psq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the PageSourceQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (psq *PageSourceQuery) Clone() *PageSourceQuery {
	if psq == nil {
		return nil
	}
	return &PageSourceQuery{
		config:     psq.config,
		limit:      psq.limit,
		offset:     psq.offset,
		order:      append([]OrderFunc{}, psq.order...),
		predicates: append([]predicate.PageSource{}, psq.predicates...),
		withPage:   psq.withPage.Clone(),
		// clone intermediate query.
		sql:    psq.sql.Clone(),
		path:   psq.path,
		unique: psq.unique,
	}
}

// WithPage tells the query-builder to eager-load the nodes that are connected to
// the "page" edge. The optional arguments are used to configure the query builder of the edge.
func (psq *PageSourceQuery) WithPage(opts ...func(*PageQuery)) *PageSourceQuery {
	query := &PageQuery{config: psq.config}
	for _, opt := range opts {
		opt(query)
	}
	psq.withPage = query
	return psq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		PageID string `json:"page_id,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.PageSource.Query().
//		GroupBy(pagesource.FieldPageID).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (psq *PageSourceQuery) GroupBy(field string, fields ...string) *PageSourceGroupBy {
	grbuild := &PageSourceGroupBy{config: psq.config}
	grbuild.fields = append([]string{field}, fields...)
	grbuild.path = func(ctx context.Context) (prev *sql.Selector, err error) {
		if err := psq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		return psq.sqlQuery(ctx), nil
	}
	grbuild.label = pagesource.Label
	grbuild.flds, grbuild.scan = &grbuild.fields, grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		PageID string `json:"page_id,omitempty"`
//	}
//
//	client.PageSource.Query().
//		Select(pagesource.FieldPageID).
//		Scan(ctx, &v)
func (psq *PageSourceQuery) Select(fields ...string) *PageSourceSelect {
	psq.fields = append(psq.fields, fields...)
	selbuild := &PageSourceSelect{PageSourceQuery: psq}
	selbuild.label = pagesource.Label
	selbuild.flds, selbuild.scan = &psq.fields, selbuild.Scan
	return selbuild
}

// Aggregate returns a PageSourceSelect configured with the given aggregations.
func (psq *PageSourceQuery) Aggregate(fns ...AggregateFunc) *PageSourceSelect {
	return psq.Select().Aggregate(fns...)
}

func (psq *PageSourceQuery) prepareQuery(ctx context.Context) error {
	for _, f := range psq.fields {
		if !pagesource.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if psq.path != nil {
		prev, err := psq.path(ctx)
		if err != nil {
			return err
		}
		psq.sql = prev
	}
	return nil
}

func (psq *PageSourceQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*PageSource, error) {
	var (
		nodes       = []*PageSource{}
		_spec       = psq.querySpec()
		loadedTypes = [1]bool{
			psq.withPage != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*PageSource).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &PageSource{config: psq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, psq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := psq.withPage; query != nil {
		if err := psq.loadPage(ctx, query, nodes, nil,
			func(n *PageSource, e *Page) { n.Edges.Page = e }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (psq *PageSourceQuery) loadPage(ctx context.Context, query *PageQuery, nodes []*PageSource, init func(*PageSource), assign func(*PageSource, *Page)) error {
	ids := make([]string, 0, len(nodes))
	nodeids := make(map[string][]*PageSource)
	for i := range nodes {
		fk := nodes[i].PageID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	query.Where(page.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "page_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}

func (psq *PageSourceQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := psq.querySpec()
	_spec.Node.Columns = psq.fields
	if len(psq.fields) > 0 {
		_spec.Unique = psq.unique != nil && *psq.unique
	}
	return sqlgraph.CountNodes(ctx, psq.driver, _spec)
}

func (psq *PageSourceQuery) sqlExist(ctx context.Context) (bool, error) {
	switch _, err := psq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

func (psq *PageSourceQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := &sqlgraph.QuerySpec{
		Node: &sqlgraph.NodeSpec{
			Table:   pagesource.Table,
			Columns: pagesource.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: pagesource.FieldID,
			},
		},
		From:   psq.sql,
		Unique: true,
	}
	if unique := psq.unique; unique != nil {
		_spec.Unique = *unique
	}
	if fields := psq.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, pagesource.FieldID)
		for i := range fields {
			if fields[i] != pagesource.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := psq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := psq.limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := psq.offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := psq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (psq *PageSourceQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(psq.driver.Dialect())
	t1 := builder.Table(pagesource.Table)
	columns := psq.fields
	if len(columns) == 0 {
		columns = pagesource.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if psq.sql != nil {
		selector = psq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if psq.unique != nil && *psq.unique {
		selector.Distinct()
	}
	for _, p := range psq.predicates {
		p(selector)
	}
	for _, p := range psq.order {
		p(selector)
	}
	if offset := psq.offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := psq.limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// PageSourceGroupBy is the group-by builder for PageSource entities.
type PageSourceGroupBy struct {
	config
	selector
	fields []string
	fns    []AggregateFunc
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Aggregate adds the given aggregation functions to the group-by query.
func (psgb *PageSourceGroupBy) Aggregate(fns ...AggregateFunc) *PageSourceGroupBy {
	psgb.fns = append(psgb.fns, fns...)
	return psgb
}

// Scan applies the group-by query and scans the result into the given value.
func (psgb *PageSourceGroupBy) Scan(ctx context.Context, v any) error {
	query, err := psgb.path(ctx)
	if err != nil {
		return err
	}
	psgb.sql = query
	return psgb.sqlScan(ctx, v)
}

func (psgb *PageSourceGroupBy) sqlScan(ctx context.Context, v any) error {
	for _, f := range psgb.fields {
		if !pagesource.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("invalid field %q for group-by", f)}
		}
	}
	selector := psgb.sqlQuery()
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := psgb.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

func (psgb *PageSourceGroupBy) sqlQuery() *sql.Selector {
	selector := psgb.sql.Select()
	aggregation := make([]string, 0, len(psgb.fns))
	for _, fn := range psgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(psgb.fields)+len(psgb.fns))
		for _, f := range psgb.fields {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	return selector.GroupBy(selector.Columns(psgb.fields...)...)
}

// PageSourceSelect is the builder for selecting fields of PageSource entities.
type PageSourceSelect struct {
	*PageSourceQuery
	selector
	// intermediate query (i.e. traversal path).
	sql *sql.Selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (pss *PageSourceSelect) Aggregate(fns ...AggregateFunc) *PageSourceSelect {
	pss.fns = append(pss.fns, fns...)
	return pss
}

// Scan applies the selector query and scans the result into the given value.
func (pss *PageSourceSelect) Scan(ctx context.Context, v any) error {
	if err := pss.prepareQuery(ctx); err != nil {
		return err
	}
	pss.sql = pss.PageSourceQuery.sqlQuery(ctx)
	return pss.sqlScan(ctx, v)
}

func (pss *PageSourceSelect) sqlScan(ctx context.Context, v any) error {
	aggregation := make([]string, 0, len(pss.fns))
	for _, fn := range pss.fns {
		aggregation = append(aggregation, fn(pss.sql))
	}
	switch n := len(*pss.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		pss.sql.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		pss.sql.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := pss.sql.Query()
	if err := pss.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
