// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/drakejin/crawler/internal/storage/db/ent/page"
	"github.com/drakejin/crawler/internal/storage/db/ent/pagesource"
)

// PageSourceCreate is the builder for creating a PageSource entity.
type PageSourceCreate struct {
	config
	mutation *PageSourceMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetPageID sets the "page_id" field.
func (psc *PageSourceCreate) SetPageID(s string) *PageSourceCreate {
	psc.mutation.SetPageID(s)
	return psc
}

// SetReferredPageID sets the "referred_page_id" field.
func (psc *PageSourceCreate) SetReferredPageID(s string) *PageSourceCreate {
	psc.mutation.SetReferredPageID(s)
	return psc
}

// SetURL sets the "url" field.
func (psc *PageSourceCreate) SetURL(s string) *PageSourceCreate {
	psc.mutation.SetURL(s)
	return psc
}

// SetNillableURL sets the "url" field if the given value is not nil.
func (psc *PageSourceCreate) SetNillableURL(s *string) *PageSourceCreate {
	if s != nil {
		psc.SetURL(*s)
	}
	return psc
}

// SetReferredURL sets the "referred_url" field.
func (psc *PageSourceCreate) SetReferredURL(s string) *PageSourceCreate {
	psc.mutation.SetReferredURL(s)
	return psc
}

// SetNillableReferredURL sets the "referred_url" field if the given value is not nil.
func (psc *PageSourceCreate) SetNillableReferredURL(s *string) *PageSourceCreate {
	if s != nil {
		psc.SetReferredURL(*s)
	}
	return psc
}

// SetSource sets the "source" field.
func (psc *PageSourceCreate) SetSource(s string) *PageSourceCreate {
	psc.mutation.SetSource(s)
	return psc
}

// SetNillableSource sets the "source" field if the given value is not nil.
func (psc *PageSourceCreate) SetNillableSource(s *string) *PageSourceCreate {
	if s != nil {
		psc.SetSource(*s)
	}
	return psc
}

// SetID sets the "id" field.
func (psc *PageSourceCreate) SetID(s string) *PageSourceCreate {
	psc.mutation.SetID(s)
	return psc
}

// SetPage sets the "page" edge to the Page entity.
func (psc *PageSourceCreate) SetPage(p *Page) *PageSourceCreate {
	return psc.SetPageID(p.ID)
}

// Mutation returns the PageSourceMutation object of the builder.
func (psc *PageSourceCreate) Mutation() *PageSourceMutation {
	return psc.mutation
}

// Save creates the PageSource in the database.
func (psc *PageSourceCreate) Save(ctx context.Context) (*PageSource, error) {
	var (
		err  error
		node *PageSource
	)
	if err := psc.defaults(); err != nil {
		return nil, err
	}
	if len(psc.hooks) == 0 {
		if err = psc.check(); err != nil {
			return nil, err
		}
		node, err = psc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*PageSourceMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = psc.check(); err != nil {
				return nil, err
			}
			psc.mutation = mutation
			if node, err = psc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(psc.hooks) - 1; i >= 0; i-- {
			if psc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = psc.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, psc.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*PageSource)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from PageSourceMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (psc *PageSourceCreate) SaveX(ctx context.Context) *PageSource {
	v, err := psc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (psc *PageSourceCreate) Exec(ctx context.Context) error {
	_, err := psc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (psc *PageSourceCreate) ExecX(ctx context.Context) {
	if err := psc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (psc *PageSourceCreate) defaults() error {
	if _, ok := psc.mutation.URL(); !ok {
		v := pagesource.DefaultURL
		psc.mutation.SetURL(v)
	}
	if _, ok := psc.mutation.ReferredURL(); !ok {
		v := pagesource.DefaultReferredURL
		psc.mutation.SetReferredURL(v)
	}
	if _, ok := psc.mutation.Source(); !ok {
		v := pagesource.DefaultSource
		psc.mutation.SetSource(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (psc *PageSourceCreate) check() error {
	if _, ok := psc.mutation.PageID(); !ok {
		return &ValidationError{Name: "page_id", err: errors.New(`ent: missing required field "PageSource.page_id"`)}
	}
	if _, ok := psc.mutation.ReferredPageID(); !ok {
		return &ValidationError{Name: "referred_page_id", err: errors.New(`ent: missing required field "PageSource.referred_page_id"`)}
	}
	if _, ok := psc.mutation.URL(); !ok {
		return &ValidationError{Name: "url", err: errors.New(`ent: missing required field "PageSource.url"`)}
	}
	if _, ok := psc.mutation.ReferredURL(); !ok {
		return &ValidationError{Name: "referred_url", err: errors.New(`ent: missing required field "PageSource.referred_url"`)}
	}
	if _, ok := psc.mutation.Source(); !ok {
		return &ValidationError{Name: "source", err: errors.New(`ent: missing required field "PageSource.source"`)}
	}
	if _, ok := psc.mutation.PageID(); !ok {
		return &ValidationError{Name: "page", err: errors.New(`ent: missing required edge "PageSource.page"`)}
	}
	return nil
}

func (psc *PageSourceCreate) sqlSave(ctx context.Context) (*PageSource, error) {
	_node, _spec := psc.createSpec()
	if err := sqlgraph.CreateNode(ctx, psc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected PageSource.ID type: %T", _spec.ID.Value)
		}
	}
	return _node, nil
}

func (psc *PageSourceCreate) createSpec() (*PageSource, *sqlgraph.CreateSpec) {
	var (
		_node = &PageSource{config: psc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: pagesource.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: pagesource.FieldID,
			},
		}
	)
	_spec.OnConflict = psc.conflict
	if id, ok := psc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := psc.mutation.ReferredPageID(); ok {
		_spec.SetField(pagesource.FieldReferredPageID, field.TypeString, value)
		_node.ReferredPageID = value
	}
	if value, ok := psc.mutation.URL(); ok {
		_spec.SetField(pagesource.FieldURL, field.TypeString, value)
		_node.URL = value
	}
	if value, ok := psc.mutation.ReferredURL(); ok {
		_spec.SetField(pagesource.FieldReferredURL, field.TypeString, value)
		_node.ReferredURL = value
	}
	if value, ok := psc.mutation.Source(); ok {
		_spec.SetField(pagesource.FieldSource, field.TypeString, value)
		_node.Source = value
	}
	if nodes := psc.mutation.PageIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   pagesource.PageTable,
			Columns: []string{pagesource.PageColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: page.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.PageID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.PageSource.Create().
//		SetPageID(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.PageSourceUpsert) {
//			SetPageID(v+v).
//		}).
//		Exec(ctx)
func (psc *PageSourceCreate) OnConflict(opts ...sql.ConflictOption) *PageSourceUpsertOne {
	psc.conflict = opts
	return &PageSourceUpsertOne{
		create: psc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.PageSource.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (psc *PageSourceCreate) OnConflictColumns(columns ...string) *PageSourceUpsertOne {
	psc.conflict = append(psc.conflict, sql.ConflictColumns(columns...))
	return &PageSourceUpsertOne{
		create: psc,
	}
}

type (
	// PageSourceUpsertOne is the builder for "upsert"-ing
	//  one PageSource node.
	PageSourceUpsertOne struct {
		create *PageSourceCreate
	}

	// PageSourceUpsert is the "OnConflict" setter.
	PageSourceUpsert struct {
		*sql.UpdateSet
	}
)

// SetPageID sets the "page_id" field.
func (u *PageSourceUpsert) SetPageID(v string) *PageSourceUpsert {
	u.Set(pagesource.FieldPageID, v)
	return u
}

// UpdatePageID sets the "page_id" field to the value that was provided on create.
func (u *PageSourceUpsert) UpdatePageID() *PageSourceUpsert {
	u.SetExcluded(pagesource.FieldPageID)
	return u
}

// SetReferredPageID sets the "referred_page_id" field.
func (u *PageSourceUpsert) SetReferredPageID(v string) *PageSourceUpsert {
	u.Set(pagesource.FieldReferredPageID, v)
	return u
}

// UpdateReferredPageID sets the "referred_page_id" field to the value that was provided on create.
func (u *PageSourceUpsert) UpdateReferredPageID() *PageSourceUpsert {
	u.SetExcluded(pagesource.FieldReferredPageID)
	return u
}

// SetURL sets the "url" field.
func (u *PageSourceUpsert) SetURL(v string) *PageSourceUpsert {
	u.Set(pagesource.FieldURL, v)
	return u
}

// UpdateURL sets the "url" field to the value that was provided on create.
func (u *PageSourceUpsert) UpdateURL() *PageSourceUpsert {
	u.SetExcluded(pagesource.FieldURL)
	return u
}

// SetReferredURL sets the "referred_url" field.
func (u *PageSourceUpsert) SetReferredURL(v string) *PageSourceUpsert {
	u.Set(pagesource.FieldReferredURL, v)
	return u
}

// UpdateReferredURL sets the "referred_url" field to the value that was provided on create.
func (u *PageSourceUpsert) UpdateReferredURL() *PageSourceUpsert {
	u.SetExcluded(pagesource.FieldReferredURL)
	return u
}

// SetSource sets the "source" field.
func (u *PageSourceUpsert) SetSource(v string) *PageSourceUpsert {
	u.Set(pagesource.FieldSource, v)
	return u
}

// UpdateSource sets the "source" field to the value that was provided on create.
func (u *PageSourceUpsert) UpdateSource() *PageSourceUpsert {
	u.SetExcluded(pagesource.FieldSource)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.PageSource.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(pagesource.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *PageSourceUpsertOne) UpdateNewValues() *PageSourceUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(pagesource.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.PageSource.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *PageSourceUpsertOne) Ignore() *PageSourceUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *PageSourceUpsertOne) DoNothing() *PageSourceUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the PageSourceCreate.OnConflict
// documentation for more info.
func (u *PageSourceUpsertOne) Update(set func(*PageSourceUpsert)) *PageSourceUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&PageSourceUpsert{UpdateSet: update})
	}))
	return u
}

// SetPageID sets the "page_id" field.
func (u *PageSourceUpsertOne) SetPageID(v string) *PageSourceUpsertOne {
	return u.Update(func(s *PageSourceUpsert) {
		s.SetPageID(v)
	})
}

// UpdatePageID sets the "page_id" field to the value that was provided on create.
func (u *PageSourceUpsertOne) UpdatePageID() *PageSourceUpsertOne {
	return u.Update(func(s *PageSourceUpsert) {
		s.UpdatePageID()
	})
}

// SetReferredPageID sets the "referred_page_id" field.
func (u *PageSourceUpsertOne) SetReferredPageID(v string) *PageSourceUpsertOne {
	return u.Update(func(s *PageSourceUpsert) {
		s.SetReferredPageID(v)
	})
}

// UpdateReferredPageID sets the "referred_page_id" field to the value that was provided on create.
func (u *PageSourceUpsertOne) UpdateReferredPageID() *PageSourceUpsertOne {
	return u.Update(func(s *PageSourceUpsert) {
		s.UpdateReferredPageID()
	})
}

// SetURL sets the "url" field.
func (u *PageSourceUpsertOne) SetURL(v string) *PageSourceUpsertOne {
	return u.Update(func(s *PageSourceUpsert) {
		s.SetURL(v)
	})
}

// UpdateURL sets the "url" field to the value that was provided on create.
func (u *PageSourceUpsertOne) UpdateURL() *PageSourceUpsertOne {
	return u.Update(func(s *PageSourceUpsert) {
		s.UpdateURL()
	})
}

// SetReferredURL sets the "referred_url" field.
func (u *PageSourceUpsertOne) SetReferredURL(v string) *PageSourceUpsertOne {
	return u.Update(func(s *PageSourceUpsert) {
		s.SetReferredURL(v)
	})
}

// UpdateReferredURL sets the "referred_url" field to the value that was provided on create.
func (u *PageSourceUpsertOne) UpdateReferredURL() *PageSourceUpsertOne {
	return u.Update(func(s *PageSourceUpsert) {
		s.UpdateReferredURL()
	})
}

// SetSource sets the "source" field.
func (u *PageSourceUpsertOne) SetSource(v string) *PageSourceUpsertOne {
	return u.Update(func(s *PageSourceUpsert) {
		s.SetSource(v)
	})
}

// UpdateSource sets the "source" field to the value that was provided on create.
func (u *PageSourceUpsertOne) UpdateSource() *PageSourceUpsertOne {
	return u.Update(func(s *PageSourceUpsert) {
		s.UpdateSource()
	})
}

// Exec executes the query.
func (u *PageSourceUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for PageSourceCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *PageSourceUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *PageSourceUpsertOne) ID(ctx context.Context) (id string, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: PageSourceUpsertOne.ID is not supported by MySQL driver. Use PageSourceUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *PageSourceUpsertOne) IDX(ctx context.Context) string {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// PageSourceCreateBulk is the builder for creating many PageSource entities in bulk.
type PageSourceCreateBulk struct {
	config
	builders []*PageSourceCreate
	conflict []sql.ConflictOption
}

// Save creates the PageSource entities in the database.
func (pscb *PageSourceCreateBulk) Save(ctx context.Context) ([]*PageSource, error) {
	specs := make([]*sqlgraph.CreateSpec, len(pscb.builders))
	nodes := make([]*PageSource, len(pscb.builders))
	mutators := make([]Mutator, len(pscb.builders))
	for i := range pscb.builders {
		func(i int, root context.Context) {
			builder := pscb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*PageSourceMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, pscb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = pscb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, pscb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, pscb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (pscb *PageSourceCreateBulk) SaveX(ctx context.Context) []*PageSource {
	v, err := pscb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pscb *PageSourceCreateBulk) Exec(ctx context.Context) error {
	_, err := pscb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pscb *PageSourceCreateBulk) ExecX(ctx context.Context) {
	if err := pscb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.PageSource.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.PageSourceUpsert) {
//			SetPageID(v+v).
//		}).
//		Exec(ctx)
func (pscb *PageSourceCreateBulk) OnConflict(opts ...sql.ConflictOption) *PageSourceUpsertBulk {
	pscb.conflict = opts
	return &PageSourceUpsertBulk{
		create: pscb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.PageSource.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (pscb *PageSourceCreateBulk) OnConflictColumns(columns ...string) *PageSourceUpsertBulk {
	pscb.conflict = append(pscb.conflict, sql.ConflictColumns(columns...))
	return &PageSourceUpsertBulk{
		create: pscb,
	}
}

// PageSourceUpsertBulk is the builder for "upsert"-ing
// a bulk of PageSource nodes.
type PageSourceUpsertBulk struct {
	create *PageSourceCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.PageSource.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(pagesource.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *PageSourceUpsertBulk) UpdateNewValues() *PageSourceUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(pagesource.FieldID)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.PageSource.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *PageSourceUpsertBulk) Ignore() *PageSourceUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *PageSourceUpsertBulk) DoNothing() *PageSourceUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the PageSourceCreateBulk.OnConflict
// documentation for more info.
func (u *PageSourceUpsertBulk) Update(set func(*PageSourceUpsert)) *PageSourceUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&PageSourceUpsert{UpdateSet: update})
	}))
	return u
}

// SetPageID sets the "page_id" field.
func (u *PageSourceUpsertBulk) SetPageID(v string) *PageSourceUpsertBulk {
	return u.Update(func(s *PageSourceUpsert) {
		s.SetPageID(v)
	})
}

// UpdatePageID sets the "page_id" field to the value that was provided on create.
func (u *PageSourceUpsertBulk) UpdatePageID() *PageSourceUpsertBulk {
	return u.Update(func(s *PageSourceUpsert) {
		s.UpdatePageID()
	})
}

// SetReferredPageID sets the "referred_page_id" field.
func (u *PageSourceUpsertBulk) SetReferredPageID(v string) *PageSourceUpsertBulk {
	return u.Update(func(s *PageSourceUpsert) {
		s.SetReferredPageID(v)
	})
}

// UpdateReferredPageID sets the "referred_page_id" field to the value that was provided on create.
func (u *PageSourceUpsertBulk) UpdateReferredPageID() *PageSourceUpsertBulk {
	return u.Update(func(s *PageSourceUpsert) {
		s.UpdateReferredPageID()
	})
}

// SetURL sets the "url" field.
func (u *PageSourceUpsertBulk) SetURL(v string) *PageSourceUpsertBulk {
	return u.Update(func(s *PageSourceUpsert) {
		s.SetURL(v)
	})
}

// UpdateURL sets the "url" field to the value that was provided on create.
func (u *PageSourceUpsertBulk) UpdateURL() *PageSourceUpsertBulk {
	return u.Update(func(s *PageSourceUpsert) {
		s.UpdateURL()
	})
}

// SetReferredURL sets the "referred_url" field.
func (u *PageSourceUpsertBulk) SetReferredURL(v string) *PageSourceUpsertBulk {
	return u.Update(func(s *PageSourceUpsert) {
		s.SetReferredURL(v)
	})
}

// UpdateReferredURL sets the "referred_url" field to the value that was provided on create.
func (u *PageSourceUpsertBulk) UpdateReferredURL() *PageSourceUpsertBulk {
	return u.Update(func(s *PageSourceUpsert) {
		s.UpdateReferredURL()
	})
}

// SetSource sets the "source" field.
func (u *PageSourceUpsertBulk) SetSource(v string) *PageSourceUpsertBulk {
	return u.Update(func(s *PageSourceUpsert) {
		s.SetSource(v)
	})
}

// UpdateSource sets the "source" field to the value that was provided on create.
func (u *PageSourceUpsertBulk) UpdateSource() *PageSourceUpsertBulk {
	return u.Update(func(s *PageSourceUpsert) {
		s.UpdateSource()
	})
}

// Exec executes the query.
func (u *PageSourceUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the PageSourceCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for PageSourceCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *PageSourceUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
