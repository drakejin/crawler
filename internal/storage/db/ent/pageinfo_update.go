// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/drakejin/crawler/internal/storage/db/ent/pageinfo"
	"github.com/drakejin/crawler/internal/storage/db/ent/predicate"
)

// PageInfoUpdate is the builder for updating PageInfo entities.
type PageInfoUpdate struct {
	config
	hooks    []Hook
	mutation *PageInfoMutation
}

// Where appends a list predicates to the PageInfoUpdate builder.
func (piu *PageInfoUpdate) Where(ps ...predicate.PageInfo) *PageInfoUpdate {
	piu.mutation.Where(ps...)
	return piu
}

// SetDomain sets the "domain" field.
func (piu *PageInfoUpdate) SetDomain(s string) *PageInfoUpdate {
	piu.mutation.SetDomain(s)
	return piu
}

// SetPort sets the "port" field.
func (piu *PageInfoUpdate) SetPort(s string) *PageInfoUpdate {
	piu.mutation.SetPort(s)
	return piu
}

// SetNillablePort sets the "port" field if the given value is not nil.
func (piu *PageInfoUpdate) SetNillablePort(s *string) *PageInfoUpdate {
	if s != nil {
		piu.SetPort(*s)
	}
	return piu
}

// SetIsHTTPS sets the "is_https" field.
func (piu *PageInfoUpdate) SetIsHTTPS(b bool) *PageInfoUpdate {
	piu.mutation.SetIsHTTPS(b)
	return piu
}

// SetNillableIsHTTPS sets the "is_https" field if the given value is not nil.
func (piu *PageInfoUpdate) SetNillableIsHTTPS(b *bool) *PageInfoUpdate {
	if b != nil {
		piu.SetIsHTTPS(*b)
	}
	return piu
}

// SetIndexedURL sets the "indexed_url" field.
func (piu *PageInfoUpdate) SetIndexedURL(s string) *PageInfoUpdate {
	piu.mutation.SetIndexedURL(s)
	return piu
}

// SetNillableIndexedURL sets the "indexed_url" field if the given value is not nil.
func (piu *PageInfoUpdate) SetNillableIndexedURL(s *string) *PageInfoUpdate {
	if s != nil {
		piu.SetIndexedURL(*s)
	}
	return piu
}

// SetPath sets the "path" field.
func (piu *PageInfoUpdate) SetPath(s string) *PageInfoUpdate {
	piu.mutation.SetPath(s)
	return piu
}

// SetNillablePath sets the "path" field if the given value is not nil.
func (piu *PageInfoUpdate) SetNillablePath(s *string) *PageInfoUpdate {
	if s != nil {
		piu.SetPath(*s)
	}
	return piu
}

// SetQuerystring sets the "querystring" field.
func (piu *PageInfoUpdate) SetQuerystring(s string) *PageInfoUpdate {
	piu.mutation.SetQuerystring(s)
	return piu
}

// SetNillableQuerystring sets the "querystring" field if the given value is not nil.
func (piu *PageInfoUpdate) SetNillableQuerystring(s *string) *PageInfoUpdate {
	if s != nil {
		piu.SetQuerystring(*s)
	}
	return piu
}

// SetURL sets the "url" field.
func (piu *PageInfoUpdate) SetURL(s string) *PageInfoUpdate {
	piu.mutation.SetURL(s)
	return piu
}

// SetNillableURL sets the "url" field if the given value is not nil.
func (piu *PageInfoUpdate) SetNillableURL(s *string) *PageInfoUpdate {
	if s != nil {
		piu.SetURL(*s)
	}
	return piu
}

// SetCountReferred sets the "count_referred" field.
func (piu *PageInfoUpdate) SetCountReferred(i int64) *PageInfoUpdate {
	piu.mutation.ResetCountReferred()
	piu.mutation.SetCountReferred(i)
	return piu
}

// SetNillableCountReferred sets the "count_referred" field if the given value is not nil.
func (piu *PageInfoUpdate) SetNillableCountReferred(i *int64) *PageInfoUpdate {
	if i != nil {
		piu.SetCountReferred(*i)
	}
	return piu
}

// AddCountReferred adds i to the "count_referred" field.
func (piu *PageInfoUpdate) AddCountReferred(i int64) *PageInfoUpdate {
	piu.mutation.AddCountReferred(i)
	return piu
}

// SetStatus sets the "status" field.
func (piu *PageInfoUpdate) SetStatus(pa pageinfo.Status) *PageInfoUpdate {
	piu.mutation.SetStatus(pa)
	return piu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (piu *PageInfoUpdate) SetNillableStatus(pa *pageinfo.Status) *PageInfoUpdate {
	if pa != nil {
		piu.SetStatus(*pa)
	}
	return piu
}

// SetCreatedBy sets the "created_by" field.
func (piu *PageInfoUpdate) SetCreatedBy(s string) *PageInfoUpdate {
	piu.mutation.SetCreatedBy(s)
	return piu
}

// SetUpdatedAt sets the "updated_at" field.
func (piu *PageInfoUpdate) SetUpdatedAt(t time.Time) *PageInfoUpdate {
	piu.mutation.SetUpdatedAt(t)
	return piu
}

// SetUpdatedBy sets the "updated_by" field.
func (piu *PageInfoUpdate) SetUpdatedBy(s string) *PageInfoUpdate {
	piu.mutation.SetUpdatedBy(s)
	return piu
}

// SetTitle sets the "title" field.
func (piu *PageInfoUpdate) SetTitle(s string) *PageInfoUpdate {
	piu.mutation.SetTitle(s)
	return piu
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (piu *PageInfoUpdate) SetNillableTitle(s *string) *PageInfoUpdate {
	if s != nil {
		piu.SetTitle(*s)
	}
	return piu
}

// SetDescription sets the "description" field.
func (piu *PageInfoUpdate) SetDescription(s string) *PageInfoUpdate {
	piu.mutation.SetDescription(s)
	return piu
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (piu *PageInfoUpdate) SetNillableDescription(s *string) *PageInfoUpdate {
	if s != nil {
		piu.SetDescription(*s)
	}
	return piu
}

// SetKeywords sets the "keywords" field.
func (piu *PageInfoUpdate) SetKeywords(s string) *PageInfoUpdate {
	piu.mutation.SetKeywords(s)
	return piu
}

// SetNillableKeywords sets the "keywords" field if the given value is not nil.
func (piu *PageInfoUpdate) SetNillableKeywords(s *string) *PageInfoUpdate {
	if s != nil {
		piu.SetKeywords(*s)
	}
	return piu
}

// SetContentLanguage sets the "content_language" field.
func (piu *PageInfoUpdate) SetContentLanguage(s string) *PageInfoUpdate {
	piu.mutation.SetContentLanguage(s)
	return piu
}

// SetNillableContentLanguage sets the "content_language" field if the given value is not nil.
func (piu *PageInfoUpdate) SetNillableContentLanguage(s *string) *PageInfoUpdate {
	if s != nil {
		piu.SetContentLanguage(*s)
	}
	return piu
}

// SetTwitterCard sets the "twitter_card" field.
func (piu *PageInfoUpdate) SetTwitterCard(s string) *PageInfoUpdate {
	piu.mutation.SetTwitterCard(s)
	return piu
}

// SetNillableTwitterCard sets the "twitter_card" field if the given value is not nil.
func (piu *PageInfoUpdate) SetNillableTwitterCard(s *string) *PageInfoUpdate {
	if s != nil {
		piu.SetTwitterCard(*s)
	}
	return piu
}

// SetTwitterURL sets the "twitter_url" field.
func (piu *PageInfoUpdate) SetTwitterURL(s string) *PageInfoUpdate {
	piu.mutation.SetTwitterURL(s)
	return piu
}

// SetNillableTwitterURL sets the "twitter_url" field if the given value is not nil.
func (piu *PageInfoUpdate) SetNillableTwitterURL(s *string) *PageInfoUpdate {
	if s != nil {
		piu.SetTwitterURL(*s)
	}
	return piu
}

// SetTwitterTitle sets the "twitter_title" field.
func (piu *PageInfoUpdate) SetTwitterTitle(s string) *PageInfoUpdate {
	piu.mutation.SetTwitterTitle(s)
	return piu
}

// SetNillableTwitterTitle sets the "twitter_title" field if the given value is not nil.
func (piu *PageInfoUpdate) SetNillableTwitterTitle(s *string) *PageInfoUpdate {
	if s != nil {
		piu.SetTwitterTitle(*s)
	}
	return piu
}

// SetTwitterDescription sets the "twitter_description" field.
func (piu *PageInfoUpdate) SetTwitterDescription(s string) *PageInfoUpdate {
	piu.mutation.SetTwitterDescription(s)
	return piu
}

// SetNillableTwitterDescription sets the "twitter_description" field if the given value is not nil.
func (piu *PageInfoUpdate) SetNillableTwitterDescription(s *string) *PageInfoUpdate {
	if s != nil {
		piu.SetTwitterDescription(*s)
	}
	return piu
}

// SetTwitterImage sets the "twitter_image" field.
func (piu *PageInfoUpdate) SetTwitterImage(s string) *PageInfoUpdate {
	piu.mutation.SetTwitterImage(s)
	return piu
}

// SetNillableTwitterImage sets the "twitter_image" field if the given value is not nil.
func (piu *PageInfoUpdate) SetNillableTwitterImage(s *string) *PageInfoUpdate {
	if s != nil {
		piu.SetTwitterImage(*s)
	}
	return piu
}

// SetOgSiteName sets the "og_site_name" field.
func (piu *PageInfoUpdate) SetOgSiteName(s string) *PageInfoUpdate {
	piu.mutation.SetOgSiteName(s)
	return piu
}

// SetNillableOgSiteName sets the "og_site_name" field if the given value is not nil.
func (piu *PageInfoUpdate) SetNillableOgSiteName(s *string) *PageInfoUpdate {
	if s != nil {
		piu.SetOgSiteName(*s)
	}
	return piu
}

// SetOgLocale sets the "og_locale" field.
func (piu *PageInfoUpdate) SetOgLocale(s string) *PageInfoUpdate {
	piu.mutation.SetOgLocale(s)
	return piu
}

// SetNillableOgLocale sets the "og_locale" field if the given value is not nil.
func (piu *PageInfoUpdate) SetNillableOgLocale(s *string) *PageInfoUpdate {
	if s != nil {
		piu.SetOgLocale(*s)
	}
	return piu
}

// SetOgTitle sets the "og_title" field.
func (piu *PageInfoUpdate) SetOgTitle(s string) *PageInfoUpdate {
	piu.mutation.SetOgTitle(s)
	return piu
}

// SetNillableOgTitle sets the "og_title" field if the given value is not nil.
func (piu *PageInfoUpdate) SetNillableOgTitle(s *string) *PageInfoUpdate {
	if s != nil {
		piu.SetOgTitle(*s)
	}
	return piu
}

// SetOgDescription sets the "og_description" field.
func (piu *PageInfoUpdate) SetOgDescription(s string) *PageInfoUpdate {
	piu.mutation.SetOgDescription(s)
	return piu
}

// SetNillableOgDescription sets the "og_description" field if the given value is not nil.
func (piu *PageInfoUpdate) SetNillableOgDescription(s *string) *PageInfoUpdate {
	if s != nil {
		piu.SetOgDescription(*s)
	}
	return piu
}

// SetOgType sets the "og_type" field.
func (piu *PageInfoUpdate) SetOgType(s string) *PageInfoUpdate {
	piu.mutation.SetOgType(s)
	return piu
}

// SetNillableOgType sets the "og_type" field if the given value is not nil.
func (piu *PageInfoUpdate) SetNillableOgType(s *string) *PageInfoUpdate {
	if s != nil {
		piu.SetOgType(*s)
	}
	return piu
}

// SetOgURL sets the "og_url" field.
func (piu *PageInfoUpdate) SetOgURL(s string) *PageInfoUpdate {
	piu.mutation.SetOgURL(s)
	return piu
}

// SetNillableOgURL sets the "og_url" field if the given value is not nil.
func (piu *PageInfoUpdate) SetNillableOgURL(s *string) *PageInfoUpdate {
	if s != nil {
		piu.SetOgURL(*s)
	}
	return piu
}

// SetOgImage sets the "og_image" field.
func (piu *PageInfoUpdate) SetOgImage(s string) *PageInfoUpdate {
	piu.mutation.SetOgImage(s)
	return piu
}

// SetNillableOgImage sets the "og_image" field if the given value is not nil.
func (piu *PageInfoUpdate) SetNillableOgImage(s *string) *PageInfoUpdate {
	if s != nil {
		piu.SetOgImage(*s)
	}
	return piu
}

// SetOgImageType sets the "og_image_type" field.
func (piu *PageInfoUpdate) SetOgImageType(s string) *PageInfoUpdate {
	piu.mutation.SetOgImageType(s)
	return piu
}

// SetNillableOgImageType sets the "og_image_type" field if the given value is not nil.
func (piu *PageInfoUpdate) SetNillableOgImageType(s *string) *PageInfoUpdate {
	if s != nil {
		piu.SetOgImageType(*s)
	}
	return piu
}

// SetOgImageURL sets the "og_image_url" field.
func (piu *PageInfoUpdate) SetOgImageURL(s string) *PageInfoUpdate {
	piu.mutation.SetOgImageURL(s)
	return piu
}

// SetNillableOgImageURL sets the "og_image_url" field if the given value is not nil.
func (piu *PageInfoUpdate) SetNillableOgImageURL(s *string) *PageInfoUpdate {
	if s != nil {
		piu.SetOgImageURL(*s)
	}
	return piu
}

// SetOgImageSecureURL sets the "og_image_secure_url" field.
func (piu *PageInfoUpdate) SetOgImageSecureURL(s string) *PageInfoUpdate {
	piu.mutation.SetOgImageSecureURL(s)
	return piu
}

// SetNillableOgImageSecureURL sets the "og_image_secure_url" field if the given value is not nil.
func (piu *PageInfoUpdate) SetNillableOgImageSecureURL(s *string) *PageInfoUpdate {
	if s != nil {
		piu.SetOgImageSecureURL(*s)
	}
	return piu
}

// SetOgImageWidth sets the "og_image_width" field.
func (piu *PageInfoUpdate) SetOgImageWidth(s string) *PageInfoUpdate {
	piu.mutation.SetOgImageWidth(s)
	return piu
}

// SetNillableOgImageWidth sets the "og_image_width" field if the given value is not nil.
func (piu *PageInfoUpdate) SetNillableOgImageWidth(s *string) *PageInfoUpdate {
	if s != nil {
		piu.SetOgImageWidth(*s)
	}
	return piu
}

// SetOgImageHeight sets the "og_image_height" field.
func (piu *PageInfoUpdate) SetOgImageHeight(s string) *PageInfoUpdate {
	piu.mutation.SetOgImageHeight(s)
	return piu
}

// SetNillableOgImageHeight sets the "og_image_height" field if the given value is not nil.
func (piu *PageInfoUpdate) SetNillableOgImageHeight(s *string) *PageInfoUpdate {
	if s != nil {
		piu.SetOgImageHeight(*s)
	}
	return piu
}

// SetOgVideo sets the "og_video" field.
func (piu *PageInfoUpdate) SetOgVideo(s string) *PageInfoUpdate {
	piu.mutation.SetOgVideo(s)
	return piu
}

// SetNillableOgVideo sets the "og_video" field if the given value is not nil.
func (piu *PageInfoUpdate) SetNillableOgVideo(s *string) *PageInfoUpdate {
	if s != nil {
		piu.SetOgVideo(*s)
	}
	return piu
}

// SetOgVideoType sets the "og_video_type" field.
func (piu *PageInfoUpdate) SetOgVideoType(s string) *PageInfoUpdate {
	piu.mutation.SetOgVideoType(s)
	return piu
}

// SetNillableOgVideoType sets the "og_video_type" field if the given value is not nil.
func (piu *PageInfoUpdate) SetNillableOgVideoType(s *string) *PageInfoUpdate {
	if s != nil {
		piu.SetOgVideoType(*s)
	}
	return piu
}

// SetOgVideoURL sets the "og_video_url" field.
func (piu *PageInfoUpdate) SetOgVideoURL(s string) *PageInfoUpdate {
	piu.mutation.SetOgVideoURL(s)
	return piu
}

// SetNillableOgVideoURL sets the "og_video_url" field if the given value is not nil.
func (piu *PageInfoUpdate) SetNillableOgVideoURL(s *string) *PageInfoUpdate {
	if s != nil {
		piu.SetOgVideoURL(*s)
	}
	return piu
}

// SetOgVideoSecureURL sets the "og_video_secure_url" field.
func (piu *PageInfoUpdate) SetOgVideoSecureURL(s string) *PageInfoUpdate {
	piu.mutation.SetOgVideoSecureURL(s)
	return piu
}

// SetNillableOgVideoSecureURL sets the "og_video_secure_url" field if the given value is not nil.
func (piu *PageInfoUpdate) SetNillableOgVideoSecureURL(s *string) *PageInfoUpdate {
	if s != nil {
		piu.SetOgVideoSecureURL(*s)
	}
	return piu
}

// SetOgVideoWidth sets the "og_video_width" field.
func (piu *PageInfoUpdate) SetOgVideoWidth(s string) *PageInfoUpdate {
	piu.mutation.SetOgVideoWidth(s)
	return piu
}

// SetNillableOgVideoWidth sets the "og_video_width" field if the given value is not nil.
func (piu *PageInfoUpdate) SetNillableOgVideoWidth(s *string) *PageInfoUpdate {
	if s != nil {
		piu.SetOgVideoWidth(*s)
	}
	return piu
}

// SetOgVideoHeight sets the "og_video_height" field.
func (piu *PageInfoUpdate) SetOgVideoHeight(s string) *PageInfoUpdate {
	piu.mutation.SetOgVideoHeight(s)
	return piu
}

// SetNillableOgVideoHeight sets the "og_video_height" field if the given value is not nil.
func (piu *PageInfoUpdate) SetNillableOgVideoHeight(s *string) *PageInfoUpdate {
	if s != nil {
		piu.SetOgVideoHeight(*s)
	}
	return piu
}

// Mutation returns the PageInfoMutation object of the builder.
func (piu *PageInfoUpdate) Mutation() *PageInfoMutation {
	return piu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (piu *PageInfoUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	piu.defaults()
	if len(piu.hooks) == 0 {
		if err = piu.check(); err != nil {
			return 0, err
		}
		affected, err = piu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*PageInfoMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = piu.check(); err != nil {
				return 0, err
			}
			piu.mutation = mutation
			affected, err = piu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(piu.hooks) - 1; i >= 0; i-- {
			if piu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = piu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, piu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (piu *PageInfoUpdate) SaveX(ctx context.Context) int {
	affected, err := piu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (piu *PageInfoUpdate) Exec(ctx context.Context) error {
	_, err := piu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (piu *PageInfoUpdate) ExecX(ctx context.Context) {
	if err := piu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (piu *PageInfoUpdate) defaults() {
	if _, ok := piu.mutation.UpdatedAt(); !ok {
		v := pageinfo.UpdateDefaultUpdatedAt()
		piu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (piu *PageInfoUpdate) check() error {
	if v, ok := piu.mutation.Domain(); ok {
		if err := pageinfo.DomainValidator(v); err != nil {
			return &ValidationError{Name: "domain", err: fmt.Errorf(`ent: validator failed for field "PageInfo.domain": %w`, err)}
		}
	}
	if v, ok := piu.mutation.Port(); ok {
		if err := pageinfo.PortValidator(v); err != nil {
			return &ValidationError{Name: "port", err: fmt.Errorf(`ent: validator failed for field "PageInfo.port": %w`, err)}
		}
	}
	if v, ok := piu.mutation.IndexedURL(); ok {
		if err := pageinfo.IndexedURLValidator(v); err != nil {
			return &ValidationError{Name: "indexed_url", err: fmt.Errorf(`ent: validator failed for field "PageInfo.indexed_url": %w`, err)}
		}
	}
	if v, ok := piu.mutation.Path(); ok {
		if err := pageinfo.PathValidator(v); err != nil {
			return &ValidationError{Name: "path", err: fmt.Errorf(`ent: validator failed for field "PageInfo.path": %w`, err)}
		}
	}
	if v, ok := piu.mutation.Status(); ok {
		if err := pageinfo.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "PageInfo.status": %w`, err)}
		}
	}
	if v, ok := piu.mutation.CreatedBy(); ok {
		if err := pageinfo.CreatedByValidator(v); err != nil {
			return &ValidationError{Name: "created_by", err: fmt.Errorf(`ent: validator failed for field "PageInfo.created_by": %w`, err)}
		}
	}
	if v, ok := piu.mutation.UpdatedBy(); ok {
		if err := pageinfo.UpdatedByValidator(v); err != nil {
			return &ValidationError{Name: "updated_by", err: fmt.Errorf(`ent: validator failed for field "PageInfo.updated_by": %w`, err)}
		}
	}
	return nil
}

func (piu *PageInfoUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   pageinfo.Table,
			Columns: pageinfo.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: pageinfo.FieldID,
			},
		},
	}
	if ps := piu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := piu.mutation.Domain(); ok {
		_spec.SetField(pageinfo.FieldDomain, field.TypeString, value)
	}
	if value, ok := piu.mutation.Port(); ok {
		_spec.SetField(pageinfo.FieldPort, field.TypeString, value)
	}
	if value, ok := piu.mutation.IsHTTPS(); ok {
		_spec.SetField(pageinfo.FieldIsHTTPS, field.TypeBool, value)
	}
	if value, ok := piu.mutation.IndexedURL(); ok {
		_spec.SetField(pageinfo.FieldIndexedURL, field.TypeString, value)
	}
	if value, ok := piu.mutation.Path(); ok {
		_spec.SetField(pageinfo.FieldPath, field.TypeString, value)
	}
	if value, ok := piu.mutation.Querystring(); ok {
		_spec.SetField(pageinfo.FieldQuerystring, field.TypeString, value)
	}
	if value, ok := piu.mutation.URL(); ok {
		_spec.SetField(pageinfo.FieldURL, field.TypeString, value)
	}
	if value, ok := piu.mutation.CountReferred(); ok {
		_spec.SetField(pageinfo.FieldCountReferred, field.TypeInt64, value)
	}
	if value, ok := piu.mutation.AddedCountReferred(); ok {
		_spec.AddField(pageinfo.FieldCountReferred, field.TypeInt64, value)
	}
	if value, ok := piu.mutation.Status(); ok {
		_spec.SetField(pageinfo.FieldStatus, field.TypeEnum, value)
	}
	if value, ok := piu.mutation.CreatedBy(); ok {
		_spec.SetField(pageinfo.FieldCreatedBy, field.TypeString, value)
	}
	if value, ok := piu.mutation.UpdatedAt(); ok {
		_spec.SetField(pageinfo.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := piu.mutation.UpdatedBy(); ok {
		_spec.SetField(pageinfo.FieldUpdatedBy, field.TypeString, value)
	}
	if value, ok := piu.mutation.Title(); ok {
		_spec.SetField(pageinfo.FieldTitle, field.TypeString, value)
	}
	if value, ok := piu.mutation.Description(); ok {
		_spec.SetField(pageinfo.FieldDescription, field.TypeString, value)
	}
	if value, ok := piu.mutation.Keywords(); ok {
		_spec.SetField(pageinfo.FieldKeywords, field.TypeString, value)
	}
	if value, ok := piu.mutation.ContentLanguage(); ok {
		_spec.SetField(pageinfo.FieldContentLanguage, field.TypeString, value)
	}
	if value, ok := piu.mutation.TwitterCard(); ok {
		_spec.SetField(pageinfo.FieldTwitterCard, field.TypeString, value)
	}
	if value, ok := piu.mutation.TwitterURL(); ok {
		_spec.SetField(pageinfo.FieldTwitterURL, field.TypeString, value)
	}
	if value, ok := piu.mutation.TwitterTitle(); ok {
		_spec.SetField(pageinfo.FieldTwitterTitle, field.TypeString, value)
	}
	if value, ok := piu.mutation.TwitterDescription(); ok {
		_spec.SetField(pageinfo.FieldTwitterDescription, field.TypeString, value)
	}
	if value, ok := piu.mutation.TwitterImage(); ok {
		_spec.SetField(pageinfo.FieldTwitterImage, field.TypeString, value)
	}
	if value, ok := piu.mutation.OgSiteName(); ok {
		_spec.SetField(pageinfo.FieldOgSiteName, field.TypeString, value)
	}
	if value, ok := piu.mutation.OgLocale(); ok {
		_spec.SetField(pageinfo.FieldOgLocale, field.TypeString, value)
	}
	if value, ok := piu.mutation.OgTitle(); ok {
		_spec.SetField(pageinfo.FieldOgTitle, field.TypeString, value)
	}
	if value, ok := piu.mutation.OgDescription(); ok {
		_spec.SetField(pageinfo.FieldOgDescription, field.TypeString, value)
	}
	if value, ok := piu.mutation.OgType(); ok {
		_spec.SetField(pageinfo.FieldOgType, field.TypeString, value)
	}
	if value, ok := piu.mutation.OgURL(); ok {
		_spec.SetField(pageinfo.FieldOgURL, field.TypeString, value)
	}
	if value, ok := piu.mutation.OgImage(); ok {
		_spec.SetField(pageinfo.FieldOgImage, field.TypeString, value)
	}
	if value, ok := piu.mutation.OgImageType(); ok {
		_spec.SetField(pageinfo.FieldOgImageType, field.TypeString, value)
	}
	if value, ok := piu.mutation.OgImageURL(); ok {
		_spec.SetField(pageinfo.FieldOgImageURL, field.TypeString, value)
	}
	if value, ok := piu.mutation.OgImageSecureURL(); ok {
		_spec.SetField(pageinfo.FieldOgImageSecureURL, field.TypeString, value)
	}
	if value, ok := piu.mutation.OgImageWidth(); ok {
		_spec.SetField(pageinfo.FieldOgImageWidth, field.TypeString, value)
	}
	if value, ok := piu.mutation.OgImageHeight(); ok {
		_spec.SetField(pageinfo.FieldOgImageHeight, field.TypeString, value)
	}
	if value, ok := piu.mutation.OgVideo(); ok {
		_spec.SetField(pageinfo.FieldOgVideo, field.TypeString, value)
	}
	if value, ok := piu.mutation.OgVideoType(); ok {
		_spec.SetField(pageinfo.FieldOgVideoType, field.TypeString, value)
	}
	if value, ok := piu.mutation.OgVideoURL(); ok {
		_spec.SetField(pageinfo.FieldOgVideoURL, field.TypeString, value)
	}
	if value, ok := piu.mutation.OgVideoSecureURL(); ok {
		_spec.SetField(pageinfo.FieldOgVideoSecureURL, field.TypeString, value)
	}
	if value, ok := piu.mutation.OgVideoWidth(); ok {
		_spec.SetField(pageinfo.FieldOgVideoWidth, field.TypeString, value)
	}
	if value, ok := piu.mutation.OgVideoHeight(); ok {
		_spec.SetField(pageinfo.FieldOgVideoHeight, field.TypeString, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, piu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{pageinfo.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	return n, nil
}

// PageInfoUpdateOne is the builder for updating a single PageInfo entity.
type PageInfoUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *PageInfoMutation
}

// SetDomain sets the "domain" field.
func (piuo *PageInfoUpdateOne) SetDomain(s string) *PageInfoUpdateOne {
	piuo.mutation.SetDomain(s)
	return piuo
}

// SetPort sets the "port" field.
func (piuo *PageInfoUpdateOne) SetPort(s string) *PageInfoUpdateOne {
	piuo.mutation.SetPort(s)
	return piuo
}

// SetNillablePort sets the "port" field if the given value is not nil.
func (piuo *PageInfoUpdateOne) SetNillablePort(s *string) *PageInfoUpdateOne {
	if s != nil {
		piuo.SetPort(*s)
	}
	return piuo
}

// SetIsHTTPS sets the "is_https" field.
func (piuo *PageInfoUpdateOne) SetIsHTTPS(b bool) *PageInfoUpdateOne {
	piuo.mutation.SetIsHTTPS(b)
	return piuo
}

// SetNillableIsHTTPS sets the "is_https" field if the given value is not nil.
func (piuo *PageInfoUpdateOne) SetNillableIsHTTPS(b *bool) *PageInfoUpdateOne {
	if b != nil {
		piuo.SetIsHTTPS(*b)
	}
	return piuo
}

// SetIndexedURL sets the "indexed_url" field.
func (piuo *PageInfoUpdateOne) SetIndexedURL(s string) *PageInfoUpdateOne {
	piuo.mutation.SetIndexedURL(s)
	return piuo
}

// SetNillableIndexedURL sets the "indexed_url" field if the given value is not nil.
func (piuo *PageInfoUpdateOne) SetNillableIndexedURL(s *string) *PageInfoUpdateOne {
	if s != nil {
		piuo.SetIndexedURL(*s)
	}
	return piuo
}

// SetPath sets the "path" field.
func (piuo *PageInfoUpdateOne) SetPath(s string) *PageInfoUpdateOne {
	piuo.mutation.SetPath(s)
	return piuo
}

// SetNillablePath sets the "path" field if the given value is not nil.
func (piuo *PageInfoUpdateOne) SetNillablePath(s *string) *PageInfoUpdateOne {
	if s != nil {
		piuo.SetPath(*s)
	}
	return piuo
}

// SetQuerystring sets the "querystring" field.
func (piuo *PageInfoUpdateOne) SetQuerystring(s string) *PageInfoUpdateOne {
	piuo.mutation.SetQuerystring(s)
	return piuo
}

// SetNillableQuerystring sets the "querystring" field if the given value is not nil.
func (piuo *PageInfoUpdateOne) SetNillableQuerystring(s *string) *PageInfoUpdateOne {
	if s != nil {
		piuo.SetQuerystring(*s)
	}
	return piuo
}

// SetURL sets the "url" field.
func (piuo *PageInfoUpdateOne) SetURL(s string) *PageInfoUpdateOne {
	piuo.mutation.SetURL(s)
	return piuo
}

// SetNillableURL sets the "url" field if the given value is not nil.
func (piuo *PageInfoUpdateOne) SetNillableURL(s *string) *PageInfoUpdateOne {
	if s != nil {
		piuo.SetURL(*s)
	}
	return piuo
}

// SetCountReferred sets the "count_referred" field.
func (piuo *PageInfoUpdateOne) SetCountReferred(i int64) *PageInfoUpdateOne {
	piuo.mutation.ResetCountReferred()
	piuo.mutation.SetCountReferred(i)
	return piuo
}

// SetNillableCountReferred sets the "count_referred" field if the given value is not nil.
func (piuo *PageInfoUpdateOne) SetNillableCountReferred(i *int64) *PageInfoUpdateOne {
	if i != nil {
		piuo.SetCountReferred(*i)
	}
	return piuo
}

// AddCountReferred adds i to the "count_referred" field.
func (piuo *PageInfoUpdateOne) AddCountReferred(i int64) *PageInfoUpdateOne {
	piuo.mutation.AddCountReferred(i)
	return piuo
}

// SetStatus sets the "status" field.
func (piuo *PageInfoUpdateOne) SetStatus(pa pageinfo.Status) *PageInfoUpdateOne {
	piuo.mutation.SetStatus(pa)
	return piuo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (piuo *PageInfoUpdateOne) SetNillableStatus(pa *pageinfo.Status) *PageInfoUpdateOne {
	if pa != nil {
		piuo.SetStatus(*pa)
	}
	return piuo
}

// SetCreatedBy sets the "created_by" field.
func (piuo *PageInfoUpdateOne) SetCreatedBy(s string) *PageInfoUpdateOne {
	piuo.mutation.SetCreatedBy(s)
	return piuo
}

// SetUpdatedAt sets the "updated_at" field.
func (piuo *PageInfoUpdateOne) SetUpdatedAt(t time.Time) *PageInfoUpdateOne {
	piuo.mutation.SetUpdatedAt(t)
	return piuo
}

// SetUpdatedBy sets the "updated_by" field.
func (piuo *PageInfoUpdateOne) SetUpdatedBy(s string) *PageInfoUpdateOne {
	piuo.mutation.SetUpdatedBy(s)
	return piuo
}

// SetTitle sets the "title" field.
func (piuo *PageInfoUpdateOne) SetTitle(s string) *PageInfoUpdateOne {
	piuo.mutation.SetTitle(s)
	return piuo
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (piuo *PageInfoUpdateOne) SetNillableTitle(s *string) *PageInfoUpdateOne {
	if s != nil {
		piuo.SetTitle(*s)
	}
	return piuo
}

// SetDescription sets the "description" field.
func (piuo *PageInfoUpdateOne) SetDescription(s string) *PageInfoUpdateOne {
	piuo.mutation.SetDescription(s)
	return piuo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (piuo *PageInfoUpdateOne) SetNillableDescription(s *string) *PageInfoUpdateOne {
	if s != nil {
		piuo.SetDescription(*s)
	}
	return piuo
}

// SetKeywords sets the "keywords" field.
func (piuo *PageInfoUpdateOne) SetKeywords(s string) *PageInfoUpdateOne {
	piuo.mutation.SetKeywords(s)
	return piuo
}

// SetNillableKeywords sets the "keywords" field if the given value is not nil.
func (piuo *PageInfoUpdateOne) SetNillableKeywords(s *string) *PageInfoUpdateOne {
	if s != nil {
		piuo.SetKeywords(*s)
	}
	return piuo
}

// SetContentLanguage sets the "content_language" field.
func (piuo *PageInfoUpdateOne) SetContentLanguage(s string) *PageInfoUpdateOne {
	piuo.mutation.SetContentLanguage(s)
	return piuo
}

// SetNillableContentLanguage sets the "content_language" field if the given value is not nil.
func (piuo *PageInfoUpdateOne) SetNillableContentLanguage(s *string) *PageInfoUpdateOne {
	if s != nil {
		piuo.SetContentLanguage(*s)
	}
	return piuo
}

// SetTwitterCard sets the "twitter_card" field.
func (piuo *PageInfoUpdateOne) SetTwitterCard(s string) *PageInfoUpdateOne {
	piuo.mutation.SetTwitterCard(s)
	return piuo
}

// SetNillableTwitterCard sets the "twitter_card" field if the given value is not nil.
func (piuo *PageInfoUpdateOne) SetNillableTwitterCard(s *string) *PageInfoUpdateOne {
	if s != nil {
		piuo.SetTwitterCard(*s)
	}
	return piuo
}

// SetTwitterURL sets the "twitter_url" field.
func (piuo *PageInfoUpdateOne) SetTwitterURL(s string) *PageInfoUpdateOne {
	piuo.mutation.SetTwitterURL(s)
	return piuo
}

// SetNillableTwitterURL sets the "twitter_url" field if the given value is not nil.
func (piuo *PageInfoUpdateOne) SetNillableTwitterURL(s *string) *PageInfoUpdateOne {
	if s != nil {
		piuo.SetTwitterURL(*s)
	}
	return piuo
}

// SetTwitterTitle sets the "twitter_title" field.
func (piuo *PageInfoUpdateOne) SetTwitterTitle(s string) *PageInfoUpdateOne {
	piuo.mutation.SetTwitterTitle(s)
	return piuo
}

// SetNillableTwitterTitle sets the "twitter_title" field if the given value is not nil.
func (piuo *PageInfoUpdateOne) SetNillableTwitterTitle(s *string) *PageInfoUpdateOne {
	if s != nil {
		piuo.SetTwitterTitle(*s)
	}
	return piuo
}

// SetTwitterDescription sets the "twitter_description" field.
func (piuo *PageInfoUpdateOne) SetTwitterDescription(s string) *PageInfoUpdateOne {
	piuo.mutation.SetTwitterDescription(s)
	return piuo
}

// SetNillableTwitterDescription sets the "twitter_description" field if the given value is not nil.
func (piuo *PageInfoUpdateOne) SetNillableTwitterDescription(s *string) *PageInfoUpdateOne {
	if s != nil {
		piuo.SetTwitterDescription(*s)
	}
	return piuo
}

// SetTwitterImage sets the "twitter_image" field.
func (piuo *PageInfoUpdateOne) SetTwitterImage(s string) *PageInfoUpdateOne {
	piuo.mutation.SetTwitterImage(s)
	return piuo
}

// SetNillableTwitterImage sets the "twitter_image" field if the given value is not nil.
func (piuo *PageInfoUpdateOne) SetNillableTwitterImage(s *string) *PageInfoUpdateOne {
	if s != nil {
		piuo.SetTwitterImage(*s)
	}
	return piuo
}

// SetOgSiteName sets the "og_site_name" field.
func (piuo *PageInfoUpdateOne) SetOgSiteName(s string) *PageInfoUpdateOne {
	piuo.mutation.SetOgSiteName(s)
	return piuo
}

// SetNillableOgSiteName sets the "og_site_name" field if the given value is not nil.
func (piuo *PageInfoUpdateOne) SetNillableOgSiteName(s *string) *PageInfoUpdateOne {
	if s != nil {
		piuo.SetOgSiteName(*s)
	}
	return piuo
}

// SetOgLocale sets the "og_locale" field.
func (piuo *PageInfoUpdateOne) SetOgLocale(s string) *PageInfoUpdateOne {
	piuo.mutation.SetOgLocale(s)
	return piuo
}

// SetNillableOgLocale sets the "og_locale" field if the given value is not nil.
func (piuo *PageInfoUpdateOne) SetNillableOgLocale(s *string) *PageInfoUpdateOne {
	if s != nil {
		piuo.SetOgLocale(*s)
	}
	return piuo
}

// SetOgTitle sets the "og_title" field.
func (piuo *PageInfoUpdateOne) SetOgTitle(s string) *PageInfoUpdateOne {
	piuo.mutation.SetOgTitle(s)
	return piuo
}

// SetNillableOgTitle sets the "og_title" field if the given value is not nil.
func (piuo *PageInfoUpdateOne) SetNillableOgTitle(s *string) *PageInfoUpdateOne {
	if s != nil {
		piuo.SetOgTitle(*s)
	}
	return piuo
}

// SetOgDescription sets the "og_description" field.
func (piuo *PageInfoUpdateOne) SetOgDescription(s string) *PageInfoUpdateOne {
	piuo.mutation.SetOgDescription(s)
	return piuo
}

// SetNillableOgDescription sets the "og_description" field if the given value is not nil.
func (piuo *PageInfoUpdateOne) SetNillableOgDescription(s *string) *PageInfoUpdateOne {
	if s != nil {
		piuo.SetOgDescription(*s)
	}
	return piuo
}

// SetOgType sets the "og_type" field.
func (piuo *PageInfoUpdateOne) SetOgType(s string) *PageInfoUpdateOne {
	piuo.mutation.SetOgType(s)
	return piuo
}

// SetNillableOgType sets the "og_type" field if the given value is not nil.
func (piuo *PageInfoUpdateOne) SetNillableOgType(s *string) *PageInfoUpdateOne {
	if s != nil {
		piuo.SetOgType(*s)
	}
	return piuo
}

// SetOgURL sets the "og_url" field.
func (piuo *PageInfoUpdateOne) SetOgURL(s string) *PageInfoUpdateOne {
	piuo.mutation.SetOgURL(s)
	return piuo
}

// SetNillableOgURL sets the "og_url" field if the given value is not nil.
func (piuo *PageInfoUpdateOne) SetNillableOgURL(s *string) *PageInfoUpdateOne {
	if s != nil {
		piuo.SetOgURL(*s)
	}
	return piuo
}

// SetOgImage sets the "og_image" field.
func (piuo *PageInfoUpdateOne) SetOgImage(s string) *PageInfoUpdateOne {
	piuo.mutation.SetOgImage(s)
	return piuo
}

// SetNillableOgImage sets the "og_image" field if the given value is not nil.
func (piuo *PageInfoUpdateOne) SetNillableOgImage(s *string) *PageInfoUpdateOne {
	if s != nil {
		piuo.SetOgImage(*s)
	}
	return piuo
}

// SetOgImageType sets the "og_image_type" field.
func (piuo *PageInfoUpdateOne) SetOgImageType(s string) *PageInfoUpdateOne {
	piuo.mutation.SetOgImageType(s)
	return piuo
}

// SetNillableOgImageType sets the "og_image_type" field if the given value is not nil.
func (piuo *PageInfoUpdateOne) SetNillableOgImageType(s *string) *PageInfoUpdateOne {
	if s != nil {
		piuo.SetOgImageType(*s)
	}
	return piuo
}

// SetOgImageURL sets the "og_image_url" field.
func (piuo *PageInfoUpdateOne) SetOgImageURL(s string) *PageInfoUpdateOne {
	piuo.mutation.SetOgImageURL(s)
	return piuo
}

// SetNillableOgImageURL sets the "og_image_url" field if the given value is not nil.
func (piuo *PageInfoUpdateOne) SetNillableOgImageURL(s *string) *PageInfoUpdateOne {
	if s != nil {
		piuo.SetOgImageURL(*s)
	}
	return piuo
}

// SetOgImageSecureURL sets the "og_image_secure_url" field.
func (piuo *PageInfoUpdateOne) SetOgImageSecureURL(s string) *PageInfoUpdateOne {
	piuo.mutation.SetOgImageSecureURL(s)
	return piuo
}

// SetNillableOgImageSecureURL sets the "og_image_secure_url" field if the given value is not nil.
func (piuo *PageInfoUpdateOne) SetNillableOgImageSecureURL(s *string) *PageInfoUpdateOne {
	if s != nil {
		piuo.SetOgImageSecureURL(*s)
	}
	return piuo
}

// SetOgImageWidth sets the "og_image_width" field.
func (piuo *PageInfoUpdateOne) SetOgImageWidth(s string) *PageInfoUpdateOne {
	piuo.mutation.SetOgImageWidth(s)
	return piuo
}

// SetNillableOgImageWidth sets the "og_image_width" field if the given value is not nil.
func (piuo *PageInfoUpdateOne) SetNillableOgImageWidth(s *string) *PageInfoUpdateOne {
	if s != nil {
		piuo.SetOgImageWidth(*s)
	}
	return piuo
}

// SetOgImageHeight sets the "og_image_height" field.
func (piuo *PageInfoUpdateOne) SetOgImageHeight(s string) *PageInfoUpdateOne {
	piuo.mutation.SetOgImageHeight(s)
	return piuo
}

// SetNillableOgImageHeight sets the "og_image_height" field if the given value is not nil.
func (piuo *PageInfoUpdateOne) SetNillableOgImageHeight(s *string) *PageInfoUpdateOne {
	if s != nil {
		piuo.SetOgImageHeight(*s)
	}
	return piuo
}

// SetOgVideo sets the "og_video" field.
func (piuo *PageInfoUpdateOne) SetOgVideo(s string) *PageInfoUpdateOne {
	piuo.mutation.SetOgVideo(s)
	return piuo
}

// SetNillableOgVideo sets the "og_video" field if the given value is not nil.
func (piuo *PageInfoUpdateOne) SetNillableOgVideo(s *string) *PageInfoUpdateOne {
	if s != nil {
		piuo.SetOgVideo(*s)
	}
	return piuo
}

// SetOgVideoType sets the "og_video_type" field.
func (piuo *PageInfoUpdateOne) SetOgVideoType(s string) *PageInfoUpdateOne {
	piuo.mutation.SetOgVideoType(s)
	return piuo
}

// SetNillableOgVideoType sets the "og_video_type" field if the given value is not nil.
func (piuo *PageInfoUpdateOne) SetNillableOgVideoType(s *string) *PageInfoUpdateOne {
	if s != nil {
		piuo.SetOgVideoType(*s)
	}
	return piuo
}

// SetOgVideoURL sets the "og_video_url" field.
func (piuo *PageInfoUpdateOne) SetOgVideoURL(s string) *PageInfoUpdateOne {
	piuo.mutation.SetOgVideoURL(s)
	return piuo
}

// SetNillableOgVideoURL sets the "og_video_url" field if the given value is not nil.
func (piuo *PageInfoUpdateOne) SetNillableOgVideoURL(s *string) *PageInfoUpdateOne {
	if s != nil {
		piuo.SetOgVideoURL(*s)
	}
	return piuo
}

// SetOgVideoSecureURL sets the "og_video_secure_url" field.
func (piuo *PageInfoUpdateOne) SetOgVideoSecureURL(s string) *PageInfoUpdateOne {
	piuo.mutation.SetOgVideoSecureURL(s)
	return piuo
}

// SetNillableOgVideoSecureURL sets the "og_video_secure_url" field if the given value is not nil.
func (piuo *PageInfoUpdateOne) SetNillableOgVideoSecureURL(s *string) *PageInfoUpdateOne {
	if s != nil {
		piuo.SetOgVideoSecureURL(*s)
	}
	return piuo
}

// SetOgVideoWidth sets the "og_video_width" field.
func (piuo *PageInfoUpdateOne) SetOgVideoWidth(s string) *PageInfoUpdateOne {
	piuo.mutation.SetOgVideoWidth(s)
	return piuo
}

// SetNillableOgVideoWidth sets the "og_video_width" field if the given value is not nil.
func (piuo *PageInfoUpdateOne) SetNillableOgVideoWidth(s *string) *PageInfoUpdateOne {
	if s != nil {
		piuo.SetOgVideoWidth(*s)
	}
	return piuo
}

// SetOgVideoHeight sets the "og_video_height" field.
func (piuo *PageInfoUpdateOne) SetOgVideoHeight(s string) *PageInfoUpdateOne {
	piuo.mutation.SetOgVideoHeight(s)
	return piuo
}

// SetNillableOgVideoHeight sets the "og_video_height" field if the given value is not nil.
func (piuo *PageInfoUpdateOne) SetNillableOgVideoHeight(s *string) *PageInfoUpdateOne {
	if s != nil {
		piuo.SetOgVideoHeight(*s)
	}
	return piuo
}

// Mutation returns the PageInfoMutation object of the builder.
func (piuo *PageInfoUpdateOne) Mutation() *PageInfoMutation {
	return piuo.mutation
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (piuo *PageInfoUpdateOne) Select(field string, fields ...string) *PageInfoUpdateOne {
	piuo.fields = append([]string{field}, fields...)
	return piuo
}

// Save executes the query and returns the updated PageInfo entity.
func (piuo *PageInfoUpdateOne) Save(ctx context.Context) (*PageInfo, error) {
	var (
		err  error
		node *PageInfo
	)
	piuo.defaults()
	if len(piuo.hooks) == 0 {
		if err = piuo.check(); err != nil {
			return nil, err
		}
		node, err = piuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*PageInfoMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = piuo.check(); err != nil {
				return nil, err
			}
			piuo.mutation = mutation
			node, err = piuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(piuo.hooks) - 1; i >= 0; i-- {
			if piuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = piuo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, piuo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*PageInfo)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from PageInfoMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (piuo *PageInfoUpdateOne) SaveX(ctx context.Context) *PageInfo {
	node, err := piuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (piuo *PageInfoUpdateOne) Exec(ctx context.Context) error {
	_, err := piuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (piuo *PageInfoUpdateOne) ExecX(ctx context.Context) {
	if err := piuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (piuo *PageInfoUpdateOne) defaults() {
	if _, ok := piuo.mutation.UpdatedAt(); !ok {
		v := pageinfo.UpdateDefaultUpdatedAt()
		piuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (piuo *PageInfoUpdateOne) check() error {
	if v, ok := piuo.mutation.Domain(); ok {
		if err := pageinfo.DomainValidator(v); err != nil {
			return &ValidationError{Name: "domain", err: fmt.Errorf(`ent: validator failed for field "PageInfo.domain": %w`, err)}
		}
	}
	if v, ok := piuo.mutation.Port(); ok {
		if err := pageinfo.PortValidator(v); err != nil {
			return &ValidationError{Name: "port", err: fmt.Errorf(`ent: validator failed for field "PageInfo.port": %w`, err)}
		}
	}
	if v, ok := piuo.mutation.IndexedURL(); ok {
		if err := pageinfo.IndexedURLValidator(v); err != nil {
			return &ValidationError{Name: "indexed_url", err: fmt.Errorf(`ent: validator failed for field "PageInfo.indexed_url": %w`, err)}
		}
	}
	if v, ok := piuo.mutation.Path(); ok {
		if err := pageinfo.PathValidator(v); err != nil {
			return &ValidationError{Name: "path", err: fmt.Errorf(`ent: validator failed for field "PageInfo.path": %w`, err)}
		}
	}
	if v, ok := piuo.mutation.Status(); ok {
		if err := pageinfo.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "PageInfo.status": %w`, err)}
		}
	}
	if v, ok := piuo.mutation.CreatedBy(); ok {
		if err := pageinfo.CreatedByValidator(v); err != nil {
			return &ValidationError{Name: "created_by", err: fmt.Errorf(`ent: validator failed for field "PageInfo.created_by": %w`, err)}
		}
	}
	if v, ok := piuo.mutation.UpdatedBy(); ok {
		if err := pageinfo.UpdatedByValidator(v); err != nil {
			return &ValidationError{Name: "updated_by", err: fmt.Errorf(`ent: validator failed for field "PageInfo.updated_by": %w`, err)}
		}
	}
	return nil
}

func (piuo *PageInfoUpdateOne) sqlSave(ctx context.Context) (_node *PageInfo, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   pageinfo.Table,
			Columns: pageinfo.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: pageinfo.FieldID,
			},
		},
	}
	id, ok := piuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "PageInfo.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := piuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, pageinfo.FieldID)
		for _, f := range fields {
			if !pageinfo.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != pageinfo.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := piuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := piuo.mutation.Domain(); ok {
		_spec.SetField(pageinfo.FieldDomain, field.TypeString, value)
	}
	if value, ok := piuo.mutation.Port(); ok {
		_spec.SetField(pageinfo.FieldPort, field.TypeString, value)
	}
	if value, ok := piuo.mutation.IsHTTPS(); ok {
		_spec.SetField(pageinfo.FieldIsHTTPS, field.TypeBool, value)
	}
	if value, ok := piuo.mutation.IndexedURL(); ok {
		_spec.SetField(pageinfo.FieldIndexedURL, field.TypeString, value)
	}
	if value, ok := piuo.mutation.Path(); ok {
		_spec.SetField(pageinfo.FieldPath, field.TypeString, value)
	}
	if value, ok := piuo.mutation.Querystring(); ok {
		_spec.SetField(pageinfo.FieldQuerystring, field.TypeString, value)
	}
	if value, ok := piuo.mutation.URL(); ok {
		_spec.SetField(pageinfo.FieldURL, field.TypeString, value)
	}
	if value, ok := piuo.mutation.CountReferred(); ok {
		_spec.SetField(pageinfo.FieldCountReferred, field.TypeInt64, value)
	}
	if value, ok := piuo.mutation.AddedCountReferred(); ok {
		_spec.AddField(pageinfo.FieldCountReferred, field.TypeInt64, value)
	}
	if value, ok := piuo.mutation.Status(); ok {
		_spec.SetField(pageinfo.FieldStatus, field.TypeEnum, value)
	}
	if value, ok := piuo.mutation.CreatedBy(); ok {
		_spec.SetField(pageinfo.FieldCreatedBy, field.TypeString, value)
	}
	if value, ok := piuo.mutation.UpdatedAt(); ok {
		_spec.SetField(pageinfo.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := piuo.mutation.UpdatedBy(); ok {
		_spec.SetField(pageinfo.FieldUpdatedBy, field.TypeString, value)
	}
	if value, ok := piuo.mutation.Title(); ok {
		_spec.SetField(pageinfo.FieldTitle, field.TypeString, value)
	}
	if value, ok := piuo.mutation.Description(); ok {
		_spec.SetField(pageinfo.FieldDescription, field.TypeString, value)
	}
	if value, ok := piuo.mutation.Keywords(); ok {
		_spec.SetField(pageinfo.FieldKeywords, field.TypeString, value)
	}
	if value, ok := piuo.mutation.ContentLanguage(); ok {
		_spec.SetField(pageinfo.FieldContentLanguage, field.TypeString, value)
	}
	if value, ok := piuo.mutation.TwitterCard(); ok {
		_spec.SetField(pageinfo.FieldTwitterCard, field.TypeString, value)
	}
	if value, ok := piuo.mutation.TwitterURL(); ok {
		_spec.SetField(pageinfo.FieldTwitterURL, field.TypeString, value)
	}
	if value, ok := piuo.mutation.TwitterTitle(); ok {
		_spec.SetField(pageinfo.FieldTwitterTitle, field.TypeString, value)
	}
	if value, ok := piuo.mutation.TwitterDescription(); ok {
		_spec.SetField(pageinfo.FieldTwitterDescription, field.TypeString, value)
	}
	if value, ok := piuo.mutation.TwitterImage(); ok {
		_spec.SetField(pageinfo.FieldTwitterImage, field.TypeString, value)
	}
	if value, ok := piuo.mutation.OgSiteName(); ok {
		_spec.SetField(pageinfo.FieldOgSiteName, field.TypeString, value)
	}
	if value, ok := piuo.mutation.OgLocale(); ok {
		_spec.SetField(pageinfo.FieldOgLocale, field.TypeString, value)
	}
	if value, ok := piuo.mutation.OgTitle(); ok {
		_spec.SetField(pageinfo.FieldOgTitle, field.TypeString, value)
	}
	if value, ok := piuo.mutation.OgDescription(); ok {
		_spec.SetField(pageinfo.FieldOgDescription, field.TypeString, value)
	}
	if value, ok := piuo.mutation.OgType(); ok {
		_spec.SetField(pageinfo.FieldOgType, field.TypeString, value)
	}
	if value, ok := piuo.mutation.OgURL(); ok {
		_spec.SetField(pageinfo.FieldOgURL, field.TypeString, value)
	}
	if value, ok := piuo.mutation.OgImage(); ok {
		_spec.SetField(pageinfo.FieldOgImage, field.TypeString, value)
	}
	if value, ok := piuo.mutation.OgImageType(); ok {
		_spec.SetField(pageinfo.FieldOgImageType, field.TypeString, value)
	}
	if value, ok := piuo.mutation.OgImageURL(); ok {
		_spec.SetField(pageinfo.FieldOgImageURL, field.TypeString, value)
	}
	if value, ok := piuo.mutation.OgImageSecureURL(); ok {
		_spec.SetField(pageinfo.FieldOgImageSecureURL, field.TypeString, value)
	}
	if value, ok := piuo.mutation.OgImageWidth(); ok {
		_spec.SetField(pageinfo.FieldOgImageWidth, field.TypeString, value)
	}
	if value, ok := piuo.mutation.OgImageHeight(); ok {
		_spec.SetField(pageinfo.FieldOgImageHeight, field.TypeString, value)
	}
	if value, ok := piuo.mutation.OgVideo(); ok {
		_spec.SetField(pageinfo.FieldOgVideo, field.TypeString, value)
	}
	if value, ok := piuo.mutation.OgVideoType(); ok {
		_spec.SetField(pageinfo.FieldOgVideoType, field.TypeString, value)
	}
	if value, ok := piuo.mutation.OgVideoURL(); ok {
		_spec.SetField(pageinfo.FieldOgVideoURL, field.TypeString, value)
	}
	if value, ok := piuo.mutation.OgVideoSecureURL(); ok {
		_spec.SetField(pageinfo.FieldOgVideoSecureURL, field.TypeString, value)
	}
	if value, ok := piuo.mutation.OgVideoWidth(); ok {
		_spec.SetField(pageinfo.FieldOgVideoWidth, field.TypeString, value)
	}
	if value, ok := piuo.mutation.OgVideoHeight(); ok {
		_spec.SetField(pageinfo.FieldOgVideoHeight, field.TypeString, value)
	}
	_node = &PageInfo{config: piuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, piuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{pageinfo.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}
