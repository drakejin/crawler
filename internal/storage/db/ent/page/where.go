// Code generated by ent, DO NOT EDIT.

package page

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/drakejin/crawler/internal/storage/db/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id string) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id string) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id string) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...string) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		v := make([]any, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...string) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		v := make([]any, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id string) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id string) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id string) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id string) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// ReferredID applies equality check predicate on the "referred_id" field. It's identical to ReferredIDEQ.
func ReferredID(v string) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldReferredID), v))
	})
}

// CrawlingVersion applies equality check predicate on the "crawling_version" field. It's identical to CrawlingVersionEQ.
func CrawlingVersion(v string) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCrawlingVersion), v))
	})
}

// Domain applies equality check predicate on the "domain" field. It's identical to DomainEQ.
func Domain(v string) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDomain), v))
	})
}

// Port applies equality check predicate on the "port" field. It's identical to PortEQ.
func Port(v string) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPort), v))
	})
}

// IsHTTPS applies equality check predicate on the "is_https" field. It's identical to IsHTTPSEQ.
func IsHTTPS(v bool) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldIsHTTPS), v))
	})
}

// IndexedURL applies equality check predicate on the "indexed_url" field. It's identical to IndexedURLEQ.
func IndexedURL(v string) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldIndexedURL), v))
	})
}

// Path applies equality check predicate on the "path" field. It's identical to PathEQ.
func Path(v string) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPath), v))
	})
}

// Querystring applies equality check predicate on the "querystring" field. It's identical to QuerystringEQ.
func Querystring(v string) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldQuerystring), v))
	})
}

// URL applies equality check predicate on the "url" field. It's identical to URLEQ.
func URL(v string) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldURL), v))
	})
}

// CountReferred applies equality check predicate on the "count_referred" field. It's identical to CountReferredEQ.
func CountReferred(v int64) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCountReferred), v))
	})
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedBy applies equality check predicate on the "created_by" field. It's identical to CreatedByEQ.
func CreatedBy(v string) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedBy), v))
	})
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedBy applies equality check predicate on the "updated_by" field. It's identical to UpdatedByEQ.
func UpdatedBy(v string) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedBy), v))
	})
}

// Title applies equality check predicate on the "title" field. It's identical to TitleEQ.
func Title(v string) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTitle), v))
	})
}

// Description applies equality check predicate on the "description" field. It's identical to DescriptionEQ.
func Description(v string) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDescription), v))
	})
}

// Keywords applies equality check predicate on the "keywords" field. It's identical to KeywordsEQ.
func Keywords(v string) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldKeywords), v))
	})
}

// ContentLanguage applies equality check predicate on the "content_language" field. It's identical to ContentLanguageEQ.
func ContentLanguage(v string) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldContentLanguage), v))
	})
}

// TwitterCard applies equality check predicate on the "twitter_card" field. It's identical to TwitterCardEQ.
func TwitterCard(v string) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTwitterCard), v))
	})
}

// TwitterURL applies equality check predicate on the "twitter_url" field. It's identical to TwitterURLEQ.
func TwitterURL(v string) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTwitterURL), v))
	})
}

// TwitterTitle applies equality check predicate on the "twitter_title" field. It's identical to TwitterTitleEQ.
func TwitterTitle(v string) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTwitterTitle), v))
	})
}

// TwitterDescription applies equality check predicate on the "twitter_description" field. It's identical to TwitterDescriptionEQ.
func TwitterDescription(v string) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTwitterDescription), v))
	})
}

// TwitterImage applies equality check predicate on the "twitter_image" field. It's identical to TwitterImageEQ.
func TwitterImage(v string) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTwitterImage), v))
	})
}

// OgSiteName applies equality check predicate on the "og_site_name" field. It's identical to OgSiteNameEQ.
func OgSiteName(v string) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldOgSiteName), v))
	})
}

// OgLocale applies equality check predicate on the "og_locale" field. It's identical to OgLocaleEQ.
func OgLocale(v string) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldOgLocale), v))
	})
}

// OgTitle applies equality check predicate on the "og_title" field. It's identical to OgTitleEQ.
func OgTitle(v string) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldOgTitle), v))
	})
}

// OgDescription applies equality check predicate on the "og_description" field. It's identical to OgDescriptionEQ.
func OgDescription(v string) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldOgDescription), v))
	})
}

// OgType applies equality check predicate on the "og_type" field. It's identical to OgTypeEQ.
func OgType(v string) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldOgType), v))
	})
}

// OgURL applies equality check predicate on the "og_url" field. It's identical to OgURLEQ.
func OgURL(v string) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldOgURL), v))
	})
}

// OgImage applies equality check predicate on the "og_image" field. It's identical to OgImageEQ.
func OgImage(v string) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldOgImage), v))
	})
}

// OgImageType applies equality check predicate on the "og_image_type" field. It's identical to OgImageTypeEQ.
func OgImageType(v string) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldOgImageType), v))
	})
}

// OgImageURL applies equality check predicate on the "og_image_url" field. It's identical to OgImageURLEQ.
func OgImageURL(v string) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldOgImageURL), v))
	})
}

// OgImageSecureURL applies equality check predicate on the "og_image_secure_url" field. It's identical to OgImageSecureURLEQ.
func OgImageSecureURL(v string) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldOgImageSecureURL), v))
	})
}

// OgImageWidth applies equality check predicate on the "og_image_width" field. It's identical to OgImageWidthEQ.
func OgImageWidth(v string) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldOgImageWidth), v))
	})
}

// OgImageHeight applies equality check predicate on the "og_image_height" field. It's identical to OgImageHeightEQ.
func OgImageHeight(v string) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldOgImageHeight), v))
	})
}

// OgVideo applies equality check predicate on the "og_video" field. It's identical to OgVideoEQ.
func OgVideo(v string) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldOgVideo), v))
	})
}

// OgVideoType applies equality check predicate on the "og_video_type" field. It's identical to OgVideoTypeEQ.
func OgVideoType(v string) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldOgVideoType), v))
	})
}

// OgVideoURL applies equality check predicate on the "og_video_url" field. It's identical to OgVideoURLEQ.
func OgVideoURL(v string) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldOgVideoURL), v))
	})
}

// OgVideoSecureURL applies equality check predicate on the "og_video_secure_url" field. It's identical to OgVideoSecureURLEQ.
func OgVideoSecureURL(v string) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldOgVideoSecureURL), v))
	})
}

// OgVideoWidth applies equality check predicate on the "og_video_width" field. It's identical to OgVideoWidthEQ.
func OgVideoWidth(v string) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldOgVideoWidth), v))
	})
}

// OgVideoHeight applies equality check predicate on the "og_video_height" field. It's identical to OgVideoHeightEQ.
func OgVideoHeight(v string) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldOgVideoHeight), v))
	})
}

// ReferredIDEQ applies the EQ predicate on the "referred_id" field.
func ReferredIDEQ(v string) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldReferredID), v))
	})
}

// ReferredIDNEQ applies the NEQ predicate on the "referred_id" field.
func ReferredIDNEQ(v string) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldReferredID), v))
	})
}

// ReferredIDIn applies the In predicate on the "referred_id" field.
func ReferredIDIn(vs ...string) predicate.Page {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldReferredID), v...))
	})
}

// ReferredIDNotIn applies the NotIn predicate on the "referred_id" field.
func ReferredIDNotIn(vs ...string) predicate.Page {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldReferredID), v...))
	})
}

// ReferredIDGT applies the GT predicate on the "referred_id" field.
func ReferredIDGT(v string) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldReferredID), v))
	})
}

// ReferredIDGTE applies the GTE predicate on the "referred_id" field.
func ReferredIDGTE(v string) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldReferredID), v))
	})
}

// ReferredIDLT applies the LT predicate on the "referred_id" field.
func ReferredIDLT(v string) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldReferredID), v))
	})
}

// ReferredIDLTE applies the LTE predicate on the "referred_id" field.
func ReferredIDLTE(v string) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldReferredID), v))
	})
}

// ReferredIDContains applies the Contains predicate on the "referred_id" field.
func ReferredIDContains(v string) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldReferredID), v))
	})
}

// ReferredIDHasPrefix applies the HasPrefix predicate on the "referred_id" field.
func ReferredIDHasPrefix(v string) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldReferredID), v))
	})
}

// ReferredIDHasSuffix applies the HasSuffix predicate on the "referred_id" field.
func ReferredIDHasSuffix(v string) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldReferredID), v))
	})
}

// ReferredIDEqualFold applies the EqualFold predicate on the "referred_id" field.
func ReferredIDEqualFold(v string) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldReferredID), v))
	})
}

// ReferredIDContainsFold applies the ContainsFold predicate on the "referred_id" field.
func ReferredIDContainsFold(v string) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldReferredID), v))
	})
}

// CrawlingVersionEQ applies the EQ predicate on the "crawling_version" field.
func CrawlingVersionEQ(v string) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCrawlingVersion), v))
	})
}

// CrawlingVersionNEQ applies the NEQ predicate on the "crawling_version" field.
func CrawlingVersionNEQ(v string) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCrawlingVersion), v))
	})
}

// CrawlingVersionIn applies the In predicate on the "crawling_version" field.
func CrawlingVersionIn(vs ...string) predicate.Page {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldCrawlingVersion), v...))
	})
}

// CrawlingVersionNotIn applies the NotIn predicate on the "crawling_version" field.
func CrawlingVersionNotIn(vs ...string) predicate.Page {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldCrawlingVersion), v...))
	})
}

// CrawlingVersionGT applies the GT predicate on the "crawling_version" field.
func CrawlingVersionGT(v string) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCrawlingVersion), v))
	})
}

// CrawlingVersionGTE applies the GTE predicate on the "crawling_version" field.
func CrawlingVersionGTE(v string) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCrawlingVersion), v))
	})
}

// CrawlingVersionLT applies the LT predicate on the "crawling_version" field.
func CrawlingVersionLT(v string) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCrawlingVersion), v))
	})
}

// CrawlingVersionLTE applies the LTE predicate on the "crawling_version" field.
func CrawlingVersionLTE(v string) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCrawlingVersion), v))
	})
}

// CrawlingVersionContains applies the Contains predicate on the "crawling_version" field.
func CrawlingVersionContains(v string) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldCrawlingVersion), v))
	})
}

// CrawlingVersionHasPrefix applies the HasPrefix predicate on the "crawling_version" field.
func CrawlingVersionHasPrefix(v string) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldCrawlingVersion), v))
	})
}

// CrawlingVersionHasSuffix applies the HasSuffix predicate on the "crawling_version" field.
func CrawlingVersionHasSuffix(v string) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldCrawlingVersion), v))
	})
}

// CrawlingVersionEqualFold applies the EqualFold predicate on the "crawling_version" field.
func CrawlingVersionEqualFold(v string) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldCrawlingVersion), v))
	})
}

// CrawlingVersionContainsFold applies the ContainsFold predicate on the "crawling_version" field.
func CrawlingVersionContainsFold(v string) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldCrawlingVersion), v))
	})
}

// DomainEQ applies the EQ predicate on the "domain" field.
func DomainEQ(v string) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDomain), v))
	})
}

// DomainNEQ applies the NEQ predicate on the "domain" field.
func DomainNEQ(v string) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDomain), v))
	})
}

// DomainIn applies the In predicate on the "domain" field.
func DomainIn(vs ...string) predicate.Page {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldDomain), v...))
	})
}

// DomainNotIn applies the NotIn predicate on the "domain" field.
func DomainNotIn(vs ...string) predicate.Page {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldDomain), v...))
	})
}

// DomainGT applies the GT predicate on the "domain" field.
func DomainGT(v string) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDomain), v))
	})
}

// DomainGTE applies the GTE predicate on the "domain" field.
func DomainGTE(v string) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDomain), v))
	})
}

// DomainLT applies the LT predicate on the "domain" field.
func DomainLT(v string) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDomain), v))
	})
}

// DomainLTE applies the LTE predicate on the "domain" field.
func DomainLTE(v string) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDomain), v))
	})
}

// DomainContains applies the Contains predicate on the "domain" field.
func DomainContains(v string) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldDomain), v))
	})
}

// DomainHasPrefix applies the HasPrefix predicate on the "domain" field.
func DomainHasPrefix(v string) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldDomain), v))
	})
}

// DomainHasSuffix applies the HasSuffix predicate on the "domain" field.
func DomainHasSuffix(v string) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldDomain), v))
	})
}

// DomainEqualFold applies the EqualFold predicate on the "domain" field.
func DomainEqualFold(v string) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldDomain), v))
	})
}

// DomainContainsFold applies the ContainsFold predicate on the "domain" field.
func DomainContainsFold(v string) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldDomain), v))
	})
}

// PortEQ applies the EQ predicate on the "port" field.
func PortEQ(v string) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPort), v))
	})
}

// PortNEQ applies the NEQ predicate on the "port" field.
func PortNEQ(v string) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldPort), v))
	})
}

// PortIn applies the In predicate on the "port" field.
func PortIn(vs ...string) predicate.Page {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldPort), v...))
	})
}

// PortNotIn applies the NotIn predicate on the "port" field.
func PortNotIn(vs ...string) predicate.Page {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldPort), v...))
	})
}

// PortGT applies the GT predicate on the "port" field.
func PortGT(v string) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldPort), v))
	})
}

// PortGTE applies the GTE predicate on the "port" field.
func PortGTE(v string) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldPort), v))
	})
}

// PortLT applies the LT predicate on the "port" field.
func PortLT(v string) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldPort), v))
	})
}

// PortLTE applies the LTE predicate on the "port" field.
func PortLTE(v string) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldPort), v))
	})
}

// PortContains applies the Contains predicate on the "port" field.
func PortContains(v string) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldPort), v))
	})
}

// PortHasPrefix applies the HasPrefix predicate on the "port" field.
func PortHasPrefix(v string) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldPort), v))
	})
}

// PortHasSuffix applies the HasSuffix predicate on the "port" field.
func PortHasSuffix(v string) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldPort), v))
	})
}

// PortEqualFold applies the EqualFold predicate on the "port" field.
func PortEqualFold(v string) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldPort), v))
	})
}

// PortContainsFold applies the ContainsFold predicate on the "port" field.
func PortContainsFold(v string) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldPort), v))
	})
}

// IsHTTPSEQ applies the EQ predicate on the "is_https" field.
func IsHTTPSEQ(v bool) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldIsHTTPS), v))
	})
}

// IsHTTPSNEQ applies the NEQ predicate on the "is_https" field.
func IsHTTPSNEQ(v bool) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldIsHTTPS), v))
	})
}

// IndexedURLEQ applies the EQ predicate on the "indexed_url" field.
func IndexedURLEQ(v string) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldIndexedURL), v))
	})
}

// IndexedURLNEQ applies the NEQ predicate on the "indexed_url" field.
func IndexedURLNEQ(v string) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldIndexedURL), v))
	})
}

// IndexedURLIn applies the In predicate on the "indexed_url" field.
func IndexedURLIn(vs ...string) predicate.Page {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldIndexedURL), v...))
	})
}

// IndexedURLNotIn applies the NotIn predicate on the "indexed_url" field.
func IndexedURLNotIn(vs ...string) predicate.Page {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldIndexedURL), v...))
	})
}

// IndexedURLGT applies the GT predicate on the "indexed_url" field.
func IndexedURLGT(v string) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldIndexedURL), v))
	})
}

// IndexedURLGTE applies the GTE predicate on the "indexed_url" field.
func IndexedURLGTE(v string) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldIndexedURL), v))
	})
}

// IndexedURLLT applies the LT predicate on the "indexed_url" field.
func IndexedURLLT(v string) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldIndexedURL), v))
	})
}

// IndexedURLLTE applies the LTE predicate on the "indexed_url" field.
func IndexedURLLTE(v string) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldIndexedURL), v))
	})
}

// IndexedURLContains applies the Contains predicate on the "indexed_url" field.
func IndexedURLContains(v string) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldIndexedURL), v))
	})
}

// IndexedURLHasPrefix applies the HasPrefix predicate on the "indexed_url" field.
func IndexedURLHasPrefix(v string) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldIndexedURL), v))
	})
}

// IndexedURLHasSuffix applies the HasSuffix predicate on the "indexed_url" field.
func IndexedURLHasSuffix(v string) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldIndexedURL), v))
	})
}

// IndexedURLEqualFold applies the EqualFold predicate on the "indexed_url" field.
func IndexedURLEqualFold(v string) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldIndexedURL), v))
	})
}

// IndexedURLContainsFold applies the ContainsFold predicate on the "indexed_url" field.
func IndexedURLContainsFold(v string) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldIndexedURL), v))
	})
}

// PathEQ applies the EQ predicate on the "path" field.
func PathEQ(v string) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPath), v))
	})
}

// PathNEQ applies the NEQ predicate on the "path" field.
func PathNEQ(v string) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldPath), v))
	})
}

// PathIn applies the In predicate on the "path" field.
func PathIn(vs ...string) predicate.Page {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldPath), v...))
	})
}

// PathNotIn applies the NotIn predicate on the "path" field.
func PathNotIn(vs ...string) predicate.Page {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldPath), v...))
	})
}

// PathGT applies the GT predicate on the "path" field.
func PathGT(v string) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldPath), v))
	})
}

// PathGTE applies the GTE predicate on the "path" field.
func PathGTE(v string) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldPath), v))
	})
}

// PathLT applies the LT predicate on the "path" field.
func PathLT(v string) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldPath), v))
	})
}

// PathLTE applies the LTE predicate on the "path" field.
func PathLTE(v string) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldPath), v))
	})
}

// PathContains applies the Contains predicate on the "path" field.
func PathContains(v string) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldPath), v))
	})
}

// PathHasPrefix applies the HasPrefix predicate on the "path" field.
func PathHasPrefix(v string) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldPath), v))
	})
}

// PathHasSuffix applies the HasSuffix predicate on the "path" field.
func PathHasSuffix(v string) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldPath), v))
	})
}

// PathEqualFold applies the EqualFold predicate on the "path" field.
func PathEqualFold(v string) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldPath), v))
	})
}

// PathContainsFold applies the ContainsFold predicate on the "path" field.
func PathContainsFold(v string) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldPath), v))
	})
}

// QuerystringEQ applies the EQ predicate on the "querystring" field.
func QuerystringEQ(v string) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldQuerystring), v))
	})
}

// QuerystringNEQ applies the NEQ predicate on the "querystring" field.
func QuerystringNEQ(v string) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldQuerystring), v))
	})
}

// QuerystringIn applies the In predicate on the "querystring" field.
func QuerystringIn(vs ...string) predicate.Page {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldQuerystring), v...))
	})
}

// QuerystringNotIn applies the NotIn predicate on the "querystring" field.
func QuerystringNotIn(vs ...string) predicate.Page {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldQuerystring), v...))
	})
}

// QuerystringGT applies the GT predicate on the "querystring" field.
func QuerystringGT(v string) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldQuerystring), v))
	})
}

// QuerystringGTE applies the GTE predicate on the "querystring" field.
func QuerystringGTE(v string) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldQuerystring), v))
	})
}

// QuerystringLT applies the LT predicate on the "querystring" field.
func QuerystringLT(v string) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldQuerystring), v))
	})
}

// QuerystringLTE applies the LTE predicate on the "querystring" field.
func QuerystringLTE(v string) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldQuerystring), v))
	})
}

// QuerystringContains applies the Contains predicate on the "querystring" field.
func QuerystringContains(v string) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldQuerystring), v))
	})
}

// QuerystringHasPrefix applies the HasPrefix predicate on the "querystring" field.
func QuerystringHasPrefix(v string) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldQuerystring), v))
	})
}

// QuerystringHasSuffix applies the HasSuffix predicate on the "querystring" field.
func QuerystringHasSuffix(v string) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldQuerystring), v))
	})
}

// QuerystringEqualFold applies the EqualFold predicate on the "querystring" field.
func QuerystringEqualFold(v string) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldQuerystring), v))
	})
}

// QuerystringContainsFold applies the ContainsFold predicate on the "querystring" field.
func QuerystringContainsFold(v string) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldQuerystring), v))
	})
}

// URLEQ applies the EQ predicate on the "url" field.
func URLEQ(v string) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldURL), v))
	})
}

// URLNEQ applies the NEQ predicate on the "url" field.
func URLNEQ(v string) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldURL), v))
	})
}

// URLIn applies the In predicate on the "url" field.
func URLIn(vs ...string) predicate.Page {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldURL), v...))
	})
}

// URLNotIn applies the NotIn predicate on the "url" field.
func URLNotIn(vs ...string) predicate.Page {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldURL), v...))
	})
}

// URLGT applies the GT predicate on the "url" field.
func URLGT(v string) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldURL), v))
	})
}

// URLGTE applies the GTE predicate on the "url" field.
func URLGTE(v string) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldURL), v))
	})
}

// URLLT applies the LT predicate on the "url" field.
func URLLT(v string) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldURL), v))
	})
}

// URLLTE applies the LTE predicate on the "url" field.
func URLLTE(v string) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldURL), v))
	})
}

// URLContains applies the Contains predicate on the "url" field.
func URLContains(v string) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldURL), v))
	})
}

// URLHasPrefix applies the HasPrefix predicate on the "url" field.
func URLHasPrefix(v string) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldURL), v))
	})
}

// URLHasSuffix applies the HasSuffix predicate on the "url" field.
func URLHasSuffix(v string) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldURL), v))
	})
}

// URLEqualFold applies the EqualFold predicate on the "url" field.
func URLEqualFold(v string) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldURL), v))
	})
}

// URLContainsFold applies the ContainsFold predicate on the "url" field.
func URLContainsFold(v string) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldURL), v))
	})
}

// CountReferredEQ applies the EQ predicate on the "count_referred" field.
func CountReferredEQ(v int64) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCountReferred), v))
	})
}

// CountReferredNEQ applies the NEQ predicate on the "count_referred" field.
func CountReferredNEQ(v int64) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCountReferred), v))
	})
}

// CountReferredIn applies the In predicate on the "count_referred" field.
func CountReferredIn(vs ...int64) predicate.Page {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldCountReferred), v...))
	})
}

// CountReferredNotIn applies the NotIn predicate on the "count_referred" field.
func CountReferredNotIn(vs ...int64) predicate.Page {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldCountReferred), v...))
	})
}

// CountReferredGT applies the GT predicate on the "count_referred" field.
func CountReferredGT(v int64) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCountReferred), v))
	})
}

// CountReferredGTE applies the GTE predicate on the "count_referred" field.
func CountReferredGTE(v int64) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCountReferred), v))
	})
}

// CountReferredLT applies the LT predicate on the "count_referred" field.
func CountReferredLT(v int64) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCountReferred), v))
	})
}

// CountReferredLTE applies the LTE predicate on the "count_referred" field.
func CountReferredLTE(v int64) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCountReferred), v))
	})
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v Status) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStatus), v))
	})
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v Status) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldStatus), v))
	})
}

// StatusIn applies the In predicate on the "status" field.
func StatusIn(vs ...Status) predicate.Page {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldStatus), v...))
	})
}

// StatusNotIn applies the NotIn predicate on the "status" field.
func StatusNotIn(vs ...Status) predicate.Page {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldStatus), v...))
	})
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Page {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Page {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreatedAt), v))
	})
}

// CreatedByEQ applies the EQ predicate on the "created_by" field.
func CreatedByEQ(v string) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedBy), v))
	})
}

// CreatedByNEQ applies the NEQ predicate on the "created_by" field.
func CreatedByNEQ(v string) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreatedBy), v))
	})
}

// CreatedByIn applies the In predicate on the "created_by" field.
func CreatedByIn(vs ...string) predicate.Page {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldCreatedBy), v...))
	})
}

// CreatedByNotIn applies the NotIn predicate on the "created_by" field.
func CreatedByNotIn(vs ...string) predicate.Page {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldCreatedBy), v...))
	})
}

// CreatedByGT applies the GT predicate on the "created_by" field.
func CreatedByGT(v string) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreatedBy), v))
	})
}

// CreatedByGTE applies the GTE predicate on the "created_by" field.
func CreatedByGTE(v string) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreatedBy), v))
	})
}

// CreatedByLT applies the LT predicate on the "created_by" field.
func CreatedByLT(v string) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreatedBy), v))
	})
}

// CreatedByLTE applies the LTE predicate on the "created_by" field.
func CreatedByLTE(v string) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreatedBy), v))
	})
}

// CreatedByContains applies the Contains predicate on the "created_by" field.
func CreatedByContains(v string) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldCreatedBy), v))
	})
}

// CreatedByHasPrefix applies the HasPrefix predicate on the "created_by" field.
func CreatedByHasPrefix(v string) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldCreatedBy), v))
	})
}

// CreatedByHasSuffix applies the HasSuffix predicate on the "created_by" field.
func CreatedByHasSuffix(v string) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldCreatedBy), v))
	})
}

// CreatedByEqualFold applies the EqualFold predicate on the "created_by" field.
func CreatedByEqualFold(v string) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldCreatedBy), v))
	})
}

// CreatedByContainsFold applies the ContainsFold predicate on the "created_by" field.
func CreatedByContainsFold(v string) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldCreatedBy), v))
	})
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.Page {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.Page {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedByEQ applies the EQ predicate on the "updated_by" field.
func UpdatedByEQ(v string) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedBy), v))
	})
}

// UpdatedByNEQ applies the NEQ predicate on the "updated_by" field.
func UpdatedByNEQ(v string) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUpdatedBy), v))
	})
}

// UpdatedByIn applies the In predicate on the "updated_by" field.
func UpdatedByIn(vs ...string) predicate.Page {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldUpdatedBy), v...))
	})
}

// UpdatedByNotIn applies the NotIn predicate on the "updated_by" field.
func UpdatedByNotIn(vs ...string) predicate.Page {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldUpdatedBy), v...))
	})
}

// UpdatedByGT applies the GT predicate on the "updated_by" field.
func UpdatedByGT(v string) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUpdatedBy), v))
	})
}

// UpdatedByGTE applies the GTE predicate on the "updated_by" field.
func UpdatedByGTE(v string) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUpdatedBy), v))
	})
}

// UpdatedByLT applies the LT predicate on the "updated_by" field.
func UpdatedByLT(v string) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUpdatedBy), v))
	})
}

// UpdatedByLTE applies the LTE predicate on the "updated_by" field.
func UpdatedByLTE(v string) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUpdatedBy), v))
	})
}

// UpdatedByContains applies the Contains predicate on the "updated_by" field.
func UpdatedByContains(v string) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldUpdatedBy), v))
	})
}

// UpdatedByHasPrefix applies the HasPrefix predicate on the "updated_by" field.
func UpdatedByHasPrefix(v string) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldUpdatedBy), v))
	})
}

// UpdatedByHasSuffix applies the HasSuffix predicate on the "updated_by" field.
func UpdatedByHasSuffix(v string) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldUpdatedBy), v))
	})
}

// UpdatedByEqualFold applies the EqualFold predicate on the "updated_by" field.
func UpdatedByEqualFold(v string) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldUpdatedBy), v))
	})
}

// UpdatedByContainsFold applies the ContainsFold predicate on the "updated_by" field.
func UpdatedByContainsFold(v string) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldUpdatedBy), v))
	})
}

// TitleEQ applies the EQ predicate on the "title" field.
func TitleEQ(v string) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTitle), v))
	})
}

// TitleNEQ applies the NEQ predicate on the "title" field.
func TitleNEQ(v string) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldTitle), v))
	})
}

// TitleIn applies the In predicate on the "title" field.
func TitleIn(vs ...string) predicate.Page {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldTitle), v...))
	})
}

// TitleNotIn applies the NotIn predicate on the "title" field.
func TitleNotIn(vs ...string) predicate.Page {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldTitle), v...))
	})
}

// TitleGT applies the GT predicate on the "title" field.
func TitleGT(v string) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldTitle), v))
	})
}

// TitleGTE applies the GTE predicate on the "title" field.
func TitleGTE(v string) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldTitle), v))
	})
}

// TitleLT applies the LT predicate on the "title" field.
func TitleLT(v string) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldTitle), v))
	})
}

// TitleLTE applies the LTE predicate on the "title" field.
func TitleLTE(v string) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldTitle), v))
	})
}

// TitleContains applies the Contains predicate on the "title" field.
func TitleContains(v string) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldTitle), v))
	})
}

// TitleHasPrefix applies the HasPrefix predicate on the "title" field.
func TitleHasPrefix(v string) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldTitle), v))
	})
}

// TitleHasSuffix applies the HasSuffix predicate on the "title" field.
func TitleHasSuffix(v string) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldTitle), v))
	})
}

// TitleEqualFold applies the EqualFold predicate on the "title" field.
func TitleEqualFold(v string) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldTitle), v))
	})
}

// TitleContainsFold applies the ContainsFold predicate on the "title" field.
func TitleContainsFold(v string) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldTitle), v))
	})
}

// DescriptionEQ applies the EQ predicate on the "description" field.
func DescriptionEQ(v string) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDescription), v))
	})
}

// DescriptionNEQ applies the NEQ predicate on the "description" field.
func DescriptionNEQ(v string) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDescription), v))
	})
}

// DescriptionIn applies the In predicate on the "description" field.
func DescriptionIn(vs ...string) predicate.Page {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldDescription), v...))
	})
}

// DescriptionNotIn applies the NotIn predicate on the "description" field.
func DescriptionNotIn(vs ...string) predicate.Page {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldDescription), v...))
	})
}

// DescriptionGT applies the GT predicate on the "description" field.
func DescriptionGT(v string) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDescription), v))
	})
}

// DescriptionGTE applies the GTE predicate on the "description" field.
func DescriptionGTE(v string) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDescription), v))
	})
}

// DescriptionLT applies the LT predicate on the "description" field.
func DescriptionLT(v string) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDescription), v))
	})
}

// DescriptionLTE applies the LTE predicate on the "description" field.
func DescriptionLTE(v string) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDescription), v))
	})
}

// DescriptionContains applies the Contains predicate on the "description" field.
func DescriptionContains(v string) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldDescription), v))
	})
}

// DescriptionHasPrefix applies the HasPrefix predicate on the "description" field.
func DescriptionHasPrefix(v string) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldDescription), v))
	})
}

// DescriptionHasSuffix applies the HasSuffix predicate on the "description" field.
func DescriptionHasSuffix(v string) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldDescription), v))
	})
}

// DescriptionEqualFold applies the EqualFold predicate on the "description" field.
func DescriptionEqualFold(v string) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldDescription), v))
	})
}

// DescriptionContainsFold applies the ContainsFold predicate on the "description" field.
func DescriptionContainsFold(v string) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldDescription), v))
	})
}

// KeywordsEQ applies the EQ predicate on the "keywords" field.
func KeywordsEQ(v string) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldKeywords), v))
	})
}

// KeywordsNEQ applies the NEQ predicate on the "keywords" field.
func KeywordsNEQ(v string) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldKeywords), v))
	})
}

// KeywordsIn applies the In predicate on the "keywords" field.
func KeywordsIn(vs ...string) predicate.Page {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldKeywords), v...))
	})
}

// KeywordsNotIn applies the NotIn predicate on the "keywords" field.
func KeywordsNotIn(vs ...string) predicate.Page {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldKeywords), v...))
	})
}

// KeywordsGT applies the GT predicate on the "keywords" field.
func KeywordsGT(v string) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldKeywords), v))
	})
}

// KeywordsGTE applies the GTE predicate on the "keywords" field.
func KeywordsGTE(v string) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldKeywords), v))
	})
}

// KeywordsLT applies the LT predicate on the "keywords" field.
func KeywordsLT(v string) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldKeywords), v))
	})
}

// KeywordsLTE applies the LTE predicate on the "keywords" field.
func KeywordsLTE(v string) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldKeywords), v))
	})
}

// KeywordsContains applies the Contains predicate on the "keywords" field.
func KeywordsContains(v string) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldKeywords), v))
	})
}

// KeywordsHasPrefix applies the HasPrefix predicate on the "keywords" field.
func KeywordsHasPrefix(v string) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldKeywords), v))
	})
}

// KeywordsHasSuffix applies the HasSuffix predicate on the "keywords" field.
func KeywordsHasSuffix(v string) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldKeywords), v))
	})
}

// KeywordsEqualFold applies the EqualFold predicate on the "keywords" field.
func KeywordsEqualFold(v string) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldKeywords), v))
	})
}

// KeywordsContainsFold applies the ContainsFold predicate on the "keywords" field.
func KeywordsContainsFold(v string) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldKeywords), v))
	})
}

// ContentLanguageEQ applies the EQ predicate on the "content_language" field.
func ContentLanguageEQ(v string) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldContentLanguage), v))
	})
}

// ContentLanguageNEQ applies the NEQ predicate on the "content_language" field.
func ContentLanguageNEQ(v string) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldContentLanguage), v))
	})
}

// ContentLanguageIn applies the In predicate on the "content_language" field.
func ContentLanguageIn(vs ...string) predicate.Page {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldContentLanguage), v...))
	})
}

// ContentLanguageNotIn applies the NotIn predicate on the "content_language" field.
func ContentLanguageNotIn(vs ...string) predicate.Page {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldContentLanguage), v...))
	})
}

// ContentLanguageGT applies the GT predicate on the "content_language" field.
func ContentLanguageGT(v string) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldContentLanguage), v))
	})
}

// ContentLanguageGTE applies the GTE predicate on the "content_language" field.
func ContentLanguageGTE(v string) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldContentLanguage), v))
	})
}

// ContentLanguageLT applies the LT predicate on the "content_language" field.
func ContentLanguageLT(v string) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldContentLanguage), v))
	})
}

// ContentLanguageLTE applies the LTE predicate on the "content_language" field.
func ContentLanguageLTE(v string) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldContentLanguage), v))
	})
}

// ContentLanguageContains applies the Contains predicate on the "content_language" field.
func ContentLanguageContains(v string) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldContentLanguage), v))
	})
}

// ContentLanguageHasPrefix applies the HasPrefix predicate on the "content_language" field.
func ContentLanguageHasPrefix(v string) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldContentLanguage), v))
	})
}

// ContentLanguageHasSuffix applies the HasSuffix predicate on the "content_language" field.
func ContentLanguageHasSuffix(v string) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldContentLanguage), v))
	})
}

// ContentLanguageEqualFold applies the EqualFold predicate on the "content_language" field.
func ContentLanguageEqualFold(v string) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldContentLanguage), v))
	})
}

// ContentLanguageContainsFold applies the ContainsFold predicate on the "content_language" field.
func ContentLanguageContainsFold(v string) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldContentLanguage), v))
	})
}

// TwitterCardEQ applies the EQ predicate on the "twitter_card" field.
func TwitterCardEQ(v string) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTwitterCard), v))
	})
}

// TwitterCardNEQ applies the NEQ predicate on the "twitter_card" field.
func TwitterCardNEQ(v string) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldTwitterCard), v))
	})
}

// TwitterCardIn applies the In predicate on the "twitter_card" field.
func TwitterCardIn(vs ...string) predicate.Page {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldTwitterCard), v...))
	})
}

// TwitterCardNotIn applies the NotIn predicate on the "twitter_card" field.
func TwitterCardNotIn(vs ...string) predicate.Page {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldTwitterCard), v...))
	})
}

// TwitterCardGT applies the GT predicate on the "twitter_card" field.
func TwitterCardGT(v string) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldTwitterCard), v))
	})
}

// TwitterCardGTE applies the GTE predicate on the "twitter_card" field.
func TwitterCardGTE(v string) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldTwitterCard), v))
	})
}

// TwitterCardLT applies the LT predicate on the "twitter_card" field.
func TwitterCardLT(v string) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldTwitterCard), v))
	})
}

// TwitterCardLTE applies the LTE predicate on the "twitter_card" field.
func TwitterCardLTE(v string) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldTwitterCard), v))
	})
}

// TwitterCardContains applies the Contains predicate on the "twitter_card" field.
func TwitterCardContains(v string) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldTwitterCard), v))
	})
}

// TwitterCardHasPrefix applies the HasPrefix predicate on the "twitter_card" field.
func TwitterCardHasPrefix(v string) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldTwitterCard), v))
	})
}

// TwitterCardHasSuffix applies the HasSuffix predicate on the "twitter_card" field.
func TwitterCardHasSuffix(v string) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldTwitterCard), v))
	})
}

// TwitterCardEqualFold applies the EqualFold predicate on the "twitter_card" field.
func TwitterCardEqualFold(v string) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldTwitterCard), v))
	})
}

// TwitterCardContainsFold applies the ContainsFold predicate on the "twitter_card" field.
func TwitterCardContainsFold(v string) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldTwitterCard), v))
	})
}

// TwitterURLEQ applies the EQ predicate on the "twitter_url" field.
func TwitterURLEQ(v string) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTwitterURL), v))
	})
}

// TwitterURLNEQ applies the NEQ predicate on the "twitter_url" field.
func TwitterURLNEQ(v string) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldTwitterURL), v))
	})
}

// TwitterURLIn applies the In predicate on the "twitter_url" field.
func TwitterURLIn(vs ...string) predicate.Page {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldTwitterURL), v...))
	})
}

// TwitterURLNotIn applies the NotIn predicate on the "twitter_url" field.
func TwitterURLNotIn(vs ...string) predicate.Page {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldTwitterURL), v...))
	})
}

// TwitterURLGT applies the GT predicate on the "twitter_url" field.
func TwitterURLGT(v string) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldTwitterURL), v))
	})
}

// TwitterURLGTE applies the GTE predicate on the "twitter_url" field.
func TwitterURLGTE(v string) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldTwitterURL), v))
	})
}

// TwitterURLLT applies the LT predicate on the "twitter_url" field.
func TwitterURLLT(v string) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldTwitterURL), v))
	})
}

// TwitterURLLTE applies the LTE predicate on the "twitter_url" field.
func TwitterURLLTE(v string) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldTwitterURL), v))
	})
}

// TwitterURLContains applies the Contains predicate on the "twitter_url" field.
func TwitterURLContains(v string) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldTwitterURL), v))
	})
}

// TwitterURLHasPrefix applies the HasPrefix predicate on the "twitter_url" field.
func TwitterURLHasPrefix(v string) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldTwitterURL), v))
	})
}

// TwitterURLHasSuffix applies the HasSuffix predicate on the "twitter_url" field.
func TwitterURLHasSuffix(v string) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldTwitterURL), v))
	})
}

// TwitterURLEqualFold applies the EqualFold predicate on the "twitter_url" field.
func TwitterURLEqualFold(v string) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldTwitterURL), v))
	})
}

// TwitterURLContainsFold applies the ContainsFold predicate on the "twitter_url" field.
func TwitterURLContainsFold(v string) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldTwitterURL), v))
	})
}

// TwitterTitleEQ applies the EQ predicate on the "twitter_title" field.
func TwitterTitleEQ(v string) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTwitterTitle), v))
	})
}

// TwitterTitleNEQ applies the NEQ predicate on the "twitter_title" field.
func TwitterTitleNEQ(v string) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldTwitterTitle), v))
	})
}

// TwitterTitleIn applies the In predicate on the "twitter_title" field.
func TwitterTitleIn(vs ...string) predicate.Page {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldTwitterTitle), v...))
	})
}

// TwitterTitleNotIn applies the NotIn predicate on the "twitter_title" field.
func TwitterTitleNotIn(vs ...string) predicate.Page {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldTwitterTitle), v...))
	})
}

// TwitterTitleGT applies the GT predicate on the "twitter_title" field.
func TwitterTitleGT(v string) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldTwitterTitle), v))
	})
}

// TwitterTitleGTE applies the GTE predicate on the "twitter_title" field.
func TwitterTitleGTE(v string) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldTwitterTitle), v))
	})
}

// TwitterTitleLT applies the LT predicate on the "twitter_title" field.
func TwitterTitleLT(v string) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldTwitterTitle), v))
	})
}

// TwitterTitleLTE applies the LTE predicate on the "twitter_title" field.
func TwitterTitleLTE(v string) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldTwitterTitle), v))
	})
}

// TwitterTitleContains applies the Contains predicate on the "twitter_title" field.
func TwitterTitleContains(v string) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldTwitterTitle), v))
	})
}

// TwitterTitleHasPrefix applies the HasPrefix predicate on the "twitter_title" field.
func TwitterTitleHasPrefix(v string) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldTwitterTitle), v))
	})
}

// TwitterTitleHasSuffix applies the HasSuffix predicate on the "twitter_title" field.
func TwitterTitleHasSuffix(v string) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldTwitterTitle), v))
	})
}

// TwitterTitleEqualFold applies the EqualFold predicate on the "twitter_title" field.
func TwitterTitleEqualFold(v string) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldTwitterTitle), v))
	})
}

// TwitterTitleContainsFold applies the ContainsFold predicate on the "twitter_title" field.
func TwitterTitleContainsFold(v string) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldTwitterTitle), v))
	})
}

// TwitterDescriptionEQ applies the EQ predicate on the "twitter_description" field.
func TwitterDescriptionEQ(v string) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTwitterDescription), v))
	})
}

// TwitterDescriptionNEQ applies the NEQ predicate on the "twitter_description" field.
func TwitterDescriptionNEQ(v string) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldTwitterDescription), v))
	})
}

// TwitterDescriptionIn applies the In predicate on the "twitter_description" field.
func TwitterDescriptionIn(vs ...string) predicate.Page {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldTwitterDescription), v...))
	})
}

// TwitterDescriptionNotIn applies the NotIn predicate on the "twitter_description" field.
func TwitterDescriptionNotIn(vs ...string) predicate.Page {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldTwitterDescription), v...))
	})
}

// TwitterDescriptionGT applies the GT predicate on the "twitter_description" field.
func TwitterDescriptionGT(v string) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldTwitterDescription), v))
	})
}

// TwitterDescriptionGTE applies the GTE predicate on the "twitter_description" field.
func TwitterDescriptionGTE(v string) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldTwitterDescription), v))
	})
}

// TwitterDescriptionLT applies the LT predicate on the "twitter_description" field.
func TwitterDescriptionLT(v string) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldTwitterDescription), v))
	})
}

// TwitterDescriptionLTE applies the LTE predicate on the "twitter_description" field.
func TwitterDescriptionLTE(v string) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldTwitterDescription), v))
	})
}

// TwitterDescriptionContains applies the Contains predicate on the "twitter_description" field.
func TwitterDescriptionContains(v string) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldTwitterDescription), v))
	})
}

// TwitterDescriptionHasPrefix applies the HasPrefix predicate on the "twitter_description" field.
func TwitterDescriptionHasPrefix(v string) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldTwitterDescription), v))
	})
}

// TwitterDescriptionHasSuffix applies the HasSuffix predicate on the "twitter_description" field.
func TwitterDescriptionHasSuffix(v string) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldTwitterDescription), v))
	})
}

// TwitterDescriptionEqualFold applies the EqualFold predicate on the "twitter_description" field.
func TwitterDescriptionEqualFold(v string) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldTwitterDescription), v))
	})
}

// TwitterDescriptionContainsFold applies the ContainsFold predicate on the "twitter_description" field.
func TwitterDescriptionContainsFold(v string) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldTwitterDescription), v))
	})
}

// TwitterImageEQ applies the EQ predicate on the "twitter_image" field.
func TwitterImageEQ(v string) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTwitterImage), v))
	})
}

// TwitterImageNEQ applies the NEQ predicate on the "twitter_image" field.
func TwitterImageNEQ(v string) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldTwitterImage), v))
	})
}

// TwitterImageIn applies the In predicate on the "twitter_image" field.
func TwitterImageIn(vs ...string) predicate.Page {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldTwitterImage), v...))
	})
}

// TwitterImageNotIn applies the NotIn predicate on the "twitter_image" field.
func TwitterImageNotIn(vs ...string) predicate.Page {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldTwitterImage), v...))
	})
}

// TwitterImageGT applies the GT predicate on the "twitter_image" field.
func TwitterImageGT(v string) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldTwitterImage), v))
	})
}

// TwitterImageGTE applies the GTE predicate on the "twitter_image" field.
func TwitterImageGTE(v string) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldTwitterImage), v))
	})
}

// TwitterImageLT applies the LT predicate on the "twitter_image" field.
func TwitterImageLT(v string) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldTwitterImage), v))
	})
}

// TwitterImageLTE applies the LTE predicate on the "twitter_image" field.
func TwitterImageLTE(v string) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldTwitterImage), v))
	})
}

// TwitterImageContains applies the Contains predicate on the "twitter_image" field.
func TwitterImageContains(v string) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldTwitterImage), v))
	})
}

// TwitterImageHasPrefix applies the HasPrefix predicate on the "twitter_image" field.
func TwitterImageHasPrefix(v string) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldTwitterImage), v))
	})
}

// TwitterImageHasSuffix applies the HasSuffix predicate on the "twitter_image" field.
func TwitterImageHasSuffix(v string) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldTwitterImage), v))
	})
}

// TwitterImageEqualFold applies the EqualFold predicate on the "twitter_image" field.
func TwitterImageEqualFold(v string) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldTwitterImage), v))
	})
}

// TwitterImageContainsFold applies the ContainsFold predicate on the "twitter_image" field.
func TwitterImageContainsFold(v string) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldTwitterImage), v))
	})
}

// OgSiteNameEQ applies the EQ predicate on the "og_site_name" field.
func OgSiteNameEQ(v string) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldOgSiteName), v))
	})
}

// OgSiteNameNEQ applies the NEQ predicate on the "og_site_name" field.
func OgSiteNameNEQ(v string) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldOgSiteName), v))
	})
}

// OgSiteNameIn applies the In predicate on the "og_site_name" field.
func OgSiteNameIn(vs ...string) predicate.Page {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldOgSiteName), v...))
	})
}

// OgSiteNameNotIn applies the NotIn predicate on the "og_site_name" field.
func OgSiteNameNotIn(vs ...string) predicate.Page {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldOgSiteName), v...))
	})
}

// OgSiteNameGT applies the GT predicate on the "og_site_name" field.
func OgSiteNameGT(v string) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldOgSiteName), v))
	})
}

// OgSiteNameGTE applies the GTE predicate on the "og_site_name" field.
func OgSiteNameGTE(v string) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldOgSiteName), v))
	})
}

// OgSiteNameLT applies the LT predicate on the "og_site_name" field.
func OgSiteNameLT(v string) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldOgSiteName), v))
	})
}

// OgSiteNameLTE applies the LTE predicate on the "og_site_name" field.
func OgSiteNameLTE(v string) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldOgSiteName), v))
	})
}

// OgSiteNameContains applies the Contains predicate on the "og_site_name" field.
func OgSiteNameContains(v string) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldOgSiteName), v))
	})
}

// OgSiteNameHasPrefix applies the HasPrefix predicate on the "og_site_name" field.
func OgSiteNameHasPrefix(v string) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldOgSiteName), v))
	})
}

// OgSiteNameHasSuffix applies the HasSuffix predicate on the "og_site_name" field.
func OgSiteNameHasSuffix(v string) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldOgSiteName), v))
	})
}

// OgSiteNameEqualFold applies the EqualFold predicate on the "og_site_name" field.
func OgSiteNameEqualFold(v string) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldOgSiteName), v))
	})
}

// OgSiteNameContainsFold applies the ContainsFold predicate on the "og_site_name" field.
func OgSiteNameContainsFold(v string) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldOgSiteName), v))
	})
}

// OgLocaleEQ applies the EQ predicate on the "og_locale" field.
func OgLocaleEQ(v string) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldOgLocale), v))
	})
}

// OgLocaleNEQ applies the NEQ predicate on the "og_locale" field.
func OgLocaleNEQ(v string) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldOgLocale), v))
	})
}

// OgLocaleIn applies the In predicate on the "og_locale" field.
func OgLocaleIn(vs ...string) predicate.Page {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldOgLocale), v...))
	})
}

// OgLocaleNotIn applies the NotIn predicate on the "og_locale" field.
func OgLocaleNotIn(vs ...string) predicate.Page {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldOgLocale), v...))
	})
}

// OgLocaleGT applies the GT predicate on the "og_locale" field.
func OgLocaleGT(v string) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldOgLocale), v))
	})
}

// OgLocaleGTE applies the GTE predicate on the "og_locale" field.
func OgLocaleGTE(v string) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldOgLocale), v))
	})
}

// OgLocaleLT applies the LT predicate on the "og_locale" field.
func OgLocaleLT(v string) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldOgLocale), v))
	})
}

// OgLocaleLTE applies the LTE predicate on the "og_locale" field.
func OgLocaleLTE(v string) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldOgLocale), v))
	})
}

// OgLocaleContains applies the Contains predicate on the "og_locale" field.
func OgLocaleContains(v string) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldOgLocale), v))
	})
}

// OgLocaleHasPrefix applies the HasPrefix predicate on the "og_locale" field.
func OgLocaleHasPrefix(v string) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldOgLocale), v))
	})
}

// OgLocaleHasSuffix applies the HasSuffix predicate on the "og_locale" field.
func OgLocaleHasSuffix(v string) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldOgLocale), v))
	})
}

// OgLocaleEqualFold applies the EqualFold predicate on the "og_locale" field.
func OgLocaleEqualFold(v string) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldOgLocale), v))
	})
}

// OgLocaleContainsFold applies the ContainsFold predicate on the "og_locale" field.
func OgLocaleContainsFold(v string) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldOgLocale), v))
	})
}

// OgTitleEQ applies the EQ predicate on the "og_title" field.
func OgTitleEQ(v string) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldOgTitle), v))
	})
}

// OgTitleNEQ applies the NEQ predicate on the "og_title" field.
func OgTitleNEQ(v string) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldOgTitle), v))
	})
}

// OgTitleIn applies the In predicate on the "og_title" field.
func OgTitleIn(vs ...string) predicate.Page {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldOgTitle), v...))
	})
}

// OgTitleNotIn applies the NotIn predicate on the "og_title" field.
func OgTitleNotIn(vs ...string) predicate.Page {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldOgTitle), v...))
	})
}

// OgTitleGT applies the GT predicate on the "og_title" field.
func OgTitleGT(v string) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldOgTitle), v))
	})
}

// OgTitleGTE applies the GTE predicate on the "og_title" field.
func OgTitleGTE(v string) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldOgTitle), v))
	})
}

// OgTitleLT applies the LT predicate on the "og_title" field.
func OgTitleLT(v string) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldOgTitle), v))
	})
}

// OgTitleLTE applies the LTE predicate on the "og_title" field.
func OgTitleLTE(v string) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldOgTitle), v))
	})
}

// OgTitleContains applies the Contains predicate on the "og_title" field.
func OgTitleContains(v string) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldOgTitle), v))
	})
}

// OgTitleHasPrefix applies the HasPrefix predicate on the "og_title" field.
func OgTitleHasPrefix(v string) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldOgTitle), v))
	})
}

// OgTitleHasSuffix applies the HasSuffix predicate on the "og_title" field.
func OgTitleHasSuffix(v string) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldOgTitle), v))
	})
}

// OgTitleEqualFold applies the EqualFold predicate on the "og_title" field.
func OgTitleEqualFold(v string) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldOgTitle), v))
	})
}

// OgTitleContainsFold applies the ContainsFold predicate on the "og_title" field.
func OgTitleContainsFold(v string) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldOgTitle), v))
	})
}

// OgDescriptionEQ applies the EQ predicate on the "og_description" field.
func OgDescriptionEQ(v string) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldOgDescription), v))
	})
}

// OgDescriptionNEQ applies the NEQ predicate on the "og_description" field.
func OgDescriptionNEQ(v string) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldOgDescription), v))
	})
}

// OgDescriptionIn applies the In predicate on the "og_description" field.
func OgDescriptionIn(vs ...string) predicate.Page {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldOgDescription), v...))
	})
}

// OgDescriptionNotIn applies the NotIn predicate on the "og_description" field.
func OgDescriptionNotIn(vs ...string) predicate.Page {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldOgDescription), v...))
	})
}

// OgDescriptionGT applies the GT predicate on the "og_description" field.
func OgDescriptionGT(v string) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldOgDescription), v))
	})
}

// OgDescriptionGTE applies the GTE predicate on the "og_description" field.
func OgDescriptionGTE(v string) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldOgDescription), v))
	})
}

// OgDescriptionLT applies the LT predicate on the "og_description" field.
func OgDescriptionLT(v string) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldOgDescription), v))
	})
}

// OgDescriptionLTE applies the LTE predicate on the "og_description" field.
func OgDescriptionLTE(v string) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldOgDescription), v))
	})
}

// OgDescriptionContains applies the Contains predicate on the "og_description" field.
func OgDescriptionContains(v string) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldOgDescription), v))
	})
}

// OgDescriptionHasPrefix applies the HasPrefix predicate on the "og_description" field.
func OgDescriptionHasPrefix(v string) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldOgDescription), v))
	})
}

// OgDescriptionHasSuffix applies the HasSuffix predicate on the "og_description" field.
func OgDescriptionHasSuffix(v string) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldOgDescription), v))
	})
}

// OgDescriptionEqualFold applies the EqualFold predicate on the "og_description" field.
func OgDescriptionEqualFold(v string) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldOgDescription), v))
	})
}

// OgDescriptionContainsFold applies the ContainsFold predicate on the "og_description" field.
func OgDescriptionContainsFold(v string) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldOgDescription), v))
	})
}

// OgTypeEQ applies the EQ predicate on the "og_type" field.
func OgTypeEQ(v string) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldOgType), v))
	})
}

// OgTypeNEQ applies the NEQ predicate on the "og_type" field.
func OgTypeNEQ(v string) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldOgType), v))
	})
}

// OgTypeIn applies the In predicate on the "og_type" field.
func OgTypeIn(vs ...string) predicate.Page {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldOgType), v...))
	})
}

// OgTypeNotIn applies the NotIn predicate on the "og_type" field.
func OgTypeNotIn(vs ...string) predicate.Page {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldOgType), v...))
	})
}

// OgTypeGT applies the GT predicate on the "og_type" field.
func OgTypeGT(v string) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldOgType), v))
	})
}

// OgTypeGTE applies the GTE predicate on the "og_type" field.
func OgTypeGTE(v string) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldOgType), v))
	})
}

// OgTypeLT applies the LT predicate on the "og_type" field.
func OgTypeLT(v string) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldOgType), v))
	})
}

// OgTypeLTE applies the LTE predicate on the "og_type" field.
func OgTypeLTE(v string) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldOgType), v))
	})
}

// OgTypeContains applies the Contains predicate on the "og_type" field.
func OgTypeContains(v string) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldOgType), v))
	})
}

// OgTypeHasPrefix applies the HasPrefix predicate on the "og_type" field.
func OgTypeHasPrefix(v string) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldOgType), v))
	})
}

// OgTypeHasSuffix applies the HasSuffix predicate on the "og_type" field.
func OgTypeHasSuffix(v string) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldOgType), v))
	})
}

// OgTypeEqualFold applies the EqualFold predicate on the "og_type" field.
func OgTypeEqualFold(v string) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldOgType), v))
	})
}

// OgTypeContainsFold applies the ContainsFold predicate on the "og_type" field.
func OgTypeContainsFold(v string) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldOgType), v))
	})
}

// OgURLEQ applies the EQ predicate on the "og_url" field.
func OgURLEQ(v string) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldOgURL), v))
	})
}

// OgURLNEQ applies the NEQ predicate on the "og_url" field.
func OgURLNEQ(v string) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldOgURL), v))
	})
}

// OgURLIn applies the In predicate on the "og_url" field.
func OgURLIn(vs ...string) predicate.Page {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldOgURL), v...))
	})
}

// OgURLNotIn applies the NotIn predicate on the "og_url" field.
func OgURLNotIn(vs ...string) predicate.Page {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldOgURL), v...))
	})
}

// OgURLGT applies the GT predicate on the "og_url" field.
func OgURLGT(v string) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldOgURL), v))
	})
}

// OgURLGTE applies the GTE predicate on the "og_url" field.
func OgURLGTE(v string) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldOgURL), v))
	})
}

// OgURLLT applies the LT predicate on the "og_url" field.
func OgURLLT(v string) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldOgURL), v))
	})
}

// OgURLLTE applies the LTE predicate on the "og_url" field.
func OgURLLTE(v string) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldOgURL), v))
	})
}

// OgURLContains applies the Contains predicate on the "og_url" field.
func OgURLContains(v string) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldOgURL), v))
	})
}

// OgURLHasPrefix applies the HasPrefix predicate on the "og_url" field.
func OgURLHasPrefix(v string) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldOgURL), v))
	})
}

// OgURLHasSuffix applies the HasSuffix predicate on the "og_url" field.
func OgURLHasSuffix(v string) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldOgURL), v))
	})
}

// OgURLEqualFold applies the EqualFold predicate on the "og_url" field.
func OgURLEqualFold(v string) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldOgURL), v))
	})
}

// OgURLContainsFold applies the ContainsFold predicate on the "og_url" field.
func OgURLContainsFold(v string) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldOgURL), v))
	})
}

// OgImageEQ applies the EQ predicate on the "og_image" field.
func OgImageEQ(v string) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldOgImage), v))
	})
}

// OgImageNEQ applies the NEQ predicate on the "og_image" field.
func OgImageNEQ(v string) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldOgImage), v))
	})
}

// OgImageIn applies the In predicate on the "og_image" field.
func OgImageIn(vs ...string) predicate.Page {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldOgImage), v...))
	})
}

// OgImageNotIn applies the NotIn predicate on the "og_image" field.
func OgImageNotIn(vs ...string) predicate.Page {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldOgImage), v...))
	})
}

// OgImageGT applies the GT predicate on the "og_image" field.
func OgImageGT(v string) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldOgImage), v))
	})
}

// OgImageGTE applies the GTE predicate on the "og_image" field.
func OgImageGTE(v string) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldOgImage), v))
	})
}

// OgImageLT applies the LT predicate on the "og_image" field.
func OgImageLT(v string) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldOgImage), v))
	})
}

// OgImageLTE applies the LTE predicate on the "og_image" field.
func OgImageLTE(v string) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldOgImage), v))
	})
}

// OgImageContains applies the Contains predicate on the "og_image" field.
func OgImageContains(v string) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldOgImage), v))
	})
}

// OgImageHasPrefix applies the HasPrefix predicate on the "og_image" field.
func OgImageHasPrefix(v string) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldOgImage), v))
	})
}

// OgImageHasSuffix applies the HasSuffix predicate on the "og_image" field.
func OgImageHasSuffix(v string) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldOgImage), v))
	})
}

// OgImageEqualFold applies the EqualFold predicate on the "og_image" field.
func OgImageEqualFold(v string) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldOgImage), v))
	})
}

// OgImageContainsFold applies the ContainsFold predicate on the "og_image" field.
func OgImageContainsFold(v string) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldOgImage), v))
	})
}

// OgImageTypeEQ applies the EQ predicate on the "og_image_type" field.
func OgImageTypeEQ(v string) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldOgImageType), v))
	})
}

// OgImageTypeNEQ applies the NEQ predicate on the "og_image_type" field.
func OgImageTypeNEQ(v string) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldOgImageType), v))
	})
}

// OgImageTypeIn applies the In predicate on the "og_image_type" field.
func OgImageTypeIn(vs ...string) predicate.Page {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldOgImageType), v...))
	})
}

// OgImageTypeNotIn applies the NotIn predicate on the "og_image_type" field.
func OgImageTypeNotIn(vs ...string) predicate.Page {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldOgImageType), v...))
	})
}

// OgImageTypeGT applies the GT predicate on the "og_image_type" field.
func OgImageTypeGT(v string) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldOgImageType), v))
	})
}

// OgImageTypeGTE applies the GTE predicate on the "og_image_type" field.
func OgImageTypeGTE(v string) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldOgImageType), v))
	})
}

// OgImageTypeLT applies the LT predicate on the "og_image_type" field.
func OgImageTypeLT(v string) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldOgImageType), v))
	})
}

// OgImageTypeLTE applies the LTE predicate on the "og_image_type" field.
func OgImageTypeLTE(v string) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldOgImageType), v))
	})
}

// OgImageTypeContains applies the Contains predicate on the "og_image_type" field.
func OgImageTypeContains(v string) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldOgImageType), v))
	})
}

// OgImageTypeHasPrefix applies the HasPrefix predicate on the "og_image_type" field.
func OgImageTypeHasPrefix(v string) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldOgImageType), v))
	})
}

// OgImageTypeHasSuffix applies the HasSuffix predicate on the "og_image_type" field.
func OgImageTypeHasSuffix(v string) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldOgImageType), v))
	})
}

// OgImageTypeEqualFold applies the EqualFold predicate on the "og_image_type" field.
func OgImageTypeEqualFold(v string) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldOgImageType), v))
	})
}

// OgImageTypeContainsFold applies the ContainsFold predicate on the "og_image_type" field.
func OgImageTypeContainsFold(v string) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldOgImageType), v))
	})
}

// OgImageURLEQ applies the EQ predicate on the "og_image_url" field.
func OgImageURLEQ(v string) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldOgImageURL), v))
	})
}

// OgImageURLNEQ applies the NEQ predicate on the "og_image_url" field.
func OgImageURLNEQ(v string) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldOgImageURL), v))
	})
}

// OgImageURLIn applies the In predicate on the "og_image_url" field.
func OgImageURLIn(vs ...string) predicate.Page {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldOgImageURL), v...))
	})
}

// OgImageURLNotIn applies the NotIn predicate on the "og_image_url" field.
func OgImageURLNotIn(vs ...string) predicate.Page {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldOgImageURL), v...))
	})
}

// OgImageURLGT applies the GT predicate on the "og_image_url" field.
func OgImageURLGT(v string) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldOgImageURL), v))
	})
}

// OgImageURLGTE applies the GTE predicate on the "og_image_url" field.
func OgImageURLGTE(v string) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldOgImageURL), v))
	})
}

// OgImageURLLT applies the LT predicate on the "og_image_url" field.
func OgImageURLLT(v string) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldOgImageURL), v))
	})
}

// OgImageURLLTE applies the LTE predicate on the "og_image_url" field.
func OgImageURLLTE(v string) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldOgImageURL), v))
	})
}

// OgImageURLContains applies the Contains predicate on the "og_image_url" field.
func OgImageURLContains(v string) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldOgImageURL), v))
	})
}

// OgImageURLHasPrefix applies the HasPrefix predicate on the "og_image_url" field.
func OgImageURLHasPrefix(v string) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldOgImageURL), v))
	})
}

// OgImageURLHasSuffix applies the HasSuffix predicate on the "og_image_url" field.
func OgImageURLHasSuffix(v string) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldOgImageURL), v))
	})
}

// OgImageURLEqualFold applies the EqualFold predicate on the "og_image_url" field.
func OgImageURLEqualFold(v string) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldOgImageURL), v))
	})
}

// OgImageURLContainsFold applies the ContainsFold predicate on the "og_image_url" field.
func OgImageURLContainsFold(v string) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldOgImageURL), v))
	})
}

// OgImageSecureURLEQ applies the EQ predicate on the "og_image_secure_url" field.
func OgImageSecureURLEQ(v string) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldOgImageSecureURL), v))
	})
}

// OgImageSecureURLNEQ applies the NEQ predicate on the "og_image_secure_url" field.
func OgImageSecureURLNEQ(v string) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldOgImageSecureURL), v))
	})
}

// OgImageSecureURLIn applies the In predicate on the "og_image_secure_url" field.
func OgImageSecureURLIn(vs ...string) predicate.Page {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldOgImageSecureURL), v...))
	})
}

// OgImageSecureURLNotIn applies the NotIn predicate on the "og_image_secure_url" field.
func OgImageSecureURLNotIn(vs ...string) predicate.Page {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldOgImageSecureURL), v...))
	})
}

// OgImageSecureURLGT applies the GT predicate on the "og_image_secure_url" field.
func OgImageSecureURLGT(v string) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldOgImageSecureURL), v))
	})
}

// OgImageSecureURLGTE applies the GTE predicate on the "og_image_secure_url" field.
func OgImageSecureURLGTE(v string) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldOgImageSecureURL), v))
	})
}

// OgImageSecureURLLT applies the LT predicate on the "og_image_secure_url" field.
func OgImageSecureURLLT(v string) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldOgImageSecureURL), v))
	})
}

// OgImageSecureURLLTE applies the LTE predicate on the "og_image_secure_url" field.
func OgImageSecureURLLTE(v string) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldOgImageSecureURL), v))
	})
}

// OgImageSecureURLContains applies the Contains predicate on the "og_image_secure_url" field.
func OgImageSecureURLContains(v string) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldOgImageSecureURL), v))
	})
}

// OgImageSecureURLHasPrefix applies the HasPrefix predicate on the "og_image_secure_url" field.
func OgImageSecureURLHasPrefix(v string) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldOgImageSecureURL), v))
	})
}

// OgImageSecureURLHasSuffix applies the HasSuffix predicate on the "og_image_secure_url" field.
func OgImageSecureURLHasSuffix(v string) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldOgImageSecureURL), v))
	})
}

// OgImageSecureURLEqualFold applies the EqualFold predicate on the "og_image_secure_url" field.
func OgImageSecureURLEqualFold(v string) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldOgImageSecureURL), v))
	})
}

// OgImageSecureURLContainsFold applies the ContainsFold predicate on the "og_image_secure_url" field.
func OgImageSecureURLContainsFold(v string) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldOgImageSecureURL), v))
	})
}

// OgImageWidthEQ applies the EQ predicate on the "og_image_width" field.
func OgImageWidthEQ(v string) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldOgImageWidth), v))
	})
}

// OgImageWidthNEQ applies the NEQ predicate on the "og_image_width" field.
func OgImageWidthNEQ(v string) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldOgImageWidth), v))
	})
}

// OgImageWidthIn applies the In predicate on the "og_image_width" field.
func OgImageWidthIn(vs ...string) predicate.Page {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldOgImageWidth), v...))
	})
}

// OgImageWidthNotIn applies the NotIn predicate on the "og_image_width" field.
func OgImageWidthNotIn(vs ...string) predicate.Page {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldOgImageWidth), v...))
	})
}

// OgImageWidthGT applies the GT predicate on the "og_image_width" field.
func OgImageWidthGT(v string) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldOgImageWidth), v))
	})
}

// OgImageWidthGTE applies the GTE predicate on the "og_image_width" field.
func OgImageWidthGTE(v string) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldOgImageWidth), v))
	})
}

// OgImageWidthLT applies the LT predicate on the "og_image_width" field.
func OgImageWidthLT(v string) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldOgImageWidth), v))
	})
}

// OgImageWidthLTE applies the LTE predicate on the "og_image_width" field.
func OgImageWidthLTE(v string) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldOgImageWidth), v))
	})
}

// OgImageWidthContains applies the Contains predicate on the "og_image_width" field.
func OgImageWidthContains(v string) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldOgImageWidth), v))
	})
}

// OgImageWidthHasPrefix applies the HasPrefix predicate on the "og_image_width" field.
func OgImageWidthHasPrefix(v string) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldOgImageWidth), v))
	})
}

// OgImageWidthHasSuffix applies the HasSuffix predicate on the "og_image_width" field.
func OgImageWidthHasSuffix(v string) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldOgImageWidth), v))
	})
}

// OgImageWidthEqualFold applies the EqualFold predicate on the "og_image_width" field.
func OgImageWidthEqualFold(v string) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldOgImageWidth), v))
	})
}

// OgImageWidthContainsFold applies the ContainsFold predicate on the "og_image_width" field.
func OgImageWidthContainsFold(v string) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldOgImageWidth), v))
	})
}

// OgImageHeightEQ applies the EQ predicate on the "og_image_height" field.
func OgImageHeightEQ(v string) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldOgImageHeight), v))
	})
}

// OgImageHeightNEQ applies the NEQ predicate on the "og_image_height" field.
func OgImageHeightNEQ(v string) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldOgImageHeight), v))
	})
}

// OgImageHeightIn applies the In predicate on the "og_image_height" field.
func OgImageHeightIn(vs ...string) predicate.Page {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldOgImageHeight), v...))
	})
}

// OgImageHeightNotIn applies the NotIn predicate on the "og_image_height" field.
func OgImageHeightNotIn(vs ...string) predicate.Page {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldOgImageHeight), v...))
	})
}

// OgImageHeightGT applies the GT predicate on the "og_image_height" field.
func OgImageHeightGT(v string) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldOgImageHeight), v))
	})
}

// OgImageHeightGTE applies the GTE predicate on the "og_image_height" field.
func OgImageHeightGTE(v string) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldOgImageHeight), v))
	})
}

// OgImageHeightLT applies the LT predicate on the "og_image_height" field.
func OgImageHeightLT(v string) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldOgImageHeight), v))
	})
}

// OgImageHeightLTE applies the LTE predicate on the "og_image_height" field.
func OgImageHeightLTE(v string) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldOgImageHeight), v))
	})
}

// OgImageHeightContains applies the Contains predicate on the "og_image_height" field.
func OgImageHeightContains(v string) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldOgImageHeight), v))
	})
}

// OgImageHeightHasPrefix applies the HasPrefix predicate on the "og_image_height" field.
func OgImageHeightHasPrefix(v string) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldOgImageHeight), v))
	})
}

// OgImageHeightHasSuffix applies the HasSuffix predicate on the "og_image_height" field.
func OgImageHeightHasSuffix(v string) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldOgImageHeight), v))
	})
}

// OgImageHeightEqualFold applies the EqualFold predicate on the "og_image_height" field.
func OgImageHeightEqualFold(v string) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldOgImageHeight), v))
	})
}

// OgImageHeightContainsFold applies the ContainsFold predicate on the "og_image_height" field.
func OgImageHeightContainsFold(v string) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldOgImageHeight), v))
	})
}

// OgVideoEQ applies the EQ predicate on the "og_video" field.
func OgVideoEQ(v string) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldOgVideo), v))
	})
}

// OgVideoNEQ applies the NEQ predicate on the "og_video" field.
func OgVideoNEQ(v string) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldOgVideo), v))
	})
}

// OgVideoIn applies the In predicate on the "og_video" field.
func OgVideoIn(vs ...string) predicate.Page {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldOgVideo), v...))
	})
}

// OgVideoNotIn applies the NotIn predicate on the "og_video" field.
func OgVideoNotIn(vs ...string) predicate.Page {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldOgVideo), v...))
	})
}

// OgVideoGT applies the GT predicate on the "og_video" field.
func OgVideoGT(v string) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldOgVideo), v))
	})
}

// OgVideoGTE applies the GTE predicate on the "og_video" field.
func OgVideoGTE(v string) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldOgVideo), v))
	})
}

// OgVideoLT applies the LT predicate on the "og_video" field.
func OgVideoLT(v string) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldOgVideo), v))
	})
}

// OgVideoLTE applies the LTE predicate on the "og_video" field.
func OgVideoLTE(v string) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldOgVideo), v))
	})
}

// OgVideoContains applies the Contains predicate on the "og_video" field.
func OgVideoContains(v string) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldOgVideo), v))
	})
}

// OgVideoHasPrefix applies the HasPrefix predicate on the "og_video" field.
func OgVideoHasPrefix(v string) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldOgVideo), v))
	})
}

// OgVideoHasSuffix applies the HasSuffix predicate on the "og_video" field.
func OgVideoHasSuffix(v string) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldOgVideo), v))
	})
}

// OgVideoEqualFold applies the EqualFold predicate on the "og_video" field.
func OgVideoEqualFold(v string) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldOgVideo), v))
	})
}

// OgVideoContainsFold applies the ContainsFold predicate on the "og_video" field.
func OgVideoContainsFold(v string) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldOgVideo), v))
	})
}

// OgVideoTypeEQ applies the EQ predicate on the "og_video_type" field.
func OgVideoTypeEQ(v string) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldOgVideoType), v))
	})
}

// OgVideoTypeNEQ applies the NEQ predicate on the "og_video_type" field.
func OgVideoTypeNEQ(v string) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldOgVideoType), v))
	})
}

// OgVideoTypeIn applies the In predicate on the "og_video_type" field.
func OgVideoTypeIn(vs ...string) predicate.Page {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldOgVideoType), v...))
	})
}

// OgVideoTypeNotIn applies the NotIn predicate on the "og_video_type" field.
func OgVideoTypeNotIn(vs ...string) predicate.Page {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldOgVideoType), v...))
	})
}

// OgVideoTypeGT applies the GT predicate on the "og_video_type" field.
func OgVideoTypeGT(v string) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldOgVideoType), v))
	})
}

// OgVideoTypeGTE applies the GTE predicate on the "og_video_type" field.
func OgVideoTypeGTE(v string) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldOgVideoType), v))
	})
}

// OgVideoTypeLT applies the LT predicate on the "og_video_type" field.
func OgVideoTypeLT(v string) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldOgVideoType), v))
	})
}

// OgVideoTypeLTE applies the LTE predicate on the "og_video_type" field.
func OgVideoTypeLTE(v string) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldOgVideoType), v))
	})
}

// OgVideoTypeContains applies the Contains predicate on the "og_video_type" field.
func OgVideoTypeContains(v string) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldOgVideoType), v))
	})
}

// OgVideoTypeHasPrefix applies the HasPrefix predicate on the "og_video_type" field.
func OgVideoTypeHasPrefix(v string) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldOgVideoType), v))
	})
}

// OgVideoTypeHasSuffix applies the HasSuffix predicate on the "og_video_type" field.
func OgVideoTypeHasSuffix(v string) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldOgVideoType), v))
	})
}

// OgVideoTypeEqualFold applies the EqualFold predicate on the "og_video_type" field.
func OgVideoTypeEqualFold(v string) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldOgVideoType), v))
	})
}

// OgVideoTypeContainsFold applies the ContainsFold predicate on the "og_video_type" field.
func OgVideoTypeContainsFold(v string) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldOgVideoType), v))
	})
}

// OgVideoURLEQ applies the EQ predicate on the "og_video_url" field.
func OgVideoURLEQ(v string) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldOgVideoURL), v))
	})
}

// OgVideoURLNEQ applies the NEQ predicate on the "og_video_url" field.
func OgVideoURLNEQ(v string) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldOgVideoURL), v))
	})
}

// OgVideoURLIn applies the In predicate on the "og_video_url" field.
func OgVideoURLIn(vs ...string) predicate.Page {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldOgVideoURL), v...))
	})
}

// OgVideoURLNotIn applies the NotIn predicate on the "og_video_url" field.
func OgVideoURLNotIn(vs ...string) predicate.Page {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldOgVideoURL), v...))
	})
}

// OgVideoURLGT applies the GT predicate on the "og_video_url" field.
func OgVideoURLGT(v string) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldOgVideoURL), v))
	})
}

// OgVideoURLGTE applies the GTE predicate on the "og_video_url" field.
func OgVideoURLGTE(v string) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldOgVideoURL), v))
	})
}

// OgVideoURLLT applies the LT predicate on the "og_video_url" field.
func OgVideoURLLT(v string) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldOgVideoURL), v))
	})
}

// OgVideoURLLTE applies the LTE predicate on the "og_video_url" field.
func OgVideoURLLTE(v string) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldOgVideoURL), v))
	})
}

// OgVideoURLContains applies the Contains predicate on the "og_video_url" field.
func OgVideoURLContains(v string) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldOgVideoURL), v))
	})
}

// OgVideoURLHasPrefix applies the HasPrefix predicate on the "og_video_url" field.
func OgVideoURLHasPrefix(v string) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldOgVideoURL), v))
	})
}

// OgVideoURLHasSuffix applies the HasSuffix predicate on the "og_video_url" field.
func OgVideoURLHasSuffix(v string) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldOgVideoURL), v))
	})
}

// OgVideoURLEqualFold applies the EqualFold predicate on the "og_video_url" field.
func OgVideoURLEqualFold(v string) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldOgVideoURL), v))
	})
}

// OgVideoURLContainsFold applies the ContainsFold predicate on the "og_video_url" field.
func OgVideoURLContainsFold(v string) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldOgVideoURL), v))
	})
}

// OgVideoSecureURLEQ applies the EQ predicate on the "og_video_secure_url" field.
func OgVideoSecureURLEQ(v string) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldOgVideoSecureURL), v))
	})
}

// OgVideoSecureURLNEQ applies the NEQ predicate on the "og_video_secure_url" field.
func OgVideoSecureURLNEQ(v string) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldOgVideoSecureURL), v))
	})
}

// OgVideoSecureURLIn applies the In predicate on the "og_video_secure_url" field.
func OgVideoSecureURLIn(vs ...string) predicate.Page {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldOgVideoSecureURL), v...))
	})
}

// OgVideoSecureURLNotIn applies the NotIn predicate on the "og_video_secure_url" field.
func OgVideoSecureURLNotIn(vs ...string) predicate.Page {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldOgVideoSecureURL), v...))
	})
}

// OgVideoSecureURLGT applies the GT predicate on the "og_video_secure_url" field.
func OgVideoSecureURLGT(v string) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldOgVideoSecureURL), v))
	})
}

// OgVideoSecureURLGTE applies the GTE predicate on the "og_video_secure_url" field.
func OgVideoSecureURLGTE(v string) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldOgVideoSecureURL), v))
	})
}

// OgVideoSecureURLLT applies the LT predicate on the "og_video_secure_url" field.
func OgVideoSecureURLLT(v string) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldOgVideoSecureURL), v))
	})
}

// OgVideoSecureURLLTE applies the LTE predicate on the "og_video_secure_url" field.
func OgVideoSecureURLLTE(v string) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldOgVideoSecureURL), v))
	})
}

// OgVideoSecureURLContains applies the Contains predicate on the "og_video_secure_url" field.
func OgVideoSecureURLContains(v string) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldOgVideoSecureURL), v))
	})
}

// OgVideoSecureURLHasPrefix applies the HasPrefix predicate on the "og_video_secure_url" field.
func OgVideoSecureURLHasPrefix(v string) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldOgVideoSecureURL), v))
	})
}

// OgVideoSecureURLHasSuffix applies the HasSuffix predicate on the "og_video_secure_url" field.
func OgVideoSecureURLHasSuffix(v string) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldOgVideoSecureURL), v))
	})
}

// OgVideoSecureURLEqualFold applies the EqualFold predicate on the "og_video_secure_url" field.
func OgVideoSecureURLEqualFold(v string) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldOgVideoSecureURL), v))
	})
}

// OgVideoSecureURLContainsFold applies the ContainsFold predicate on the "og_video_secure_url" field.
func OgVideoSecureURLContainsFold(v string) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldOgVideoSecureURL), v))
	})
}

// OgVideoWidthEQ applies the EQ predicate on the "og_video_width" field.
func OgVideoWidthEQ(v string) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldOgVideoWidth), v))
	})
}

// OgVideoWidthNEQ applies the NEQ predicate on the "og_video_width" field.
func OgVideoWidthNEQ(v string) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldOgVideoWidth), v))
	})
}

// OgVideoWidthIn applies the In predicate on the "og_video_width" field.
func OgVideoWidthIn(vs ...string) predicate.Page {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldOgVideoWidth), v...))
	})
}

// OgVideoWidthNotIn applies the NotIn predicate on the "og_video_width" field.
func OgVideoWidthNotIn(vs ...string) predicate.Page {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldOgVideoWidth), v...))
	})
}

// OgVideoWidthGT applies the GT predicate on the "og_video_width" field.
func OgVideoWidthGT(v string) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldOgVideoWidth), v))
	})
}

// OgVideoWidthGTE applies the GTE predicate on the "og_video_width" field.
func OgVideoWidthGTE(v string) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldOgVideoWidth), v))
	})
}

// OgVideoWidthLT applies the LT predicate on the "og_video_width" field.
func OgVideoWidthLT(v string) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldOgVideoWidth), v))
	})
}

// OgVideoWidthLTE applies the LTE predicate on the "og_video_width" field.
func OgVideoWidthLTE(v string) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldOgVideoWidth), v))
	})
}

// OgVideoWidthContains applies the Contains predicate on the "og_video_width" field.
func OgVideoWidthContains(v string) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldOgVideoWidth), v))
	})
}

// OgVideoWidthHasPrefix applies the HasPrefix predicate on the "og_video_width" field.
func OgVideoWidthHasPrefix(v string) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldOgVideoWidth), v))
	})
}

// OgVideoWidthHasSuffix applies the HasSuffix predicate on the "og_video_width" field.
func OgVideoWidthHasSuffix(v string) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldOgVideoWidth), v))
	})
}

// OgVideoWidthEqualFold applies the EqualFold predicate on the "og_video_width" field.
func OgVideoWidthEqualFold(v string) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldOgVideoWidth), v))
	})
}

// OgVideoWidthContainsFold applies the ContainsFold predicate on the "og_video_width" field.
func OgVideoWidthContainsFold(v string) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldOgVideoWidth), v))
	})
}

// OgVideoHeightEQ applies the EQ predicate on the "og_video_height" field.
func OgVideoHeightEQ(v string) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldOgVideoHeight), v))
	})
}

// OgVideoHeightNEQ applies the NEQ predicate on the "og_video_height" field.
func OgVideoHeightNEQ(v string) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldOgVideoHeight), v))
	})
}

// OgVideoHeightIn applies the In predicate on the "og_video_height" field.
func OgVideoHeightIn(vs ...string) predicate.Page {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldOgVideoHeight), v...))
	})
}

// OgVideoHeightNotIn applies the NotIn predicate on the "og_video_height" field.
func OgVideoHeightNotIn(vs ...string) predicate.Page {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldOgVideoHeight), v...))
	})
}

// OgVideoHeightGT applies the GT predicate on the "og_video_height" field.
func OgVideoHeightGT(v string) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldOgVideoHeight), v))
	})
}

// OgVideoHeightGTE applies the GTE predicate on the "og_video_height" field.
func OgVideoHeightGTE(v string) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldOgVideoHeight), v))
	})
}

// OgVideoHeightLT applies the LT predicate on the "og_video_height" field.
func OgVideoHeightLT(v string) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldOgVideoHeight), v))
	})
}

// OgVideoHeightLTE applies the LTE predicate on the "og_video_height" field.
func OgVideoHeightLTE(v string) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldOgVideoHeight), v))
	})
}

// OgVideoHeightContains applies the Contains predicate on the "og_video_height" field.
func OgVideoHeightContains(v string) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldOgVideoHeight), v))
	})
}

// OgVideoHeightHasPrefix applies the HasPrefix predicate on the "og_video_height" field.
func OgVideoHeightHasPrefix(v string) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldOgVideoHeight), v))
	})
}

// OgVideoHeightHasSuffix applies the HasSuffix predicate on the "og_video_height" field.
func OgVideoHeightHasSuffix(v string) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldOgVideoHeight), v))
	})
}

// OgVideoHeightEqualFold applies the EqualFold predicate on the "og_video_height" field.
func OgVideoHeightEqualFold(v string) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldOgVideoHeight), v))
	})
}

// OgVideoHeightContainsFold applies the ContainsFold predicate on the "og_video_height" field.
func OgVideoHeightContainsFold(v string) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldOgVideoHeight), v))
	})
}

// HasPageSource applies the HasEdge predicate on the "page_source" edge.
func HasPageSource() predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(PageSourceTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, PageSourceTable, PageSourceColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasPageSourceWith applies the HasEdge predicate on the "page_source" edge with a given conditions (other predicates).
func HasPageSourceWith(preds ...predicate.PageSource) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(PageSourceInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, PageSourceTable, PageSourceColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Page) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Page) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Page) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		p(s.Not())
	})
}
