// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/drakejin/crawler/internal/storage/db/ent/pagelink"
	"github.com/drakejin/crawler/internal/storage/db/ent/predicate"
)

// PageLinkUpdate is the builder for updating PageLink entities.
type PageLinkUpdate struct {
	config
	hooks    []Hook
	mutation *PageLinkMutation
}

// Where appends a list predicates to the PageLinkUpdate builder.
func (plu *PageLinkUpdate) Where(ps ...predicate.PageLink) *PageLinkUpdate {
	plu.mutation.Where(ps...)
	return plu
}

// SetSourceID sets the "source_id" field.
func (plu *PageLinkUpdate) SetSourceID(i int64) *PageLinkUpdate {
	plu.mutation.ResetSourceID()
	plu.mutation.SetSourceID(i)
	return plu
}

// AddSourceID adds i to the "source_id" field.
func (plu *PageLinkUpdate) AddSourceID(i int64) *PageLinkUpdate {
	plu.mutation.AddSourceID(i)
	return plu
}

// SetTargetID sets the "target_id" field.
func (plu *PageLinkUpdate) SetTargetID(i int64) *PageLinkUpdate {
	plu.mutation.ResetTargetID()
	plu.mutation.SetTargetID(i)
	return plu
}

// AddTargetID adds i to the "target_id" field.
func (plu *PageLinkUpdate) AddTargetID(i int64) *PageLinkUpdate {
	plu.mutation.AddTargetID(i)
	return plu
}

// SetCreatedBy sets the "created_by" field.
func (plu *PageLinkUpdate) SetCreatedBy(s string) *PageLinkUpdate {
	plu.mutation.SetCreatedBy(s)
	return plu
}

// SetUpdatedAt sets the "updated_at" field.
func (plu *PageLinkUpdate) SetUpdatedAt(t time.Time) *PageLinkUpdate {
	plu.mutation.SetUpdatedAt(t)
	return plu
}

// SetUpdatedBy sets the "updated_by" field.
func (plu *PageLinkUpdate) SetUpdatedBy(s string) *PageLinkUpdate {
	plu.mutation.SetUpdatedBy(s)
	return plu
}

// Mutation returns the PageLinkMutation object of the builder.
func (plu *PageLinkUpdate) Mutation() *PageLinkMutation {
	return plu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (plu *PageLinkUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	plu.defaults()
	if len(plu.hooks) == 0 {
		if err = plu.check(); err != nil {
			return 0, err
		}
		affected, err = plu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*PageLinkMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = plu.check(); err != nil {
				return 0, err
			}
			plu.mutation = mutation
			affected, err = plu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(plu.hooks) - 1; i >= 0; i-- {
			if plu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = plu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, plu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (plu *PageLinkUpdate) SaveX(ctx context.Context) int {
	affected, err := plu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (plu *PageLinkUpdate) Exec(ctx context.Context) error {
	_, err := plu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (plu *PageLinkUpdate) ExecX(ctx context.Context) {
	if err := plu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (plu *PageLinkUpdate) defaults() {
	if _, ok := plu.mutation.UpdatedAt(); !ok {
		v := pagelink.UpdateDefaultUpdatedAt()
		plu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (plu *PageLinkUpdate) check() error {
	if v, ok := plu.mutation.CreatedBy(); ok {
		if err := pagelink.CreatedByValidator(v); err != nil {
			return &ValidationError{Name: "created_by", err: fmt.Errorf(`ent: validator failed for field "PageLink.created_by": %w`, err)}
		}
	}
	if v, ok := plu.mutation.UpdatedBy(); ok {
		if err := pagelink.UpdatedByValidator(v); err != nil {
			return &ValidationError{Name: "updated_by", err: fmt.Errorf(`ent: validator failed for field "PageLink.updated_by": %w`, err)}
		}
	}
	return nil
}

func (plu *PageLinkUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   pagelink.Table,
			Columns: pagelink.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: pagelink.FieldID,
			},
		},
	}
	if ps := plu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := plu.mutation.SourceID(); ok {
		_spec.SetField(pagelink.FieldSourceID, field.TypeInt64, value)
	}
	if value, ok := plu.mutation.AddedSourceID(); ok {
		_spec.AddField(pagelink.FieldSourceID, field.TypeInt64, value)
	}
	if value, ok := plu.mutation.TargetID(); ok {
		_spec.SetField(pagelink.FieldTargetID, field.TypeInt64, value)
	}
	if value, ok := plu.mutation.AddedTargetID(); ok {
		_spec.AddField(pagelink.FieldTargetID, field.TypeInt64, value)
	}
	if value, ok := plu.mutation.CreatedBy(); ok {
		_spec.SetField(pagelink.FieldCreatedBy, field.TypeString, value)
	}
	if value, ok := plu.mutation.UpdatedAt(); ok {
		_spec.SetField(pagelink.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := plu.mutation.UpdatedBy(); ok {
		_spec.SetField(pagelink.FieldUpdatedBy, field.TypeString, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, plu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{pagelink.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	return n, nil
}

// PageLinkUpdateOne is the builder for updating a single PageLink entity.
type PageLinkUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *PageLinkMutation
}

// SetSourceID sets the "source_id" field.
func (pluo *PageLinkUpdateOne) SetSourceID(i int64) *PageLinkUpdateOne {
	pluo.mutation.ResetSourceID()
	pluo.mutation.SetSourceID(i)
	return pluo
}

// AddSourceID adds i to the "source_id" field.
func (pluo *PageLinkUpdateOne) AddSourceID(i int64) *PageLinkUpdateOne {
	pluo.mutation.AddSourceID(i)
	return pluo
}

// SetTargetID sets the "target_id" field.
func (pluo *PageLinkUpdateOne) SetTargetID(i int64) *PageLinkUpdateOne {
	pluo.mutation.ResetTargetID()
	pluo.mutation.SetTargetID(i)
	return pluo
}

// AddTargetID adds i to the "target_id" field.
func (pluo *PageLinkUpdateOne) AddTargetID(i int64) *PageLinkUpdateOne {
	pluo.mutation.AddTargetID(i)
	return pluo
}

// SetCreatedBy sets the "created_by" field.
func (pluo *PageLinkUpdateOne) SetCreatedBy(s string) *PageLinkUpdateOne {
	pluo.mutation.SetCreatedBy(s)
	return pluo
}

// SetUpdatedAt sets the "updated_at" field.
func (pluo *PageLinkUpdateOne) SetUpdatedAt(t time.Time) *PageLinkUpdateOne {
	pluo.mutation.SetUpdatedAt(t)
	return pluo
}

// SetUpdatedBy sets the "updated_by" field.
func (pluo *PageLinkUpdateOne) SetUpdatedBy(s string) *PageLinkUpdateOne {
	pluo.mutation.SetUpdatedBy(s)
	return pluo
}

// Mutation returns the PageLinkMutation object of the builder.
func (pluo *PageLinkUpdateOne) Mutation() *PageLinkMutation {
	return pluo.mutation
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (pluo *PageLinkUpdateOne) Select(field string, fields ...string) *PageLinkUpdateOne {
	pluo.fields = append([]string{field}, fields...)
	return pluo
}

// Save executes the query and returns the updated PageLink entity.
func (pluo *PageLinkUpdateOne) Save(ctx context.Context) (*PageLink, error) {
	var (
		err  error
		node *PageLink
	)
	pluo.defaults()
	if len(pluo.hooks) == 0 {
		if err = pluo.check(); err != nil {
			return nil, err
		}
		node, err = pluo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*PageLinkMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = pluo.check(); err != nil {
				return nil, err
			}
			pluo.mutation = mutation
			node, err = pluo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(pluo.hooks) - 1; i >= 0; i-- {
			if pluo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = pluo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, pluo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*PageLink)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from PageLinkMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (pluo *PageLinkUpdateOne) SaveX(ctx context.Context) *PageLink {
	node, err := pluo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (pluo *PageLinkUpdateOne) Exec(ctx context.Context) error {
	_, err := pluo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pluo *PageLinkUpdateOne) ExecX(ctx context.Context) {
	if err := pluo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pluo *PageLinkUpdateOne) defaults() {
	if _, ok := pluo.mutation.UpdatedAt(); !ok {
		v := pagelink.UpdateDefaultUpdatedAt()
		pluo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pluo *PageLinkUpdateOne) check() error {
	if v, ok := pluo.mutation.CreatedBy(); ok {
		if err := pagelink.CreatedByValidator(v); err != nil {
			return &ValidationError{Name: "created_by", err: fmt.Errorf(`ent: validator failed for field "PageLink.created_by": %w`, err)}
		}
	}
	if v, ok := pluo.mutation.UpdatedBy(); ok {
		if err := pagelink.UpdatedByValidator(v); err != nil {
			return &ValidationError{Name: "updated_by", err: fmt.Errorf(`ent: validator failed for field "PageLink.updated_by": %w`, err)}
		}
	}
	return nil
}

func (pluo *PageLinkUpdateOne) sqlSave(ctx context.Context) (_node *PageLink, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   pagelink.Table,
			Columns: pagelink.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: pagelink.FieldID,
			},
		},
	}
	id, ok := pluo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "PageLink.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := pluo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, pagelink.FieldID)
		for _, f := range fields {
			if !pagelink.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != pagelink.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := pluo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pluo.mutation.SourceID(); ok {
		_spec.SetField(pagelink.FieldSourceID, field.TypeInt64, value)
	}
	if value, ok := pluo.mutation.AddedSourceID(); ok {
		_spec.AddField(pagelink.FieldSourceID, field.TypeInt64, value)
	}
	if value, ok := pluo.mutation.TargetID(); ok {
		_spec.SetField(pagelink.FieldTargetID, field.TypeInt64, value)
	}
	if value, ok := pluo.mutation.AddedTargetID(); ok {
		_spec.AddField(pagelink.FieldTargetID, field.TypeInt64, value)
	}
	if value, ok := pluo.mutation.CreatedBy(); ok {
		_spec.SetField(pagelink.FieldCreatedBy, field.TypeString, value)
	}
	if value, ok := pluo.mutation.UpdatedAt(); ok {
		_spec.SetField(pagelink.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := pluo.mutation.UpdatedBy(); ok {
		_spec.SetField(pagelink.FieldUpdatedBy, field.TypeString, value)
	}
	_node = &PageLink{config: pluo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, pluo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{pagelink.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}
