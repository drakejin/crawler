// Code generated by ent, DO NOT EDIT.

package pageinfo

import (
	"fmt"
	"time"
)

const (
	// Label holds the string label denoting the pageinfo type in the database.
	Label = "page_info"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldDomain holds the string denoting the domain field in the database.
	FieldDomain = "domain"
	// FieldPort holds the string denoting the port field in the database.
	FieldPort = "port"
	// FieldIsHTTPS holds the string denoting the is_https field in the database.
	FieldIsHTTPS = "is_https"
	// FieldIndexedURL holds the string denoting the indexed_url field in the database.
	FieldIndexedURL = "indexed_url"
	// FieldPath holds the string denoting the path field in the database.
	FieldPath = "path"
	// FieldQuerystring holds the string denoting the querystring field in the database.
	FieldQuerystring = "querystring"
	// FieldURL holds the string denoting the url field in the database.
	FieldURL = "url"
	// FieldCountReferred holds the string denoting the count_referred field in the database.
	FieldCountReferred = "count_referred"
	// FieldStatus holds the string denoting the status field in the database.
	FieldStatus = "status"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldCreatedBy holds the string denoting the created_by field in the database.
	FieldCreatedBy = "created_by"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldUpdatedBy holds the string denoting the updated_by field in the database.
	FieldUpdatedBy = "updated_by"
	// FieldTitle holds the string denoting the title field in the database.
	FieldTitle = "title"
	// FieldDescription holds the string denoting the description field in the database.
	FieldDescription = "description"
	// FieldKeywords holds the string denoting the keywords field in the database.
	FieldKeywords = "keywords"
	// FieldContentLanguage holds the string denoting the content_language field in the database.
	FieldContentLanguage = "content_language"
	// FieldTwitterCard holds the string denoting the twitter_card field in the database.
	FieldTwitterCard = "twitter_card"
	// FieldTwitterURL holds the string denoting the twitter_url field in the database.
	FieldTwitterURL = "twitter_url"
	// FieldTwitterTitle holds the string denoting the twitter_title field in the database.
	FieldTwitterTitle = "twitter_title"
	// FieldTwitterDescription holds the string denoting the twitter_description field in the database.
	FieldTwitterDescription = "twitter_description"
	// FieldTwitterImage holds the string denoting the twitter_image field in the database.
	FieldTwitterImage = "twitter_image"
	// FieldOgSiteName holds the string denoting the og_site_name field in the database.
	FieldOgSiteName = "og_site_name"
	// FieldOgLocale holds the string denoting the og_locale field in the database.
	FieldOgLocale = "og_locale"
	// FieldOgTitle holds the string denoting the og_title field in the database.
	FieldOgTitle = "og_title"
	// FieldOgDescription holds the string denoting the og_description field in the database.
	FieldOgDescription = "og_description"
	// FieldOgType holds the string denoting the og_type field in the database.
	FieldOgType = "og_type"
	// FieldOgURL holds the string denoting the og_url field in the database.
	FieldOgURL = "og_url"
	// FieldOgImage holds the string denoting the og_image field in the database.
	FieldOgImage = "og_image"
	// FieldOgImageType holds the string denoting the og_image_type field in the database.
	FieldOgImageType = "og_image_type"
	// FieldOgImageURL holds the string denoting the og_image_url field in the database.
	FieldOgImageURL = "og_image_url"
	// FieldOgImageSecureURL holds the string denoting the og_image_secure_url field in the database.
	FieldOgImageSecureURL = "og_image_secure_url"
	// FieldOgImageWidth holds the string denoting the og_image_width field in the database.
	FieldOgImageWidth = "og_image_width"
	// FieldOgImageHeight holds the string denoting the og_image_height field in the database.
	FieldOgImageHeight = "og_image_height"
	// FieldOgVideo holds the string denoting the og_video field in the database.
	FieldOgVideo = "og_video"
	// FieldOgVideoType holds the string denoting the og_video_type field in the database.
	FieldOgVideoType = "og_video_type"
	// FieldOgVideoURL holds the string denoting the og_video_url field in the database.
	FieldOgVideoURL = "og_video_url"
	// FieldOgVideoSecureURL holds the string denoting the og_video_secure_url field in the database.
	FieldOgVideoSecureURL = "og_video_secure_url"
	// FieldOgVideoWidth holds the string denoting the og_video_width field in the database.
	FieldOgVideoWidth = "og_video_width"
	// FieldOgVideoHeight holds the string denoting the og_video_height field in the database.
	FieldOgVideoHeight = "og_video_height"
	// Table holds the table name of the pageinfo in the database.
	Table = "page_info"
)

// Columns holds all SQL columns for pageinfo fields.
var Columns = []string{
	FieldID,
	FieldDomain,
	FieldPort,
	FieldIsHTTPS,
	FieldIndexedURL,
	FieldPath,
	FieldQuerystring,
	FieldURL,
	FieldCountReferred,
	FieldStatus,
	FieldCreatedAt,
	FieldCreatedBy,
	FieldUpdatedAt,
	FieldUpdatedBy,
	FieldTitle,
	FieldDescription,
	FieldKeywords,
	FieldContentLanguage,
	FieldTwitterCard,
	FieldTwitterURL,
	FieldTwitterTitle,
	FieldTwitterDescription,
	FieldTwitterImage,
	FieldOgSiteName,
	FieldOgLocale,
	FieldOgTitle,
	FieldOgDescription,
	FieldOgType,
	FieldOgURL,
	FieldOgImage,
	FieldOgImageType,
	FieldOgImageURL,
	FieldOgImageSecureURL,
	FieldOgImageWidth,
	FieldOgImageHeight,
	FieldOgVideo,
	FieldOgVideoType,
	FieldOgVideoURL,
	FieldOgVideoSecureURL,
	FieldOgVideoWidth,
	FieldOgVideoHeight,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DomainValidator is a validator for the "domain" field. It is called by the builders before save.
	DomainValidator func(string) error
	// DefaultPort holds the default value on creation for the "port" field.
	DefaultPort string
	// PortValidator is a validator for the "port" field. It is called by the builders before save.
	PortValidator func(string) error
	// DefaultIsHTTPS holds the default value on creation for the "is_https" field.
	DefaultIsHTTPS bool
	// DefaultIndexedURL holds the default value on creation for the "indexed_url" field.
	DefaultIndexedURL string
	// IndexedURLValidator is a validator for the "indexed_url" field. It is called by the builders before save.
	IndexedURLValidator func(string) error
	// DefaultPath holds the default value on creation for the "path" field.
	DefaultPath string
	// PathValidator is a validator for the "path" field. It is called by the builders before save.
	PathValidator func(string) error
	// DefaultQuerystring holds the default value on creation for the "querystring" field.
	DefaultQuerystring string
	// DefaultURL holds the default value on creation for the "url" field.
	DefaultURL string
	// DefaultCountReferred holds the default value on creation for the "count_referred" field.
	DefaultCountReferred int64
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// CreatedByValidator is a validator for the "created_by" field. It is called by the builders before save.
	CreatedByValidator func(string) error
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// UpdatedByValidator is a validator for the "updated_by" field. It is called by the builders before save.
	UpdatedByValidator func(string) error
	// DefaultTitle holds the default value on creation for the "title" field.
	DefaultTitle string
	// DefaultDescription holds the default value on creation for the "description" field.
	DefaultDescription string
	// DefaultKeywords holds the default value on creation for the "keywords" field.
	DefaultKeywords string
	// DefaultContentLanguage holds the default value on creation for the "content_language" field.
	DefaultContentLanguage string
	// DefaultTwitterCard holds the default value on creation for the "twitter_card" field.
	DefaultTwitterCard string
	// DefaultTwitterURL holds the default value on creation for the "twitter_url" field.
	DefaultTwitterURL string
	// DefaultTwitterTitle holds the default value on creation for the "twitter_title" field.
	DefaultTwitterTitle string
	// DefaultTwitterDescription holds the default value on creation for the "twitter_description" field.
	DefaultTwitterDescription string
	// DefaultTwitterImage holds the default value on creation for the "twitter_image" field.
	DefaultTwitterImage string
	// DefaultOgSiteName holds the default value on creation for the "og_site_name" field.
	DefaultOgSiteName string
	// DefaultOgLocale holds the default value on creation for the "og_locale" field.
	DefaultOgLocale string
	// DefaultOgTitle holds the default value on creation for the "og_title" field.
	DefaultOgTitle string
	// DefaultOgDescription holds the default value on creation for the "og_description" field.
	DefaultOgDescription string
	// DefaultOgType holds the default value on creation for the "og_type" field.
	DefaultOgType string
	// DefaultOgURL holds the default value on creation for the "og_url" field.
	DefaultOgURL string
	// DefaultOgImage holds the default value on creation for the "og_image" field.
	DefaultOgImage string
	// DefaultOgImageType holds the default value on creation for the "og_image_type" field.
	DefaultOgImageType string
	// DefaultOgImageURL holds the default value on creation for the "og_image_url" field.
	DefaultOgImageURL string
	// DefaultOgImageSecureURL holds the default value on creation for the "og_image_secure_url" field.
	DefaultOgImageSecureURL string
	// DefaultOgImageWidth holds the default value on creation for the "og_image_width" field.
	DefaultOgImageWidth string
	// DefaultOgImageHeight holds the default value on creation for the "og_image_height" field.
	DefaultOgImageHeight string
	// DefaultOgVideo holds the default value on creation for the "og_video" field.
	DefaultOgVideo string
	// DefaultOgVideoType holds the default value on creation for the "og_video_type" field.
	DefaultOgVideoType string
	// DefaultOgVideoURL holds the default value on creation for the "og_video_url" field.
	DefaultOgVideoURL string
	// DefaultOgVideoSecureURL holds the default value on creation for the "og_video_secure_url" field.
	DefaultOgVideoSecureURL string
	// DefaultOgVideoWidth holds the default value on creation for the "og_video_width" field.
	DefaultOgVideoWidth string
	// DefaultOgVideoHeight holds the default value on creation for the "og_video_height" field.
	DefaultOgVideoHeight string
)

// Status defines the type for the "status" enum field.
type Status string

// StatusALLOW is the default value of the Status enum.
const DefaultStatus = StatusALLOW

// Status values.
const (
	StatusALLOW    Status = "ALLOW"
	StatusNOTALLOW Status = "NOTALLOW"
	StatusDELETE   Status = "DELETE"
)

func (s Status) String() string {
	return string(s)
}

// StatusValidator is a validator for the "status" field enum values. It is called by the builders before save.
func StatusValidator(s Status) error {
	switch s {
	case StatusALLOW, StatusNOTALLOW, StatusDELETE:
		return nil
	default:
		return fmt.Errorf("pageinfo: invalid enum value for status field: %q", s)
	}
}
