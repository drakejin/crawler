// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/drakejin/crawler/internal/storage/db/ent/page"
	"github.com/drakejin/crawler/internal/storage/db/ent/pagesource"
	"github.com/drakejin/crawler/internal/storage/db/ent/predicate"
	"github.com/google/uuid"
)

// PageUpdate is the builder for updating Page entities.
type PageUpdate struct {
	config
	hooks    []Hook
	mutation *PageMutation
}

// Where appends a list predicates to the PageUpdate builder.
func (pu *PageUpdate) Where(ps ...predicate.Page) *PageUpdate {
	pu.mutation.Where(ps...)
	return pu
}

// SetCrawlingVersion sets the "crawling_version" field.
func (pu *PageUpdate) SetCrawlingVersion(s string) *PageUpdate {
	pu.mutation.SetCrawlingVersion(s)
	return pu
}

// SetDomain sets the "domain" field.
func (pu *PageUpdate) SetDomain(s string) *PageUpdate {
	pu.mutation.SetDomain(s)
	return pu
}

// SetPort sets the "port" field.
func (pu *PageUpdate) SetPort(s string) *PageUpdate {
	pu.mutation.SetPort(s)
	return pu
}

// SetNillablePort sets the "port" field if the given value is not nil.
func (pu *PageUpdate) SetNillablePort(s *string) *PageUpdate {
	if s != nil {
		pu.SetPort(*s)
	}
	return pu
}

// SetIsHTTPS sets the "is_https" field.
func (pu *PageUpdate) SetIsHTTPS(b bool) *PageUpdate {
	pu.mutation.SetIsHTTPS(b)
	return pu
}

// SetNillableIsHTTPS sets the "is_https" field if the given value is not nil.
func (pu *PageUpdate) SetNillableIsHTTPS(b *bool) *PageUpdate {
	if b != nil {
		pu.SetIsHTTPS(*b)
	}
	return pu
}

// SetURL sets the "url" field.
func (pu *PageUpdate) SetURL(s string) *PageUpdate {
	pu.mutation.SetURL(s)
	return pu
}

// SetPath sets the "path" field.
func (pu *PageUpdate) SetPath(s string) *PageUpdate {
	pu.mutation.SetPath(s)
	return pu
}

// SetNillablePath sets the "path" field if the given value is not nil.
func (pu *PageUpdate) SetNillablePath(s *string) *PageUpdate {
	if s != nil {
		pu.SetPath(*s)
	}
	return pu
}

// SetQuerystring sets the "querystring" field.
func (pu *PageUpdate) SetQuerystring(s string) *PageUpdate {
	pu.mutation.SetQuerystring(s)
	return pu
}

// SetNillableQuerystring sets the "querystring" field if the given value is not nil.
func (pu *PageUpdate) SetNillableQuerystring(s *string) *PageUpdate {
	if s != nil {
		pu.SetQuerystring(*s)
	}
	return pu
}

// SetCountReferred sets the "count_referred" field.
func (pu *PageUpdate) SetCountReferred(i int64) *PageUpdate {
	pu.mutation.ResetCountReferred()
	pu.mutation.SetCountReferred(i)
	return pu
}

// SetNillableCountReferred sets the "count_referred" field if the given value is not nil.
func (pu *PageUpdate) SetNillableCountReferred(i *int64) *PageUpdate {
	if i != nil {
		pu.SetCountReferred(*i)
	}
	return pu
}

// AddCountReferred adds i to the "count_referred" field.
func (pu *PageUpdate) AddCountReferred(i int64) *PageUpdate {
	pu.mutation.AddCountReferred(i)
	return pu
}

// SetStatus sets the "status" field.
func (pu *PageUpdate) SetStatus(pa page.Status) *PageUpdate {
	pu.mutation.SetStatus(pa)
	return pu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (pu *PageUpdate) SetNillableStatus(pa *page.Status) *PageUpdate {
	if pa != nil {
		pu.SetStatus(*pa)
	}
	return pu
}

// SetCreatedBy sets the "created_by" field.
func (pu *PageUpdate) SetCreatedBy(s string) *PageUpdate {
	pu.mutation.SetCreatedBy(s)
	return pu
}

// SetUpdatedAt sets the "updated_at" field.
func (pu *PageUpdate) SetUpdatedAt(t time.Time) *PageUpdate {
	pu.mutation.SetUpdatedAt(t)
	return pu
}

// SetUpdatedBy sets the "updated_by" field.
func (pu *PageUpdate) SetUpdatedBy(s string) *PageUpdate {
	pu.mutation.SetUpdatedBy(s)
	return pu
}

// SetTitle sets the "title" field.
func (pu *PageUpdate) SetTitle(s string) *PageUpdate {
	pu.mutation.SetTitle(s)
	return pu
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (pu *PageUpdate) SetNillableTitle(s *string) *PageUpdate {
	if s != nil {
		pu.SetTitle(*s)
	}
	return pu
}

// SetDescription sets the "description" field.
func (pu *PageUpdate) SetDescription(s string) *PageUpdate {
	pu.mutation.SetDescription(s)
	return pu
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (pu *PageUpdate) SetNillableDescription(s *string) *PageUpdate {
	if s != nil {
		pu.SetDescription(*s)
	}
	return pu
}

// SetKeywords sets the "keywords" field.
func (pu *PageUpdate) SetKeywords(s string) *PageUpdate {
	pu.mutation.SetKeywords(s)
	return pu
}

// SetNillableKeywords sets the "keywords" field if the given value is not nil.
func (pu *PageUpdate) SetNillableKeywords(s *string) *PageUpdate {
	if s != nil {
		pu.SetKeywords(*s)
	}
	return pu
}

// SetContentLanguage sets the "content_language" field.
func (pu *PageUpdate) SetContentLanguage(s string) *PageUpdate {
	pu.mutation.SetContentLanguage(s)
	return pu
}

// SetNillableContentLanguage sets the "content_language" field if the given value is not nil.
func (pu *PageUpdate) SetNillableContentLanguage(s *string) *PageUpdate {
	if s != nil {
		pu.SetContentLanguage(*s)
	}
	return pu
}

// SetTwitterCard sets the "twitter_card" field.
func (pu *PageUpdate) SetTwitterCard(s string) *PageUpdate {
	pu.mutation.SetTwitterCard(s)
	return pu
}

// SetNillableTwitterCard sets the "twitter_card" field if the given value is not nil.
func (pu *PageUpdate) SetNillableTwitterCard(s *string) *PageUpdate {
	if s != nil {
		pu.SetTwitterCard(*s)
	}
	return pu
}

// SetTwitterURL sets the "twitter_url" field.
func (pu *PageUpdate) SetTwitterURL(s string) *PageUpdate {
	pu.mutation.SetTwitterURL(s)
	return pu
}

// SetNillableTwitterURL sets the "twitter_url" field if the given value is not nil.
func (pu *PageUpdate) SetNillableTwitterURL(s *string) *PageUpdate {
	if s != nil {
		pu.SetTwitterURL(*s)
	}
	return pu
}

// SetTwitterTitle sets the "twitter_title" field.
func (pu *PageUpdate) SetTwitterTitle(s string) *PageUpdate {
	pu.mutation.SetTwitterTitle(s)
	return pu
}

// SetNillableTwitterTitle sets the "twitter_title" field if the given value is not nil.
func (pu *PageUpdate) SetNillableTwitterTitle(s *string) *PageUpdate {
	if s != nil {
		pu.SetTwitterTitle(*s)
	}
	return pu
}

// SetTwitterDescription sets the "twitter_description" field.
func (pu *PageUpdate) SetTwitterDescription(s string) *PageUpdate {
	pu.mutation.SetTwitterDescription(s)
	return pu
}

// SetNillableTwitterDescription sets the "twitter_description" field if the given value is not nil.
func (pu *PageUpdate) SetNillableTwitterDescription(s *string) *PageUpdate {
	if s != nil {
		pu.SetTwitterDescription(*s)
	}
	return pu
}

// SetTwitterImage sets the "twitter_image" field.
func (pu *PageUpdate) SetTwitterImage(s string) *PageUpdate {
	pu.mutation.SetTwitterImage(s)
	return pu
}

// SetNillableTwitterImage sets the "twitter_image" field if the given value is not nil.
func (pu *PageUpdate) SetNillableTwitterImage(s *string) *PageUpdate {
	if s != nil {
		pu.SetTwitterImage(*s)
	}
	return pu
}

// SetOgSiteName sets the "og_site_name" field.
func (pu *PageUpdate) SetOgSiteName(s string) *PageUpdate {
	pu.mutation.SetOgSiteName(s)
	return pu
}

// SetNillableOgSiteName sets the "og_site_name" field if the given value is not nil.
func (pu *PageUpdate) SetNillableOgSiteName(s *string) *PageUpdate {
	if s != nil {
		pu.SetOgSiteName(*s)
	}
	return pu
}

// SetOgLocale sets the "og_locale" field.
func (pu *PageUpdate) SetOgLocale(s string) *PageUpdate {
	pu.mutation.SetOgLocale(s)
	return pu
}

// SetNillableOgLocale sets the "og_locale" field if the given value is not nil.
func (pu *PageUpdate) SetNillableOgLocale(s *string) *PageUpdate {
	if s != nil {
		pu.SetOgLocale(*s)
	}
	return pu
}

// SetOgTitle sets the "og_title" field.
func (pu *PageUpdate) SetOgTitle(s string) *PageUpdate {
	pu.mutation.SetOgTitle(s)
	return pu
}

// SetNillableOgTitle sets the "og_title" field if the given value is not nil.
func (pu *PageUpdate) SetNillableOgTitle(s *string) *PageUpdate {
	if s != nil {
		pu.SetOgTitle(*s)
	}
	return pu
}

// SetOgDescription sets the "og_description" field.
func (pu *PageUpdate) SetOgDescription(s string) *PageUpdate {
	pu.mutation.SetOgDescription(s)
	return pu
}

// SetNillableOgDescription sets the "og_description" field if the given value is not nil.
func (pu *PageUpdate) SetNillableOgDescription(s *string) *PageUpdate {
	if s != nil {
		pu.SetOgDescription(*s)
	}
	return pu
}

// SetOgType sets the "og_type" field.
func (pu *PageUpdate) SetOgType(s string) *PageUpdate {
	pu.mutation.SetOgType(s)
	return pu
}

// SetNillableOgType sets the "og_type" field if the given value is not nil.
func (pu *PageUpdate) SetNillableOgType(s *string) *PageUpdate {
	if s != nil {
		pu.SetOgType(*s)
	}
	return pu
}

// SetOgURL sets the "og_url" field.
func (pu *PageUpdate) SetOgURL(s string) *PageUpdate {
	pu.mutation.SetOgURL(s)
	return pu
}

// SetNillableOgURL sets the "og_url" field if the given value is not nil.
func (pu *PageUpdate) SetNillableOgURL(s *string) *PageUpdate {
	if s != nil {
		pu.SetOgURL(*s)
	}
	return pu
}

// SetOgImage sets the "og_image" field.
func (pu *PageUpdate) SetOgImage(s string) *PageUpdate {
	pu.mutation.SetOgImage(s)
	return pu
}

// SetNillableOgImage sets the "og_image" field if the given value is not nil.
func (pu *PageUpdate) SetNillableOgImage(s *string) *PageUpdate {
	if s != nil {
		pu.SetOgImage(*s)
	}
	return pu
}

// SetOgImageType sets the "og_image_type" field.
func (pu *PageUpdate) SetOgImageType(s string) *PageUpdate {
	pu.mutation.SetOgImageType(s)
	return pu
}

// SetNillableOgImageType sets the "og_image_type" field if the given value is not nil.
func (pu *PageUpdate) SetNillableOgImageType(s *string) *PageUpdate {
	if s != nil {
		pu.SetOgImageType(*s)
	}
	return pu
}

// SetOgImageURL sets the "og_image_url" field.
func (pu *PageUpdate) SetOgImageURL(s string) *PageUpdate {
	pu.mutation.SetOgImageURL(s)
	return pu
}

// SetNillableOgImageURL sets the "og_image_url" field if the given value is not nil.
func (pu *PageUpdate) SetNillableOgImageURL(s *string) *PageUpdate {
	if s != nil {
		pu.SetOgImageURL(*s)
	}
	return pu
}

// SetOgImageSecureURL sets the "og_image_secure_url" field.
func (pu *PageUpdate) SetOgImageSecureURL(s string) *PageUpdate {
	pu.mutation.SetOgImageSecureURL(s)
	return pu
}

// SetNillableOgImageSecureURL sets the "og_image_secure_url" field if the given value is not nil.
func (pu *PageUpdate) SetNillableOgImageSecureURL(s *string) *PageUpdate {
	if s != nil {
		pu.SetOgImageSecureURL(*s)
	}
	return pu
}

// SetOgImageWidth sets the "og_image_width" field.
func (pu *PageUpdate) SetOgImageWidth(s string) *PageUpdate {
	pu.mutation.SetOgImageWidth(s)
	return pu
}

// SetNillableOgImageWidth sets the "og_image_width" field if the given value is not nil.
func (pu *PageUpdate) SetNillableOgImageWidth(s *string) *PageUpdate {
	if s != nil {
		pu.SetOgImageWidth(*s)
	}
	return pu
}

// SetOgImageHeight sets the "og_image_height" field.
func (pu *PageUpdate) SetOgImageHeight(s string) *PageUpdate {
	pu.mutation.SetOgImageHeight(s)
	return pu
}

// SetNillableOgImageHeight sets the "og_image_height" field if the given value is not nil.
func (pu *PageUpdate) SetNillableOgImageHeight(s *string) *PageUpdate {
	if s != nil {
		pu.SetOgImageHeight(*s)
	}
	return pu
}

// SetOgVideo sets the "og_video" field.
func (pu *PageUpdate) SetOgVideo(s string) *PageUpdate {
	pu.mutation.SetOgVideo(s)
	return pu
}

// SetNillableOgVideo sets the "og_video" field if the given value is not nil.
func (pu *PageUpdate) SetNillableOgVideo(s *string) *PageUpdate {
	if s != nil {
		pu.SetOgVideo(*s)
	}
	return pu
}

// SetOgVideoType sets the "og_video_type" field.
func (pu *PageUpdate) SetOgVideoType(s string) *PageUpdate {
	pu.mutation.SetOgVideoType(s)
	return pu
}

// SetNillableOgVideoType sets the "og_video_type" field if the given value is not nil.
func (pu *PageUpdate) SetNillableOgVideoType(s *string) *PageUpdate {
	if s != nil {
		pu.SetOgVideoType(*s)
	}
	return pu
}

// SetOgVideoURL sets the "og_video_url" field.
func (pu *PageUpdate) SetOgVideoURL(s string) *PageUpdate {
	pu.mutation.SetOgVideoURL(s)
	return pu
}

// SetNillableOgVideoURL sets the "og_video_url" field if the given value is not nil.
func (pu *PageUpdate) SetNillableOgVideoURL(s *string) *PageUpdate {
	if s != nil {
		pu.SetOgVideoURL(*s)
	}
	return pu
}

// SetOgVideoSecureURL sets the "og_video_secure_url" field.
func (pu *PageUpdate) SetOgVideoSecureURL(s string) *PageUpdate {
	pu.mutation.SetOgVideoSecureURL(s)
	return pu
}

// SetNillableOgVideoSecureURL sets the "og_video_secure_url" field if the given value is not nil.
func (pu *PageUpdate) SetNillableOgVideoSecureURL(s *string) *PageUpdate {
	if s != nil {
		pu.SetOgVideoSecureURL(*s)
	}
	return pu
}

// SetOgVideoWidth sets the "og_video_width" field.
func (pu *PageUpdate) SetOgVideoWidth(s string) *PageUpdate {
	pu.mutation.SetOgVideoWidth(s)
	return pu
}

// SetNillableOgVideoWidth sets the "og_video_width" field if the given value is not nil.
func (pu *PageUpdate) SetNillableOgVideoWidth(s *string) *PageUpdate {
	if s != nil {
		pu.SetOgVideoWidth(*s)
	}
	return pu
}

// SetOgVideoHeight sets the "og_video_height" field.
func (pu *PageUpdate) SetOgVideoHeight(s string) *PageUpdate {
	pu.mutation.SetOgVideoHeight(s)
	return pu
}

// SetNillableOgVideoHeight sets the "og_video_height" field if the given value is not nil.
func (pu *PageUpdate) SetNillableOgVideoHeight(s *string) *PageUpdate {
	if s != nil {
		pu.SetOgVideoHeight(*s)
	}
	return pu
}

// AddPageSourceIDs adds the "page_source" edge to the PageSource entity by IDs.
func (pu *PageUpdate) AddPageSourceIDs(ids ...uuid.UUID) *PageUpdate {
	pu.mutation.AddPageSourceIDs(ids...)
	return pu
}

// AddPageSource adds the "page_source" edges to the PageSource entity.
func (pu *PageUpdate) AddPageSource(p ...*PageSource) *PageUpdate {
	ids := make([]uuid.UUID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pu.AddPageSourceIDs(ids...)
}

// Mutation returns the PageMutation object of the builder.
func (pu *PageUpdate) Mutation() *PageMutation {
	return pu.mutation
}

// ClearPageSource clears all "page_source" edges to the PageSource entity.
func (pu *PageUpdate) ClearPageSource() *PageUpdate {
	pu.mutation.ClearPageSource()
	return pu
}

// RemovePageSourceIDs removes the "page_source" edge to PageSource entities by IDs.
func (pu *PageUpdate) RemovePageSourceIDs(ids ...uuid.UUID) *PageUpdate {
	pu.mutation.RemovePageSourceIDs(ids...)
	return pu
}

// RemovePageSource removes "page_source" edges to PageSource entities.
func (pu *PageUpdate) RemovePageSource(p ...*PageSource) *PageUpdate {
	ids := make([]uuid.UUID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pu.RemovePageSourceIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (pu *PageUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	pu.defaults()
	if len(pu.hooks) == 0 {
		if err = pu.check(); err != nil {
			return 0, err
		}
		affected, err = pu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*PageMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = pu.check(); err != nil {
				return 0, err
			}
			pu.mutation = mutation
			affected, err = pu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(pu.hooks) - 1; i >= 0; i-- {
			if pu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = pu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, pu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (pu *PageUpdate) SaveX(ctx context.Context) int {
	affected, err := pu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (pu *PageUpdate) Exec(ctx context.Context) error {
	_, err := pu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pu *PageUpdate) ExecX(ctx context.Context) {
	if err := pu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pu *PageUpdate) defaults() {
	if _, ok := pu.mutation.UpdatedAt(); !ok {
		v := page.UpdateDefaultUpdatedAt()
		pu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pu *PageUpdate) check() error {
	if v, ok := pu.mutation.Domain(); ok {
		if err := page.DomainValidator(v); err != nil {
			return &ValidationError{Name: "domain", err: fmt.Errorf(`ent: validator failed for field "Page.domain": %w`, err)}
		}
	}
	if v, ok := pu.mutation.Port(); ok {
		if err := page.PortValidator(v); err != nil {
			return &ValidationError{Name: "port", err: fmt.Errorf(`ent: validator failed for field "Page.port": %w`, err)}
		}
	}
	if v, ok := pu.mutation.URL(); ok {
		if err := page.URLValidator(v); err != nil {
			return &ValidationError{Name: "url", err: fmt.Errorf(`ent: validator failed for field "Page.url": %w`, err)}
		}
	}
	if v, ok := pu.mutation.Path(); ok {
		if err := page.PathValidator(v); err != nil {
			return &ValidationError{Name: "path", err: fmt.Errorf(`ent: validator failed for field "Page.path": %w`, err)}
		}
	}
	if v, ok := pu.mutation.Status(); ok {
		if err := page.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "Page.status": %w`, err)}
		}
	}
	if v, ok := pu.mutation.CreatedBy(); ok {
		if err := page.CreatedByValidator(v); err != nil {
			return &ValidationError{Name: "created_by", err: fmt.Errorf(`ent: validator failed for field "Page.created_by": %w`, err)}
		}
	}
	if v, ok := pu.mutation.UpdatedBy(); ok {
		if err := page.UpdatedByValidator(v); err != nil {
			return &ValidationError{Name: "updated_by", err: fmt.Errorf(`ent: validator failed for field "Page.updated_by": %w`, err)}
		}
	}
	return nil
}

func (pu *PageUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   page.Table,
			Columns: page.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: page.FieldID,
			},
		},
	}
	if ps := pu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pu.mutation.CrawlingVersion(); ok {
		_spec.SetField(page.FieldCrawlingVersion, field.TypeString, value)
	}
	if value, ok := pu.mutation.Domain(); ok {
		_spec.SetField(page.FieldDomain, field.TypeString, value)
	}
	if value, ok := pu.mutation.Port(); ok {
		_spec.SetField(page.FieldPort, field.TypeString, value)
	}
	if value, ok := pu.mutation.IsHTTPS(); ok {
		_spec.SetField(page.FieldIsHTTPS, field.TypeBool, value)
	}
	if value, ok := pu.mutation.URL(); ok {
		_spec.SetField(page.FieldURL, field.TypeString, value)
	}
	if value, ok := pu.mutation.Path(); ok {
		_spec.SetField(page.FieldPath, field.TypeString, value)
	}
	if value, ok := pu.mutation.Querystring(); ok {
		_spec.SetField(page.FieldQuerystring, field.TypeString, value)
	}
	if value, ok := pu.mutation.CountReferred(); ok {
		_spec.SetField(page.FieldCountReferred, field.TypeInt64, value)
	}
	if value, ok := pu.mutation.AddedCountReferred(); ok {
		_spec.AddField(page.FieldCountReferred, field.TypeInt64, value)
	}
	if value, ok := pu.mutation.Status(); ok {
		_spec.SetField(page.FieldStatus, field.TypeEnum, value)
	}
	if value, ok := pu.mutation.CreatedBy(); ok {
		_spec.SetField(page.FieldCreatedBy, field.TypeString, value)
	}
	if value, ok := pu.mutation.UpdatedAt(); ok {
		_spec.SetField(page.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := pu.mutation.UpdatedBy(); ok {
		_spec.SetField(page.FieldUpdatedBy, field.TypeString, value)
	}
	if value, ok := pu.mutation.Title(); ok {
		_spec.SetField(page.FieldTitle, field.TypeString, value)
	}
	if value, ok := pu.mutation.Description(); ok {
		_spec.SetField(page.FieldDescription, field.TypeString, value)
	}
	if value, ok := pu.mutation.Keywords(); ok {
		_spec.SetField(page.FieldKeywords, field.TypeString, value)
	}
	if value, ok := pu.mutation.ContentLanguage(); ok {
		_spec.SetField(page.FieldContentLanguage, field.TypeString, value)
	}
	if value, ok := pu.mutation.TwitterCard(); ok {
		_spec.SetField(page.FieldTwitterCard, field.TypeString, value)
	}
	if value, ok := pu.mutation.TwitterURL(); ok {
		_spec.SetField(page.FieldTwitterURL, field.TypeString, value)
	}
	if value, ok := pu.mutation.TwitterTitle(); ok {
		_spec.SetField(page.FieldTwitterTitle, field.TypeString, value)
	}
	if value, ok := pu.mutation.TwitterDescription(); ok {
		_spec.SetField(page.FieldTwitterDescription, field.TypeString, value)
	}
	if value, ok := pu.mutation.TwitterImage(); ok {
		_spec.SetField(page.FieldTwitterImage, field.TypeString, value)
	}
	if value, ok := pu.mutation.OgSiteName(); ok {
		_spec.SetField(page.FieldOgSiteName, field.TypeString, value)
	}
	if value, ok := pu.mutation.OgLocale(); ok {
		_spec.SetField(page.FieldOgLocale, field.TypeString, value)
	}
	if value, ok := pu.mutation.OgTitle(); ok {
		_spec.SetField(page.FieldOgTitle, field.TypeString, value)
	}
	if value, ok := pu.mutation.OgDescription(); ok {
		_spec.SetField(page.FieldOgDescription, field.TypeString, value)
	}
	if value, ok := pu.mutation.OgType(); ok {
		_spec.SetField(page.FieldOgType, field.TypeString, value)
	}
	if value, ok := pu.mutation.OgURL(); ok {
		_spec.SetField(page.FieldOgURL, field.TypeString, value)
	}
	if value, ok := pu.mutation.OgImage(); ok {
		_spec.SetField(page.FieldOgImage, field.TypeString, value)
	}
	if value, ok := pu.mutation.OgImageType(); ok {
		_spec.SetField(page.FieldOgImageType, field.TypeString, value)
	}
	if value, ok := pu.mutation.OgImageURL(); ok {
		_spec.SetField(page.FieldOgImageURL, field.TypeString, value)
	}
	if value, ok := pu.mutation.OgImageSecureURL(); ok {
		_spec.SetField(page.FieldOgImageSecureURL, field.TypeString, value)
	}
	if value, ok := pu.mutation.OgImageWidth(); ok {
		_spec.SetField(page.FieldOgImageWidth, field.TypeString, value)
	}
	if value, ok := pu.mutation.OgImageHeight(); ok {
		_spec.SetField(page.FieldOgImageHeight, field.TypeString, value)
	}
	if value, ok := pu.mutation.OgVideo(); ok {
		_spec.SetField(page.FieldOgVideo, field.TypeString, value)
	}
	if value, ok := pu.mutation.OgVideoType(); ok {
		_spec.SetField(page.FieldOgVideoType, field.TypeString, value)
	}
	if value, ok := pu.mutation.OgVideoURL(); ok {
		_spec.SetField(page.FieldOgVideoURL, field.TypeString, value)
	}
	if value, ok := pu.mutation.OgVideoSecureURL(); ok {
		_spec.SetField(page.FieldOgVideoSecureURL, field.TypeString, value)
	}
	if value, ok := pu.mutation.OgVideoWidth(); ok {
		_spec.SetField(page.FieldOgVideoWidth, field.TypeString, value)
	}
	if value, ok := pu.mutation.OgVideoHeight(); ok {
		_spec.SetField(page.FieldOgVideoHeight, field.TypeString, value)
	}
	if pu.mutation.PageSourceCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   page.PageSourceTable,
			Columns: []string{page.PageSourceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: pagesource.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.RemovedPageSourceIDs(); len(nodes) > 0 && !pu.mutation.PageSourceCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   page.PageSourceTable,
			Columns: []string{page.PageSourceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: pagesource.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.PageSourceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   page.PageSourceTable,
			Columns: []string{page.PageSourceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: pagesource.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, pu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{page.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	return n, nil
}

// PageUpdateOne is the builder for updating a single Page entity.
type PageUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *PageMutation
}

// SetCrawlingVersion sets the "crawling_version" field.
func (puo *PageUpdateOne) SetCrawlingVersion(s string) *PageUpdateOne {
	puo.mutation.SetCrawlingVersion(s)
	return puo
}

// SetDomain sets the "domain" field.
func (puo *PageUpdateOne) SetDomain(s string) *PageUpdateOne {
	puo.mutation.SetDomain(s)
	return puo
}

// SetPort sets the "port" field.
func (puo *PageUpdateOne) SetPort(s string) *PageUpdateOne {
	puo.mutation.SetPort(s)
	return puo
}

// SetNillablePort sets the "port" field if the given value is not nil.
func (puo *PageUpdateOne) SetNillablePort(s *string) *PageUpdateOne {
	if s != nil {
		puo.SetPort(*s)
	}
	return puo
}

// SetIsHTTPS sets the "is_https" field.
func (puo *PageUpdateOne) SetIsHTTPS(b bool) *PageUpdateOne {
	puo.mutation.SetIsHTTPS(b)
	return puo
}

// SetNillableIsHTTPS sets the "is_https" field if the given value is not nil.
func (puo *PageUpdateOne) SetNillableIsHTTPS(b *bool) *PageUpdateOne {
	if b != nil {
		puo.SetIsHTTPS(*b)
	}
	return puo
}

// SetURL sets the "url" field.
func (puo *PageUpdateOne) SetURL(s string) *PageUpdateOne {
	puo.mutation.SetURL(s)
	return puo
}

// SetPath sets the "path" field.
func (puo *PageUpdateOne) SetPath(s string) *PageUpdateOne {
	puo.mutation.SetPath(s)
	return puo
}

// SetNillablePath sets the "path" field if the given value is not nil.
func (puo *PageUpdateOne) SetNillablePath(s *string) *PageUpdateOne {
	if s != nil {
		puo.SetPath(*s)
	}
	return puo
}

// SetQuerystring sets the "querystring" field.
func (puo *PageUpdateOne) SetQuerystring(s string) *PageUpdateOne {
	puo.mutation.SetQuerystring(s)
	return puo
}

// SetNillableQuerystring sets the "querystring" field if the given value is not nil.
func (puo *PageUpdateOne) SetNillableQuerystring(s *string) *PageUpdateOne {
	if s != nil {
		puo.SetQuerystring(*s)
	}
	return puo
}

// SetCountReferred sets the "count_referred" field.
func (puo *PageUpdateOne) SetCountReferred(i int64) *PageUpdateOne {
	puo.mutation.ResetCountReferred()
	puo.mutation.SetCountReferred(i)
	return puo
}

// SetNillableCountReferred sets the "count_referred" field if the given value is not nil.
func (puo *PageUpdateOne) SetNillableCountReferred(i *int64) *PageUpdateOne {
	if i != nil {
		puo.SetCountReferred(*i)
	}
	return puo
}

// AddCountReferred adds i to the "count_referred" field.
func (puo *PageUpdateOne) AddCountReferred(i int64) *PageUpdateOne {
	puo.mutation.AddCountReferred(i)
	return puo
}

// SetStatus sets the "status" field.
func (puo *PageUpdateOne) SetStatus(pa page.Status) *PageUpdateOne {
	puo.mutation.SetStatus(pa)
	return puo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (puo *PageUpdateOne) SetNillableStatus(pa *page.Status) *PageUpdateOne {
	if pa != nil {
		puo.SetStatus(*pa)
	}
	return puo
}

// SetCreatedBy sets the "created_by" field.
func (puo *PageUpdateOne) SetCreatedBy(s string) *PageUpdateOne {
	puo.mutation.SetCreatedBy(s)
	return puo
}

// SetUpdatedAt sets the "updated_at" field.
func (puo *PageUpdateOne) SetUpdatedAt(t time.Time) *PageUpdateOne {
	puo.mutation.SetUpdatedAt(t)
	return puo
}

// SetUpdatedBy sets the "updated_by" field.
func (puo *PageUpdateOne) SetUpdatedBy(s string) *PageUpdateOne {
	puo.mutation.SetUpdatedBy(s)
	return puo
}

// SetTitle sets the "title" field.
func (puo *PageUpdateOne) SetTitle(s string) *PageUpdateOne {
	puo.mutation.SetTitle(s)
	return puo
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (puo *PageUpdateOne) SetNillableTitle(s *string) *PageUpdateOne {
	if s != nil {
		puo.SetTitle(*s)
	}
	return puo
}

// SetDescription sets the "description" field.
func (puo *PageUpdateOne) SetDescription(s string) *PageUpdateOne {
	puo.mutation.SetDescription(s)
	return puo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (puo *PageUpdateOne) SetNillableDescription(s *string) *PageUpdateOne {
	if s != nil {
		puo.SetDescription(*s)
	}
	return puo
}

// SetKeywords sets the "keywords" field.
func (puo *PageUpdateOne) SetKeywords(s string) *PageUpdateOne {
	puo.mutation.SetKeywords(s)
	return puo
}

// SetNillableKeywords sets the "keywords" field if the given value is not nil.
func (puo *PageUpdateOne) SetNillableKeywords(s *string) *PageUpdateOne {
	if s != nil {
		puo.SetKeywords(*s)
	}
	return puo
}

// SetContentLanguage sets the "content_language" field.
func (puo *PageUpdateOne) SetContentLanguage(s string) *PageUpdateOne {
	puo.mutation.SetContentLanguage(s)
	return puo
}

// SetNillableContentLanguage sets the "content_language" field if the given value is not nil.
func (puo *PageUpdateOne) SetNillableContentLanguage(s *string) *PageUpdateOne {
	if s != nil {
		puo.SetContentLanguage(*s)
	}
	return puo
}

// SetTwitterCard sets the "twitter_card" field.
func (puo *PageUpdateOne) SetTwitterCard(s string) *PageUpdateOne {
	puo.mutation.SetTwitterCard(s)
	return puo
}

// SetNillableTwitterCard sets the "twitter_card" field if the given value is not nil.
func (puo *PageUpdateOne) SetNillableTwitterCard(s *string) *PageUpdateOne {
	if s != nil {
		puo.SetTwitterCard(*s)
	}
	return puo
}

// SetTwitterURL sets the "twitter_url" field.
func (puo *PageUpdateOne) SetTwitterURL(s string) *PageUpdateOne {
	puo.mutation.SetTwitterURL(s)
	return puo
}

// SetNillableTwitterURL sets the "twitter_url" field if the given value is not nil.
func (puo *PageUpdateOne) SetNillableTwitterURL(s *string) *PageUpdateOne {
	if s != nil {
		puo.SetTwitterURL(*s)
	}
	return puo
}

// SetTwitterTitle sets the "twitter_title" field.
func (puo *PageUpdateOne) SetTwitterTitle(s string) *PageUpdateOne {
	puo.mutation.SetTwitterTitle(s)
	return puo
}

// SetNillableTwitterTitle sets the "twitter_title" field if the given value is not nil.
func (puo *PageUpdateOne) SetNillableTwitterTitle(s *string) *PageUpdateOne {
	if s != nil {
		puo.SetTwitterTitle(*s)
	}
	return puo
}

// SetTwitterDescription sets the "twitter_description" field.
func (puo *PageUpdateOne) SetTwitterDescription(s string) *PageUpdateOne {
	puo.mutation.SetTwitterDescription(s)
	return puo
}

// SetNillableTwitterDescription sets the "twitter_description" field if the given value is not nil.
func (puo *PageUpdateOne) SetNillableTwitterDescription(s *string) *PageUpdateOne {
	if s != nil {
		puo.SetTwitterDescription(*s)
	}
	return puo
}

// SetTwitterImage sets the "twitter_image" field.
func (puo *PageUpdateOne) SetTwitterImage(s string) *PageUpdateOne {
	puo.mutation.SetTwitterImage(s)
	return puo
}

// SetNillableTwitterImage sets the "twitter_image" field if the given value is not nil.
func (puo *PageUpdateOne) SetNillableTwitterImage(s *string) *PageUpdateOne {
	if s != nil {
		puo.SetTwitterImage(*s)
	}
	return puo
}

// SetOgSiteName sets the "og_site_name" field.
func (puo *PageUpdateOne) SetOgSiteName(s string) *PageUpdateOne {
	puo.mutation.SetOgSiteName(s)
	return puo
}

// SetNillableOgSiteName sets the "og_site_name" field if the given value is not nil.
func (puo *PageUpdateOne) SetNillableOgSiteName(s *string) *PageUpdateOne {
	if s != nil {
		puo.SetOgSiteName(*s)
	}
	return puo
}

// SetOgLocale sets the "og_locale" field.
func (puo *PageUpdateOne) SetOgLocale(s string) *PageUpdateOne {
	puo.mutation.SetOgLocale(s)
	return puo
}

// SetNillableOgLocale sets the "og_locale" field if the given value is not nil.
func (puo *PageUpdateOne) SetNillableOgLocale(s *string) *PageUpdateOne {
	if s != nil {
		puo.SetOgLocale(*s)
	}
	return puo
}

// SetOgTitle sets the "og_title" field.
func (puo *PageUpdateOne) SetOgTitle(s string) *PageUpdateOne {
	puo.mutation.SetOgTitle(s)
	return puo
}

// SetNillableOgTitle sets the "og_title" field if the given value is not nil.
func (puo *PageUpdateOne) SetNillableOgTitle(s *string) *PageUpdateOne {
	if s != nil {
		puo.SetOgTitle(*s)
	}
	return puo
}

// SetOgDescription sets the "og_description" field.
func (puo *PageUpdateOne) SetOgDescription(s string) *PageUpdateOne {
	puo.mutation.SetOgDescription(s)
	return puo
}

// SetNillableOgDescription sets the "og_description" field if the given value is not nil.
func (puo *PageUpdateOne) SetNillableOgDescription(s *string) *PageUpdateOne {
	if s != nil {
		puo.SetOgDescription(*s)
	}
	return puo
}

// SetOgType sets the "og_type" field.
func (puo *PageUpdateOne) SetOgType(s string) *PageUpdateOne {
	puo.mutation.SetOgType(s)
	return puo
}

// SetNillableOgType sets the "og_type" field if the given value is not nil.
func (puo *PageUpdateOne) SetNillableOgType(s *string) *PageUpdateOne {
	if s != nil {
		puo.SetOgType(*s)
	}
	return puo
}

// SetOgURL sets the "og_url" field.
func (puo *PageUpdateOne) SetOgURL(s string) *PageUpdateOne {
	puo.mutation.SetOgURL(s)
	return puo
}

// SetNillableOgURL sets the "og_url" field if the given value is not nil.
func (puo *PageUpdateOne) SetNillableOgURL(s *string) *PageUpdateOne {
	if s != nil {
		puo.SetOgURL(*s)
	}
	return puo
}

// SetOgImage sets the "og_image" field.
func (puo *PageUpdateOne) SetOgImage(s string) *PageUpdateOne {
	puo.mutation.SetOgImage(s)
	return puo
}

// SetNillableOgImage sets the "og_image" field if the given value is not nil.
func (puo *PageUpdateOne) SetNillableOgImage(s *string) *PageUpdateOne {
	if s != nil {
		puo.SetOgImage(*s)
	}
	return puo
}

// SetOgImageType sets the "og_image_type" field.
func (puo *PageUpdateOne) SetOgImageType(s string) *PageUpdateOne {
	puo.mutation.SetOgImageType(s)
	return puo
}

// SetNillableOgImageType sets the "og_image_type" field if the given value is not nil.
func (puo *PageUpdateOne) SetNillableOgImageType(s *string) *PageUpdateOne {
	if s != nil {
		puo.SetOgImageType(*s)
	}
	return puo
}

// SetOgImageURL sets the "og_image_url" field.
func (puo *PageUpdateOne) SetOgImageURL(s string) *PageUpdateOne {
	puo.mutation.SetOgImageURL(s)
	return puo
}

// SetNillableOgImageURL sets the "og_image_url" field if the given value is not nil.
func (puo *PageUpdateOne) SetNillableOgImageURL(s *string) *PageUpdateOne {
	if s != nil {
		puo.SetOgImageURL(*s)
	}
	return puo
}

// SetOgImageSecureURL sets the "og_image_secure_url" field.
func (puo *PageUpdateOne) SetOgImageSecureURL(s string) *PageUpdateOne {
	puo.mutation.SetOgImageSecureURL(s)
	return puo
}

// SetNillableOgImageSecureURL sets the "og_image_secure_url" field if the given value is not nil.
func (puo *PageUpdateOne) SetNillableOgImageSecureURL(s *string) *PageUpdateOne {
	if s != nil {
		puo.SetOgImageSecureURL(*s)
	}
	return puo
}

// SetOgImageWidth sets the "og_image_width" field.
func (puo *PageUpdateOne) SetOgImageWidth(s string) *PageUpdateOne {
	puo.mutation.SetOgImageWidth(s)
	return puo
}

// SetNillableOgImageWidth sets the "og_image_width" field if the given value is not nil.
func (puo *PageUpdateOne) SetNillableOgImageWidth(s *string) *PageUpdateOne {
	if s != nil {
		puo.SetOgImageWidth(*s)
	}
	return puo
}

// SetOgImageHeight sets the "og_image_height" field.
func (puo *PageUpdateOne) SetOgImageHeight(s string) *PageUpdateOne {
	puo.mutation.SetOgImageHeight(s)
	return puo
}

// SetNillableOgImageHeight sets the "og_image_height" field if the given value is not nil.
func (puo *PageUpdateOne) SetNillableOgImageHeight(s *string) *PageUpdateOne {
	if s != nil {
		puo.SetOgImageHeight(*s)
	}
	return puo
}

// SetOgVideo sets the "og_video" field.
func (puo *PageUpdateOne) SetOgVideo(s string) *PageUpdateOne {
	puo.mutation.SetOgVideo(s)
	return puo
}

// SetNillableOgVideo sets the "og_video" field if the given value is not nil.
func (puo *PageUpdateOne) SetNillableOgVideo(s *string) *PageUpdateOne {
	if s != nil {
		puo.SetOgVideo(*s)
	}
	return puo
}

// SetOgVideoType sets the "og_video_type" field.
func (puo *PageUpdateOne) SetOgVideoType(s string) *PageUpdateOne {
	puo.mutation.SetOgVideoType(s)
	return puo
}

// SetNillableOgVideoType sets the "og_video_type" field if the given value is not nil.
func (puo *PageUpdateOne) SetNillableOgVideoType(s *string) *PageUpdateOne {
	if s != nil {
		puo.SetOgVideoType(*s)
	}
	return puo
}

// SetOgVideoURL sets the "og_video_url" field.
func (puo *PageUpdateOne) SetOgVideoURL(s string) *PageUpdateOne {
	puo.mutation.SetOgVideoURL(s)
	return puo
}

// SetNillableOgVideoURL sets the "og_video_url" field if the given value is not nil.
func (puo *PageUpdateOne) SetNillableOgVideoURL(s *string) *PageUpdateOne {
	if s != nil {
		puo.SetOgVideoURL(*s)
	}
	return puo
}

// SetOgVideoSecureURL sets the "og_video_secure_url" field.
func (puo *PageUpdateOne) SetOgVideoSecureURL(s string) *PageUpdateOne {
	puo.mutation.SetOgVideoSecureURL(s)
	return puo
}

// SetNillableOgVideoSecureURL sets the "og_video_secure_url" field if the given value is not nil.
func (puo *PageUpdateOne) SetNillableOgVideoSecureURL(s *string) *PageUpdateOne {
	if s != nil {
		puo.SetOgVideoSecureURL(*s)
	}
	return puo
}

// SetOgVideoWidth sets the "og_video_width" field.
func (puo *PageUpdateOne) SetOgVideoWidth(s string) *PageUpdateOne {
	puo.mutation.SetOgVideoWidth(s)
	return puo
}

// SetNillableOgVideoWidth sets the "og_video_width" field if the given value is not nil.
func (puo *PageUpdateOne) SetNillableOgVideoWidth(s *string) *PageUpdateOne {
	if s != nil {
		puo.SetOgVideoWidth(*s)
	}
	return puo
}

// SetOgVideoHeight sets the "og_video_height" field.
func (puo *PageUpdateOne) SetOgVideoHeight(s string) *PageUpdateOne {
	puo.mutation.SetOgVideoHeight(s)
	return puo
}

// SetNillableOgVideoHeight sets the "og_video_height" field if the given value is not nil.
func (puo *PageUpdateOne) SetNillableOgVideoHeight(s *string) *PageUpdateOne {
	if s != nil {
		puo.SetOgVideoHeight(*s)
	}
	return puo
}

// AddPageSourceIDs adds the "page_source" edge to the PageSource entity by IDs.
func (puo *PageUpdateOne) AddPageSourceIDs(ids ...uuid.UUID) *PageUpdateOne {
	puo.mutation.AddPageSourceIDs(ids...)
	return puo
}

// AddPageSource adds the "page_source" edges to the PageSource entity.
func (puo *PageUpdateOne) AddPageSource(p ...*PageSource) *PageUpdateOne {
	ids := make([]uuid.UUID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return puo.AddPageSourceIDs(ids...)
}

// Mutation returns the PageMutation object of the builder.
func (puo *PageUpdateOne) Mutation() *PageMutation {
	return puo.mutation
}

// ClearPageSource clears all "page_source" edges to the PageSource entity.
func (puo *PageUpdateOne) ClearPageSource() *PageUpdateOne {
	puo.mutation.ClearPageSource()
	return puo
}

// RemovePageSourceIDs removes the "page_source" edge to PageSource entities by IDs.
func (puo *PageUpdateOne) RemovePageSourceIDs(ids ...uuid.UUID) *PageUpdateOne {
	puo.mutation.RemovePageSourceIDs(ids...)
	return puo
}

// RemovePageSource removes "page_source" edges to PageSource entities.
func (puo *PageUpdateOne) RemovePageSource(p ...*PageSource) *PageUpdateOne {
	ids := make([]uuid.UUID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return puo.RemovePageSourceIDs(ids...)
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (puo *PageUpdateOne) Select(field string, fields ...string) *PageUpdateOne {
	puo.fields = append([]string{field}, fields...)
	return puo
}

// Save executes the query and returns the updated Page entity.
func (puo *PageUpdateOne) Save(ctx context.Context) (*Page, error) {
	var (
		err  error
		node *Page
	)
	puo.defaults()
	if len(puo.hooks) == 0 {
		if err = puo.check(); err != nil {
			return nil, err
		}
		node, err = puo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*PageMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = puo.check(); err != nil {
				return nil, err
			}
			puo.mutation = mutation
			node, err = puo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(puo.hooks) - 1; i >= 0; i-- {
			if puo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = puo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, puo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*Page)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from PageMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (puo *PageUpdateOne) SaveX(ctx context.Context) *Page {
	node, err := puo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (puo *PageUpdateOne) Exec(ctx context.Context) error {
	_, err := puo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (puo *PageUpdateOne) ExecX(ctx context.Context) {
	if err := puo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (puo *PageUpdateOne) defaults() {
	if _, ok := puo.mutation.UpdatedAt(); !ok {
		v := page.UpdateDefaultUpdatedAt()
		puo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (puo *PageUpdateOne) check() error {
	if v, ok := puo.mutation.Domain(); ok {
		if err := page.DomainValidator(v); err != nil {
			return &ValidationError{Name: "domain", err: fmt.Errorf(`ent: validator failed for field "Page.domain": %w`, err)}
		}
	}
	if v, ok := puo.mutation.Port(); ok {
		if err := page.PortValidator(v); err != nil {
			return &ValidationError{Name: "port", err: fmt.Errorf(`ent: validator failed for field "Page.port": %w`, err)}
		}
	}
	if v, ok := puo.mutation.URL(); ok {
		if err := page.URLValidator(v); err != nil {
			return &ValidationError{Name: "url", err: fmt.Errorf(`ent: validator failed for field "Page.url": %w`, err)}
		}
	}
	if v, ok := puo.mutation.Path(); ok {
		if err := page.PathValidator(v); err != nil {
			return &ValidationError{Name: "path", err: fmt.Errorf(`ent: validator failed for field "Page.path": %w`, err)}
		}
	}
	if v, ok := puo.mutation.Status(); ok {
		if err := page.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "Page.status": %w`, err)}
		}
	}
	if v, ok := puo.mutation.CreatedBy(); ok {
		if err := page.CreatedByValidator(v); err != nil {
			return &ValidationError{Name: "created_by", err: fmt.Errorf(`ent: validator failed for field "Page.created_by": %w`, err)}
		}
	}
	if v, ok := puo.mutation.UpdatedBy(); ok {
		if err := page.UpdatedByValidator(v); err != nil {
			return &ValidationError{Name: "updated_by", err: fmt.Errorf(`ent: validator failed for field "Page.updated_by": %w`, err)}
		}
	}
	return nil
}

func (puo *PageUpdateOne) sqlSave(ctx context.Context) (_node *Page, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   page.Table,
			Columns: page.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: page.FieldID,
			},
		},
	}
	id, ok := puo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Page.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := puo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, page.FieldID)
		for _, f := range fields {
			if !page.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != page.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := puo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := puo.mutation.CrawlingVersion(); ok {
		_spec.SetField(page.FieldCrawlingVersion, field.TypeString, value)
	}
	if value, ok := puo.mutation.Domain(); ok {
		_spec.SetField(page.FieldDomain, field.TypeString, value)
	}
	if value, ok := puo.mutation.Port(); ok {
		_spec.SetField(page.FieldPort, field.TypeString, value)
	}
	if value, ok := puo.mutation.IsHTTPS(); ok {
		_spec.SetField(page.FieldIsHTTPS, field.TypeBool, value)
	}
	if value, ok := puo.mutation.URL(); ok {
		_spec.SetField(page.FieldURL, field.TypeString, value)
	}
	if value, ok := puo.mutation.Path(); ok {
		_spec.SetField(page.FieldPath, field.TypeString, value)
	}
	if value, ok := puo.mutation.Querystring(); ok {
		_spec.SetField(page.FieldQuerystring, field.TypeString, value)
	}
	if value, ok := puo.mutation.CountReferred(); ok {
		_spec.SetField(page.FieldCountReferred, field.TypeInt64, value)
	}
	if value, ok := puo.mutation.AddedCountReferred(); ok {
		_spec.AddField(page.FieldCountReferred, field.TypeInt64, value)
	}
	if value, ok := puo.mutation.Status(); ok {
		_spec.SetField(page.FieldStatus, field.TypeEnum, value)
	}
	if value, ok := puo.mutation.CreatedBy(); ok {
		_spec.SetField(page.FieldCreatedBy, field.TypeString, value)
	}
	if value, ok := puo.mutation.UpdatedAt(); ok {
		_spec.SetField(page.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := puo.mutation.UpdatedBy(); ok {
		_spec.SetField(page.FieldUpdatedBy, field.TypeString, value)
	}
	if value, ok := puo.mutation.Title(); ok {
		_spec.SetField(page.FieldTitle, field.TypeString, value)
	}
	if value, ok := puo.mutation.Description(); ok {
		_spec.SetField(page.FieldDescription, field.TypeString, value)
	}
	if value, ok := puo.mutation.Keywords(); ok {
		_spec.SetField(page.FieldKeywords, field.TypeString, value)
	}
	if value, ok := puo.mutation.ContentLanguage(); ok {
		_spec.SetField(page.FieldContentLanguage, field.TypeString, value)
	}
	if value, ok := puo.mutation.TwitterCard(); ok {
		_spec.SetField(page.FieldTwitterCard, field.TypeString, value)
	}
	if value, ok := puo.mutation.TwitterURL(); ok {
		_spec.SetField(page.FieldTwitterURL, field.TypeString, value)
	}
	if value, ok := puo.mutation.TwitterTitle(); ok {
		_spec.SetField(page.FieldTwitterTitle, field.TypeString, value)
	}
	if value, ok := puo.mutation.TwitterDescription(); ok {
		_spec.SetField(page.FieldTwitterDescription, field.TypeString, value)
	}
	if value, ok := puo.mutation.TwitterImage(); ok {
		_spec.SetField(page.FieldTwitterImage, field.TypeString, value)
	}
	if value, ok := puo.mutation.OgSiteName(); ok {
		_spec.SetField(page.FieldOgSiteName, field.TypeString, value)
	}
	if value, ok := puo.mutation.OgLocale(); ok {
		_spec.SetField(page.FieldOgLocale, field.TypeString, value)
	}
	if value, ok := puo.mutation.OgTitle(); ok {
		_spec.SetField(page.FieldOgTitle, field.TypeString, value)
	}
	if value, ok := puo.mutation.OgDescription(); ok {
		_spec.SetField(page.FieldOgDescription, field.TypeString, value)
	}
	if value, ok := puo.mutation.OgType(); ok {
		_spec.SetField(page.FieldOgType, field.TypeString, value)
	}
	if value, ok := puo.mutation.OgURL(); ok {
		_spec.SetField(page.FieldOgURL, field.TypeString, value)
	}
	if value, ok := puo.mutation.OgImage(); ok {
		_spec.SetField(page.FieldOgImage, field.TypeString, value)
	}
	if value, ok := puo.mutation.OgImageType(); ok {
		_spec.SetField(page.FieldOgImageType, field.TypeString, value)
	}
	if value, ok := puo.mutation.OgImageURL(); ok {
		_spec.SetField(page.FieldOgImageURL, field.TypeString, value)
	}
	if value, ok := puo.mutation.OgImageSecureURL(); ok {
		_spec.SetField(page.FieldOgImageSecureURL, field.TypeString, value)
	}
	if value, ok := puo.mutation.OgImageWidth(); ok {
		_spec.SetField(page.FieldOgImageWidth, field.TypeString, value)
	}
	if value, ok := puo.mutation.OgImageHeight(); ok {
		_spec.SetField(page.FieldOgImageHeight, field.TypeString, value)
	}
	if value, ok := puo.mutation.OgVideo(); ok {
		_spec.SetField(page.FieldOgVideo, field.TypeString, value)
	}
	if value, ok := puo.mutation.OgVideoType(); ok {
		_spec.SetField(page.FieldOgVideoType, field.TypeString, value)
	}
	if value, ok := puo.mutation.OgVideoURL(); ok {
		_spec.SetField(page.FieldOgVideoURL, field.TypeString, value)
	}
	if value, ok := puo.mutation.OgVideoSecureURL(); ok {
		_spec.SetField(page.FieldOgVideoSecureURL, field.TypeString, value)
	}
	if value, ok := puo.mutation.OgVideoWidth(); ok {
		_spec.SetField(page.FieldOgVideoWidth, field.TypeString, value)
	}
	if value, ok := puo.mutation.OgVideoHeight(); ok {
		_spec.SetField(page.FieldOgVideoHeight, field.TypeString, value)
	}
	if puo.mutation.PageSourceCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   page.PageSourceTable,
			Columns: []string{page.PageSourceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: pagesource.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.RemovedPageSourceIDs(); len(nodes) > 0 && !puo.mutation.PageSourceCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   page.PageSourceTable,
			Columns: []string{page.PageSourceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: pagesource.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.PageSourceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   page.PageSourceTable,
			Columns: []string{page.PageSourceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: pagesource.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Page{config: puo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, puo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{page.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}
