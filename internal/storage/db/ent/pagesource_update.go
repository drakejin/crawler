// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/drakejin/crawler/internal/storage/db/ent/pagesource"
	"github.com/drakejin/crawler/internal/storage/db/ent/predicate"
)

// PageSourceUpdate is the builder for updating PageSource entities.
type PageSourceUpdate struct {
	config
	hooks    []Hook
	mutation *PageSourceMutation
}

// Where appends a list predicates to the PageSourceUpdate builder.
func (psu *PageSourceUpdate) Where(ps ...predicate.PageSource) *PageSourceUpdate {
	psu.mutation.Where(ps...)
	return psu
}

// SetSource sets the "source" field.
func (psu *PageSourceUpdate) SetSource(s string) *PageSourceUpdate {
	psu.mutation.SetSource(s)
	return psu
}

// SetNillableSource sets the "source" field if the given value is not nil.
func (psu *PageSourceUpdate) SetNillableSource(s *string) *PageSourceUpdate {
	if s != nil {
		psu.SetSource(*s)
	}
	return psu
}

// Mutation returns the PageSourceMutation object of the builder.
func (psu *PageSourceUpdate) Mutation() *PageSourceMutation {
	return psu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (psu *PageSourceUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(psu.hooks) == 0 {
		affected, err = psu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*PageSourceMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			psu.mutation = mutation
			affected, err = psu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(psu.hooks) - 1; i >= 0; i-- {
			if psu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = psu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, psu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (psu *PageSourceUpdate) SaveX(ctx context.Context) int {
	affected, err := psu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (psu *PageSourceUpdate) Exec(ctx context.Context) error {
	_, err := psu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (psu *PageSourceUpdate) ExecX(ctx context.Context) {
	if err := psu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (psu *PageSourceUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   pagesource.Table,
			Columns: pagesource.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: pagesource.FieldID,
			},
		},
	}
	if ps := psu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := psu.mutation.Source(); ok {
		_spec.SetField(pagesource.FieldSource, field.TypeString, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, psu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{pagesource.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	return n, nil
}

// PageSourceUpdateOne is the builder for updating a single PageSource entity.
type PageSourceUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *PageSourceMutation
}

// SetSource sets the "source" field.
func (psuo *PageSourceUpdateOne) SetSource(s string) *PageSourceUpdateOne {
	psuo.mutation.SetSource(s)
	return psuo
}

// SetNillableSource sets the "source" field if the given value is not nil.
func (psuo *PageSourceUpdateOne) SetNillableSource(s *string) *PageSourceUpdateOne {
	if s != nil {
		psuo.SetSource(*s)
	}
	return psuo
}

// Mutation returns the PageSourceMutation object of the builder.
func (psuo *PageSourceUpdateOne) Mutation() *PageSourceMutation {
	return psuo.mutation
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (psuo *PageSourceUpdateOne) Select(field string, fields ...string) *PageSourceUpdateOne {
	psuo.fields = append([]string{field}, fields...)
	return psuo
}

// Save executes the query and returns the updated PageSource entity.
func (psuo *PageSourceUpdateOne) Save(ctx context.Context) (*PageSource, error) {
	var (
		err  error
		node *PageSource
	)
	if len(psuo.hooks) == 0 {
		node, err = psuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*PageSourceMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			psuo.mutation = mutation
			node, err = psuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(psuo.hooks) - 1; i >= 0; i-- {
			if psuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = psuo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, psuo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*PageSource)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from PageSourceMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (psuo *PageSourceUpdateOne) SaveX(ctx context.Context) *PageSource {
	node, err := psuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (psuo *PageSourceUpdateOne) Exec(ctx context.Context) error {
	_, err := psuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (psuo *PageSourceUpdateOne) ExecX(ctx context.Context) {
	if err := psuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (psuo *PageSourceUpdateOne) sqlSave(ctx context.Context) (_node *PageSource, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   pagesource.Table,
			Columns: pagesource.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: pagesource.FieldID,
			},
		},
	}
	id, ok := psuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "PageSource.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := psuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, pagesource.FieldID)
		for _, f := range fields {
			if !pagesource.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != pagesource.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := psuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := psuo.mutation.Source(); ok {
		_spec.SetField(pagesource.FieldSource, field.TypeString, value)
	}
	_node = &PageSource{config: psuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, psuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{pagesource.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}
