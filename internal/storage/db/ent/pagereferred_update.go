// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/drakejin/crawler/internal/storage/db/ent/pagereferred"
	"github.com/drakejin/crawler/internal/storage/db/ent/predicate"
	"github.com/google/uuid"
)

// PageReferredUpdate is the builder for updating PageReferred entities.
type PageReferredUpdate struct {
	config
	hooks    []Hook
	mutation *PageReferredMutation
}

// Where appends a list predicates to the PageReferredUpdate builder.
func (pru *PageReferredUpdate) Where(ps ...predicate.PageReferred) *PageReferredUpdate {
	pru.mutation.Where(ps...)
	return pru
}

// SetSourceID sets the "source_id" field.
func (pru *PageReferredUpdate) SetSourceID(u uuid.UUID) *PageReferredUpdate {
	pru.mutation.SetSourceID(u)
	return pru
}

// SetTargetID sets the "target_id" field.
func (pru *PageReferredUpdate) SetTargetID(u uuid.UUID) *PageReferredUpdate {
	pru.mutation.SetTargetID(u)
	return pru
}

// SetCreatedBy sets the "created_by" field.
func (pru *PageReferredUpdate) SetCreatedBy(s string) *PageReferredUpdate {
	pru.mutation.SetCreatedBy(s)
	return pru
}

// SetUpdatedAt sets the "updated_at" field.
func (pru *PageReferredUpdate) SetUpdatedAt(t time.Time) *PageReferredUpdate {
	pru.mutation.SetUpdatedAt(t)
	return pru
}

// SetUpdatedBy sets the "updated_by" field.
func (pru *PageReferredUpdate) SetUpdatedBy(s string) *PageReferredUpdate {
	pru.mutation.SetUpdatedBy(s)
	return pru
}

// Mutation returns the PageReferredMutation object of the builder.
func (pru *PageReferredUpdate) Mutation() *PageReferredMutation {
	return pru.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (pru *PageReferredUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	pru.defaults()
	if len(pru.hooks) == 0 {
		if err = pru.check(); err != nil {
			return 0, err
		}
		affected, err = pru.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*PageReferredMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = pru.check(); err != nil {
				return 0, err
			}
			pru.mutation = mutation
			affected, err = pru.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(pru.hooks) - 1; i >= 0; i-- {
			if pru.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = pru.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, pru.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (pru *PageReferredUpdate) SaveX(ctx context.Context) int {
	affected, err := pru.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (pru *PageReferredUpdate) Exec(ctx context.Context) error {
	_, err := pru.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pru *PageReferredUpdate) ExecX(ctx context.Context) {
	if err := pru.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pru *PageReferredUpdate) defaults() {
	if _, ok := pru.mutation.UpdatedAt(); !ok {
		v := pagereferred.UpdateDefaultUpdatedAt()
		pru.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pru *PageReferredUpdate) check() error {
	if v, ok := pru.mutation.CreatedBy(); ok {
		if err := pagereferred.CreatedByValidator(v); err != nil {
			return &ValidationError{Name: "created_by", err: fmt.Errorf(`ent: validator failed for field "PageReferred.created_by": %w`, err)}
		}
	}
	if v, ok := pru.mutation.UpdatedBy(); ok {
		if err := pagereferred.UpdatedByValidator(v); err != nil {
			return &ValidationError{Name: "updated_by", err: fmt.Errorf(`ent: validator failed for field "PageReferred.updated_by": %w`, err)}
		}
	}
	return nil
}

func (pru *PageReferredUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   pagereferred.Table,
			Columns: pagereferred.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: pagereferred.FieldID,
			},
		},
	}
	if ps := pru.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pru.mutation.SourceID(); ok {
		_spec.SetField(pagereferred.FieldSourceID, field.TypeUUID, value)
	}
	if value, ok := pru.mutation.TargetID(); ok {
		_spec.SetField(pagereferred.FieldTargetID, field.TypeUUID, value)
	}
	if value, ok := pru.mutation.CreatedBy(); ok {
		_spec.SetField(pagereferred.FieldCreatedBy, field.TypeString, value)
	}
	if value, ok := pru.mutation.UpdatedAt(); ok {
		_spec.SetField(pagereferred.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := pru.mutation.UpdatedBy(); ok {
		_spec.SetField(pagereferred.FieldUpdatedBy, field.TypeString, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, pru.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{pagereferred.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	return n, nil
}

// PageReferredUpdateOne is the builder for updating a single PageReferred entity.
type PageReferredUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *PageReferredMutation
}

// SetSourceID sets the "source_id" field.
func (pruo *PageReferredUpdateOne) SetSourceID(u uuid.UUID) *PageReferredUpdateOne {
	pruo.mutation.SetSourceID(u)
	return pruo
}

// SetTargetID sets the "target_id" field.
func (pruo *PageReferredUpdateOne) SetTargetID(u uuid.UUID) *PageReferredUpdateOne {
	pruo.mutation.SetTargetID(u)
	return pruo
}

// SetCreatedBy sets the "created_by" field.
func (pruo *PageReferredUpdateOne) SetCreatedBy(s string) *PageReferredUpdateOne {
	pruo.mutation.SetCreatedBy(s)
	return pruo
}

// SetUpdatedAt sets the "updated_at" field.
func (pruo *PageReferredUpdateOne) SetUpdatedAt(t time.Time) *PageReferredUpdateOne {
	pruo.mutation.SetUpdatedAt(t)
	return pruo
}

// SetUpdatedBy sets the "updated_by" field.
func (pruo *PageReferredUpdateOne) SetUpdatedBy(s string) *PageReferredUpdateOne {
	pruo.mutation.SetUpdatedBy(s)
	return pruo
}

// Mutation returns the PageReferredMutation object of the builder.
func (pruo *PageReferredUpdateOne) Mutation() *PageReferredMutation {
	return pruo.mutation
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (pruo *PageReferredUpdateOne) Select(field string, fields ...string) *PageReferredUpdateOne {
	pruo.fields = append([]string{field}, fields...)
	return pruo
}

// Save executes the query and returns the updated PageReferred entity.
func (pruo *PageReferredUpdateOne) Save(ctx context.Context) (*PageReferred, error) {
	var (
		err  error
		node *PageReferred
	)
	pruo.defaults()
	if len(pruo.hooks) == 0 {
		if err = pruo.check(); err != nil {
			return nil, err
		}
		node, err = pruo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*PageReferredMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = pruo.check(); err != nil {
				return nil, err
			}
			pruo.mutation = mutation
			node, err = pruo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(pruo.hooks) - 1; i >= 0; i-- {
			if pruo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = pruo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, pruo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*PageReferred)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from PageReferredMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (pruo *PageReferredUpdateOne) SaveX(ctx context.Context) *PageReferred {
	node, err := pruo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (pruo *PageReferredUpdateOne) Exec(ctx context.Context) error {
	_, err := pruo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pruo *PageReferredUpdateOne) ExecX(ctx context.Context) {
	if err := pruo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pruo *PageReferredUpdateOne) defaults() {
	if _, ok := pruo.mutation.UpdatedAt(); !ok {
		v := pagereferred.UpdateDefaultUpdatedAt()
		pruo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pruo *PageReferredUpdateOne) check() error {
	if v, ok := pruo.mutation.CreatedBy(); ok {
		if err := pagereferred.CreatedByValidator(v); err != nil {
			return &ValidationError{Name: "created_by", err: fmt.Errorf(`ent: validator failed for field "PageReferred.created_by": %w`, err)}
		}
	}
	if v, ok := pruo.mutation.UpdatedBy(); ok {
		if err := pagereferred.UpdatedByValidator(v); err != nil {
			return &ValidationError{Name: "updated_by", err: fmt.Errorf(`ent: validator failed for field "PageReferred.updated_by": %w`, err)}
		}
	}
	return nil
}

func (pruo *PageReferredUpdateOne) sqlSave(ctx context.Context) (_node *PageReferred, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   pagereferred.Table,
			Columns: pagereferred.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: pagereferred.FieldID,
			},
		},
	}
	id, ok := pruo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "PageReferred.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := pruo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, pagereferred.FieldID)
		for _, f := range fields {
			if !pagereferred.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != pagereferred.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := pruo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pruo.mutation.SourceID(); ok {
		_spec.SetField(pagereferred.FieldSourceID, field.TypeUUID, value)
	}
	if value, ok := pruo.mutation.TargetID(); ok {
		_spec.SetField(pagereferred.FieldTargetID, field.TypeUUID, value)
	}
	if value, ok := pruo.mutation.CreatedBy(); ok {
		_spec.SetField(pagereferred.FieldCreatedBy, field.TypeString, value)
	}
	if value, ok := pruo.mutation.UpdatedAt(); ok {
		_spec.SetField(pagereferred.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := pruo.mutation.UpdatedBy(); ok {
		_spec.SetField(pagereferred.FieldUpdatedBy, field.TypeString, value)
	}
	_node = &PageReferred{config: pruo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, pruo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{pagereferred.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}
