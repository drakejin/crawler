// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/drakejin/crawler/internal/storage/db/ent/pageinfo"
)

// PageInfo is the model entity for the PageInfo schema.
type PageInfo struct {
	config `json:"-"`
	// ID of the ent.
	ID int64 `json:"id,omitempty"`
	// domain www.example.com
	Domain string `json:"domain,omitempty"`
	// port number
	Port string `json:"port,omitempty"`
	// is used tls/ssl layer flag
	IsHTTPS bool `json:"is_https,omitempty"`
	// url for only indexing
	IndexedURL string `json:"indexed_url,omitempty"`
	// url.path
	Path string `json:"path,omitempty"`
	// url.querystring
	Querystring string `json:"querystring,omitempty"`
	// this mean url
	URL string `json:"url,omitempty"`
	// how many times referred
	CountReferred int64 `json:"count_referred,omitempty"`
	// 해당 row는 쓸 수 있는지? 없는지?
	Status pageinfo.Status `json:"status,omitempty"`
	// first indexed time
	CreatedAt time.Time `json:"created_at,omitempty"`
	// first indexed time by which system
	CreatedBy string `json:"created_by,omitempty"`
	// modified time
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// modified by which system
	UpdatedBy string `json:"updated_by,omitempty"`
	// html title tag
	Title string `json:"title,omitempty"`
	// basic meta tags 'description'
	Description string `json:"description,omitempty"`
	// basic meta tags 'keywords'
	Keywords string `json:"keywords,omitempty"`
	// basic meta tags 'content-language'
	ContentLanguage string `json:"content_language,omitempty"`
	// twitter meta tags 'card'
	TwitterCard string `json:"twitter_card,omitempty"`
	// twitter meta tags 'url'
	TwitterURL string `json:"twitter_url,omitempty"`
	// twitter meta tags 'title'
	TwitterTitle string `json:"twitter_title,omitempty"`
	// twitter meta tags 'description'
	TwitterDescription string `json:"twitter_description,omitempty"`
	// twitter meta tags 'image'
	TwitterImage string `json:"twitter_image,omitempty"`
	// og meta tags 'site_name'
	OgSiteName string `json:"og_site_name,omitempty"`
	// og meta tags 'locale'
	OgLocale string `json:"og_locale,omitempty"`
	// og meta tags 'title'
	OgTitle string `json:"og_title,omitempty"`
	// og meta tags 'description'
	OgDescription string `json:"og_description,omitempty"`
	// og meta tags 'type'
	OgType string `json:"og_type,omitempty"`
	// og meta tags 'url'
	OgURL string `json:"og_url,omitempty"`
	// og meta tags 'image'
	OgImage string `json:"og_image,omitempty"`
	// og meta tags 'image:type'
	OgImageType string `json:"og_image_type,omitempty"`
	// og meta tags 'image:url'
	OgImageURL string `json:"og_image_url,omitempty"`
	// og meta tags 'image:secure_url'
	OgImageSecureURL string `json:"og_image_secure_url,omitempty"`
	// og meta tags 'image:width'
	OgImageWidth string `json:"og_image_width,omitempty"`
	// og meta tags 'image:height'
	OgImageHeight string `json:"og_image_height,omitempty"`
	// og meta tags 'video'
	OgVideo string `json:"og_video,omitempty"`
	// og meta tags 'video:type'
	OgVideoType string `json:"og_video_type,omitempty"`
	// og meta tags 'video:url'
	OgVideoURL string `json:"og_video_url,omitempty"`
	// og meta tags 'video:secure_url'
	OgVideoSecureURL string `json:"og_video_secure_url,omitempty"`
	// og meta tags 'video:width'
	OgVideoWidth string `json:"og_video_width,omitempty"`
	// og meta tags 'video:height'
	OgVideoHeight string `json:"og_video_height,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*PageInfo) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case pageinfo.FieldIsHTTPS:
			values[i] = new(sql.NullBool)
		case pageinfo.FieldID, pageinfo.FieldCountReferred:
			values[i] = new(sql.NullInt64)
		case pageinfo.FieldDomain, pageinfo.FieldPort, pageinfo.FieldIndexedURL, pageinfo.FieldPath, pageinfo.FieldQuerystring, pageinfo.FieldURL, pageinfo.FieldStatus, pageinfo.FieldCreatedBy, pageinfo.FieldUpdatedBy, pageinfo.FieldTitle, pageinfo.FieldDescription, pageinfo.FieldKeywords, pageinfo.FieldContentLanguage, pageinfo.FieldTwitterCard, pageinfo.FieldTwitterURL, pageinfo.FieldTwitterTitle, pageinfo.FieldTwitterDescription, pageinfo.FieldTwitterImage, pageinfo.FieldOgSiteName, pageinfo.FieldOgLocale, pageinfo.FieldOgTitle, pageinfo.FieldOgDescription, pageinfo.FieldOgType, pageinfo.FieldOgURL, pageinfo.FieldOgImage, pageinfo.FieldOgImageType, pageinfo.FieldOgImageURL, pageinfo.FieldOgImageSecureURL, pageinfo.FieldOgImageWidth, pageinfo.FieldOgImageHeight, pageinfo.FieldOgVideo, pageinfo.FieldOgVideoType, pageinfo.FieldOgVideoURL, pageinfo.FieldOgVideoSecureURL, pageinfo.FieldOgVideoWidth, pageinfo.FieldOgVideoHeight:
			values[i] = new(sql.NullString)
		case pageinfo.FieldCreatedAt, pageinfo.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type PageInfo", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the PageInfo fields.
func (pi *PageInfo) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case pageinfo.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			pi.ID = int64(value.Int64)
		case pageinfo.FieldDomain:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field domain", values[i])
			} else if value.Valid {
				pi.Domain = value.String
			}
		case pageinfo.FieldPort:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field port", values[i])
			} else if value.Valid {
				pi.Port = value.String
			}
		case pageinfo.FieldIsHTTPS:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field is_https", values[i])
			} else if value.Valid {
				pi.IsHTTPS = value.Bool
			}
		case pageinfo.FieldIndexedURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field indexed_url", values[i])
			} else if value.Valid {
				pi.IndexedURL = value.String
			}
		case pageinfo.FieldPath:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field path", values[i])
			} else if value.Valid {
				pi.Path = value.String
			}
		case pageinfo.FieldQuerystring:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field querystring", values[i])
			} else if value.Valid {
				pi.Querystring = value.String
			}
		case pageinfo.FieldURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field url", values[i])
			} else if value.Valid {
				pi.URL = value.String
			}
		case pageinfo.FieldCountReferred:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field count_referred", values[i])
			} else if value.Valid {
				pi.CountReferred = value.Int64
			}
		case pageinfo.FieldStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				pi.Status = pageinfo.Status(value.String)
			}
		case pageinfo.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				pi.CreatedAt = value.Time
			}
		case pageinfo.FieldCreatedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field created_by", values[i])
			} else if value.Valid {
				pi.CreatedBy = value.String
			}
		case pageinfo.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				pi.UpdatedAt = value.Time
			}
		case pageinfo.FieldUpdatedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field updated_by", values[i])
			} else if value.Valid {
				pi.UpdatedBy = value.String
			}
		case pageinfo.FieldTitle:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field title", values[i])
			} else if value.Valid {
				pi.Title = value.String
			}
		case pageinfo.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				pi.Description = value.String
			}
		case pageinfo.FieldKeywords:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field keywords", values[i])
			} else if value.Valid {
				pi.Keywords = value.String
			}
		case pageinfo.FieldContentLanguage:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field content_language", values[i])
			} else if value.Valid {
				pi.ContentLanguage = value.String
			}
		case pageinfo.FieldTwitterCard:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field twitter_card", values[i])
			} else if value.Valid {
				pi.TwitterCard = value.String
			}
		case pageinfo.FieldTwitterURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field twitter_url", values[i])
			} else if value.Valid {
				pi.TwitterURL = value.String
			}
		case pageinfo.FieldTwitterTitle:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field twitter_title", values[i])
			} else if value.Valid {
				pi.TwitterTitle = value.String
			}
		case pageinfo.FieldTwitterDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field twitter_description", values[i])
			} else if value.Valid {
				pi.TwitterDescription = value.String
			}
		case pageinfo.FieldTwitterImage:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field twitter_image", values[i])
			} else if value.Valid {
				pi.TwitterImage = value.String
			}
		case pageinfo.FieldOgSiteName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field og_site_name", values[i])
			} else if value.Valid {
				pi.OgSiteName = value.String
			}
		case pageinfo.FieldOgLocale:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field og_locale", values[i])
			} else if value.Valid {
				pi.OgLocale = value.String
			}
		case pageinfo.FieldOgTitle:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field og_title", values[i])
			} else if value.Valid {
				pi.OgTitle = value.String
			}
		case pageinfo.FieldOgDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field og_description", values[i])
			} else if value.Valid {
				pi.OgDescription = value.String
			}
		case pageinfo.FieldOgType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field og_type", values[i])
			} else if value.Valid {
				pi.OgType = value.String
			}
		case pageinfo.FieldOgURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field og_url", values[i])
			} else if value.Valid {
				pi.OgURL = value.String
			}
		case pageinfo.FieldOgImage:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field og_image", values[i])
			} else if value.Valid {
				pi.OgImage = value.String
			}
		case pageinfo.FieldOgImageType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field og_image_type", values[i])
			} else if value.Valid {
				pi.OgImageType = value.String
			}
		case pageinfo.FieldOgImageURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field og_image_url", values[i])
			} else if value.Valid {
				pi.OgImageURL = value.String
			}
		case pageinfo.FieldOgImageSecureURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field og_image_secure_url", values[i])
			} else if value.Valid {
				pi.OgImageSecureURL = value.String
			}
		case pageinfo.FieldOgImageWidth:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field og_image_width", values[i])
			} else if value.Valid {
				pi.OgImageWidth = value.String
			}
		case pageinfo.FieldOgImageHeight:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field og_image_height", values[i])
			} else if value.Valid {
				pi.OgImageHeight = value.String
			}
		case pageinfo.FieldOgVideo:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field og_video", values[i])
			} else if value.Valid {
				pi.OgVideo = value.String
			}
		case pageinfo.FieldOgVideoType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field og_video_type", values[i])
			} else if value.Valid {
				pi.OgVideoType = value.String
			}
		case pageinfo.FieldOgVideoURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field og_video_url", values[i])
			} else if value.Valid {
				pi.OgVideoURL = value.String
			}
		case pageinfo.FieldOgVideoSecureURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field og_video_secure_url", values[i])
			} else if value.Valid {
				pi.OgVideoSecureURL = value.String
			}
		case pageinfo.FieldOgVideoWidth:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field og_video_width", values[i])
			} else if value.Valid {
				pi.OgVideoWidth = value.String
			}
		case pageinfo.FieldOgVideoHeight:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field og_video_height", values[i])
			} else if value.Valid {
				pi.OgVideoHeight = value.String
			}
		}
	}
	return nil
}

// Update returns a builder for updating this PageInfo.
// Note that you need to call PageInfo.Unwrap() before calling this method if this PageInfo
// was returned from a transaction, and the transaction was committed or rolled back.
func (pi *PageInfo) Update() *PageInfoUpdateOne {
	return (&PageInfoClient{config: pi.config}).UpdateOne(pi)
}

// Unwrap unwraps the PageInfo entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (pi *PageInfo) Unwrap() *PageInfo {
	_tx, ok := pi.config.driver.(*txDriver)
	if !ok {
		panic("ent: PageInfo is not a transactional entity")
	}
	pi.config.driver = _tx.drv
	return pi
}

// String implements the fmt.Stringer.
func (pi *PageInfo) String() string {
	var builder strings.Builder
	builder.WriteString("PageInfo(")
	builder.WriteString(fmt.Sprintf("id=%v, ", pi.ID))
	builder.WriteString("domain=")
	builder.WriteString(pi.Domain)
	builder.WriteString(", ")
	builder.WriteString("port=")
	builder.WriteString(pi.Port)
	builder.WriteString(", ")
	builder.WriteString("is_https=")
	builder.WriteString(fmt.Sprintf("%v", pi.IsHTTPS))
	builder.WriteString(", ")
	builder.WriteString("indexed_url=")
	builder.WriteString(pi.IndexedURL)
	builder.WriteString(", ")
	builder.WriteString("path=")
	builder.WriteString(pi.Path)
	builder.WriteString(", ")
	builder.WriteString("querystring=")
	builder.WriteString(pi.Querystring)
	builder.WriteString(", ")
	builder.WriteString("url=")
	builder.WriteString(pi.URL)
	builder.WriteString(", ")
	builder.WriteString("count_referred=")
	builder.WriteString(fmt.Sprintf("%v", pi.CountReferred))
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(fmt.Sprintf("%v", pi.Status))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(pi.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("created_by=")
	builder.WriteString(pi.CreatedBy)
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(pi.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_by=")
	builder.WriteString(pi.UpdatedBy)
	builder.WriteString(", ")
	builder.WriteString("title=")
	builder.WriteString(pi.Title)
	builder.WriteString(", ")
	builder.WriteString("description=")
	builder.WriteString(pi.Description)
	builder.WriteString(", ")
	builder.WriteString("keywords=")
	builder.WriteString(pi.Keywords)
	builder.WriteString(", ")
	builder.WriteString("content_language=")
	builder.WriteString(pi.ContentLanguage)
	builder.WriteString(", ")
	builder.WriteString("twitter_card=")
	builder.WriteString(pi.TwitterCard)
	builder.WriteString(", ")
	builder.WriteString("twitter_url=")
	builder.WriteString(pi.TwitterURL)
	builder.WriteString(", ")
	builder.WriteString("twitter_title=")
	builder.WriteString(pi.TwitterTitle)
	builder.WriteString(", ")
	builder.WriteString("twitter_description=")
	builder.WriteString(pi.TwitterDescription)
	builder.WriteString(", ")
	builder.WriteString("twitter_image=")
	builder.WriteString(pi.TwitterImage)
	builder.WriteString(", ")
	builder.WriteString("og_site_name=")
	builder.WriteString(pi.OgSiteName)
	builder.WriteString(", ")
	builder.WriteString("og_locale=")
	builder.WriteString(pi.OgLocale)
	builder.WriteString(", ")
	builder.WriteString("og_title=")
	builder.WriteString(pi.OgTitle)
	builder.WriteString(", ")
	builder.WriteString("og_description=")
	builder.WriteString(pi.OgDescription)
	builder.WriteString(", ")
	builder.WriteString("og_type=")
	builder.WriteString(pi.OgType)
	builder.WriteString(", ")
	builder.WriteString("og_url=")
	builder.WriteString(pi.OgURL)
	builder.WriteString(", ")
	builder.WriteString("og_image=")
	builder.WriteString(pi.OgImage)
	builder.WriteString(", ")
	builder.WriteString("og_image_type=")
	builder.WriteString(pi.OgImageType)
	builder.WriteString(", ")
	builder.WriteString("og_image_url=")
	builder.WriteString(pi.OgImageURL)
	builder.WriteString(", ")
	builder.WriteString("og_image_secure_url=")
	builder.WriteString(pi.OgImageSecureURL)
	builder.WriteString(", ")
	builder.WriteString("og_image_width=")
	builder.WriteString(pi.OgImageWidth)
	builder.WriteString(", ")
	builder.WriteString("og_image_height=")
	builder.WriteString(pi.OgImageHeight)
	builder.WriteString(", ")
	builder.WriteString("og_video=")
	builder.WriteString(pi.OgVideo)
	builder.WriteString(", ")
	builder.WriteString("og_video_type=")
	builder.WriteString(pi.OgVideoType)
	builder.WriteString(", ")
	builder.WriteString("og_video_url=")
	builder.WriteString(pi.OgVideoURL)
	builder.WriteString(", ")
	builder.WriteString("og_video_secure_url=")
	builder.WriteString(pi.OgVideoSecureURL)
	builder.WriteString(", ")
	builder.WriteString("og_video_width=")
	builder.WriteString(pi.OgVideoWidth)
	builder.WriteString(", ")
	builder.WriteString("og_video_height=")
	builder.WriteString(pi.OgVideoHeight)
	builder.WriteByte(')')
	return builder.String()
}

// PageInfos is a parsable slice of PageInfo.
type PageInfos []*PageInfo

func (pi PageInfos) config(cfg config) {
	for _i := range pi {
		pi[_i].config = cfg
	}
}
