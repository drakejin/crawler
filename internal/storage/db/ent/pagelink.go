// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/drakejin/crawler/internal/storage/db/ent/pagelink"
)

// PageLink is the model entity for the PageLink schema.
type PageLink struct {
	config `json:"-"`
	// ID of the ent.
	ID int64 `json:"id,omitempty"`
	// SourceID holds the value of the "source_id" field.
	SourceID int64 `json:"source_id,omitempty"`
	// TargetID holds the value of the "target_id" field.
	TargetID int64 `json:"target_id,omitempty"`
	// first indexed time
	CreatedAt time.Time `json:"created_at,omitempty"`
	// first indexed time by which system
	CreatedBy string `json:"created_by,omitempty"`
	// modified time
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// modified by which system
	UpdatedBy string `json:"updated_by,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*PageLink) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case pagelink.FieldID, pagelink.FieldSourceID, pagelink.FieldTargetID:
			values[i] = new(sql.NullInt64)
		case pagelink.FieldCreatedBy, pagelink.FieldUpdatedBy:
			values[i] = new(sql.NullString)
		case pagelink.FieldCreatedAt, pagelink.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type PageLink", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the PageLink fields.
func (pl *PageLink) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case pagelink.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			pl.ID = int64(value.Int64)
		case pagelink.FieldSourceID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field source_id", values[i])
			} else if value.Valid {
				pl.SourceID = value.Int64
			}
		case pagelink.FieldTargetID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field target_id", values[i])
			} else if value.Valid {
				pl.TargetID = value.Int64
			}
		case pagelink.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				pl.CreatedAt = value.Time
			}
		case pagelink.FieldCreatedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field created_by", values[i])
			} else if value.Valid {
				pl.CreatedBy = value.String
			}
		case pagelink.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				pl.UpdatedAt = value.Time
			}
		case pagelink.FieldUpdatedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field updated_by", values[i])
			} else if value.Valid {
				pl.UpdatedBy = value.String
			}
		}
	}
	return nil
}

// Update returns a builder for updating this PageLink.
// Note that you need to call PageLink.Unwrap() before calling this method if this PageLink
// was returned from a transaction, and the transaction was committed or rolled back.
func (pl *PageLink) Update() *PageLinkUpdateOne {
	return (&PageLinkClient{config: pl.config}).UpdateOne(pl)
}

// Unwrap unwraps the PageLink entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (pl *PageLink) Unwrap() *PageLink {
	_tx, ok := pl.config.driver.(*txDriver)
	if !ok {
		panic("ent: PageLink is not a transactional entity")
	}
	pl.config.driver = _tx.drv
	return pl
}

// String implements the fmt.Stringer.
func (pl *PageLink) String() string {
	var builder strings.Builder
	builder.WriteString("PageLink(")
	builder.WriteString(fmt.Sprintf("id=%v, ", pl.ID))
	builder.WriteString("source_id=")
	builder.WriteString(fmt.Sprintf("%v", pl.SourceID))
	builder.WriteString(", ")
	builder.WriteString("target_id=")
	builder.WriteString(fmt.Sprintf("%v", pl.TargetID))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(pl.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("created_by=")
	builder.WriteString(pl.CreatedBy)
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(pl.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_by=")
	builder.WriteString(pl.UpdatedBy)
	builder.WriteByte(')')
	return builder.String()
}

// PageLinks is a parsable slice of PageLink.
type PageLinks []*PageLink

func (pl PageLinks) config(cfg config) {
	for _i := range pl {
		pl[_i].config = cfg
	}
}
