// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/drakejin/crawler/internal/storage/db/ent/pageinfo"
)

// PageInfoCreate is the builder for creating a PageInfo entity.
type PageInfoCreate struct {
	config
	mutation *PageInfoMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetDomain sets the "domain" field.
func (pic *PageInfoCreate) SetDomain(s string) *PageInfoCreate {
	pic.mutation.SetDomain(s)
	return pic
}

// SetPort sets the "port" field.
func (pic *PageInfoCreate) SetPort(s string) *PageInfoCreate {
	pic.mutation.SetPort(s)
	return pic
}

// SetNillablePort sets the "port" field if the given value is not nil.
func (pic *PageInfoCreate) SetNillablePort(s *string) *PageInfoCreate {
	if s != nil {
		pic.SetPort(*s)
	}
	return pic
}

// SetIsHTTPS sets the "is_https" field.
func (pic *PageInfoCreate) SetIsHTTPS(b bool) *PageInfoCreate {
	pic.mutation.SetIsHTTPS(b)
	return pic
}

// SetNillableIsHTTPS sets the "is_https" field if the given value is not nil.
func (pic *PageInfoCreate) SetNillableIsHTTPS(b *bool) *PageInfoCreate {
	if b != nil {
		pic.SetIsHTTPS(*b)
	}
	return pic
}

// SetIndexedURL sets the "indexed_url" field.
func (pic *PageInfoCreate) SetIndexedURL(s string) *PageInfoCreate {
	pic.mutation.SetIndexedURL(s)
	return pic
}

// SetNillableIndexedURL sets the "indexed_url" field if the given value is not nil.
func (pic *PageInfoCreate) SetNillableIndexedURL(s *string) *PageInfoCreate {
	if s != nil {
		pic.SetIndexedURL(*s)
	}
	return pic
}

// SetPath sets the "path" field.
func (pic *PageInfoCreate) SetPath(s string) *PageInfoCreate {
	pic.mutation.SetPath(s)
	return pic
}

// SetNillablePath sets the "path" field if the given value is not nil.
func (pic *PageInfoCreate) SetNillablePath(s *string) *PageInfoCreate {
	if s != nil {
		pic.SetPath(*s)
	}
	return pic
}

// SetQuerystring sets the "querystring" field.
func (pic *PageInfoCreate) SetQuerystring(s string) *PageInfoCreate {
	pic.mutation.SetQuerystring(s)
	return pic
}

// SetNillableQuerystring sets the "querystring" field if the given value is not nil.
func (pic *PageInfoCreate) SetNillableQuerystring(s *string) *PageInfoCreate {
	if s != nil {
		pic.SetQuerystring(*s)
	}
	return pic
}

// SetURL sets the "url" field.
func (pic *PageInfoCreate) SetURL(s string) *PageInfoCreate {
	pic.mutation.SetURL(s)
	return pic
}

// SetNillableURL sets the "url" field if the given value is not nil.
func (pic *PageInfoCreate) SetNillableURL(s *string) *PageInfoCreate {
	if s != nil {
		pic.SetURL(*s)
	}
	return pic
}

// SetCountReferred sets the "count_referred" field.
func (pic *PageInfoCreate) SetCountReferred(i int64) *PageInfoCreate {
	pic.mutation.SetCountReferred(i)
	return pic
}

// SetNillableCountReferred sets the "count_referred" field if the given value is not nil.
func (pic *PageInfoCreate) SetNillableCountReferred(i *int64) *PageInfoCreate {
	if i != nil {
		pic.SetCountReferred(*i)
	}
	return pic
}

// SetStatus sets the "status" field.
func (pic *PageInfoCreate) SetStatus(pa pageinfo.Status) *PageInfoCreate {
	pic.mutation.SetStatus(pa)
	return pic
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (pic *PageInfoCreate) SetNillableStatus(pa *pageinfo.Status) *PageInfoCreate {
	if pa != nil {
		pic.SetStatus(*pa)
	}
	return pic
}

// SetCreatedAt sets the "created_at" field.
func (pic *PageInfoCreate) SetCreatedAt(t time.Time) *PageInfoCreate {
	pic.mutation.SetCreatedAt(t)
	return pic
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (pic *PageInfoCreate) SetNillableCreatedAt(t *time.Time) *PageInfoCreate {
	if t != nil {
		pic.SetCreatedAt(*t)
	}
	return pic
}

// SetCreatedBy sets the "created_by" field.
func (pic *PageInfoCreate) SetCreatedBy(s string) *PageInfoCreate {
	pic.mutation.SetCreatedBy(s)
	return pic
}

// SetUpdatedAt sets the "updated_at" field.
func (pic *PageInfoCreate) SetUpdatedAt(t time.Time) *PageInfoCreate {
	pic.mutation.SetUpdatedAt(t)
	return pic
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (pic *PageInfoCreate) SetNillableUpdatedAt(t *time.Time) *PageInfoCreate {
	if t != nil {
		pic.SetUpdatedAt(*t)
	}
	return pic
}

// SetUpdatedBy sets the "updated_by" field.
func (pic *PageInfoCreate) SetUpdatedBy(s string) *PageInfoCreate {
	pic.mutation.SetUpdatedBy(s)
	return pic
}

// SetTitle sets the "title" field.
func (pic *PageInfoCreate) SetTitle(s string) *PageInfoCreate {
	pic.mutation.SetTitle(s)
	return pic
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (pic *PageInfoCreate) SetNillableTitle(s *string) *PageInfoCreate {
	if s != nil {
		pic.SetTitle(*s)
	}
	return pic
}

// SetDescription sets the "description" field.
func (pic *PageInfoCreate) SetDescription(s string) *PageInfoCreate {
	pic.mutation.SetDescription(s)
	return pic
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (pic *PageInfoCreate) SetNillableDescription(s *string) *PageInfoCreate {
	if s != nil {
		pic.SetDescription(*s)
	}
	return pic
}

// SetKeywords sets the "keywords" field.
func (pic *PageInfoCreate) SetKeywords(s string) *PageInfoCreate {
	pic.mutation.SetKeywords(s)
	return pic
}

// SetNillableKeywords sets the "keywords" field if the given value is not nil.
func (pic *PageInfoCreate) SetNillableKeywords(s *string) *PageInfoCreate {
	if s != nil {
		pic.SetKeywords(*s)
	}
	return pic
}

// SetContentLanguage sets the "content_language" field.
func (pic *PageInfoCreate) SetContentLanguage(s string) *PageInfoCreate {
	pic.mutation.SetContentLanguage(s)
	return pic
}

// SetNillableContentLanguage sets the "content_language" field if the given value is not nil.
func (pic *PageInfoCreate) SetNillableContentLanguage(s *string) *PageInfoCreate {
	if s != nil {
		pic.SetContentLanguage(*s)
	}
	return pic
}

// SetTwitterCard sets the "twitter_card" field.
func (pic *PageInfoCreate) SetTwitterCard(s string) *PageInfoCreate {
	pic.mutation.SetTwitterCard(s)
	return pic
}

// SetNillableTwitterCard sets the "twitter_card" field if the given value is not nil.
func (pic *PageInfoCreate) SetNillableTwitterCard(s *string) *PageInfoCreate {
	if s != nil {
		pic.SetTwitterCard(*s)
	}
	return pic
}

// SetTwitterURL sets the "twitter_url" field.
func (pic *PageInfoCreate) SetTwitterURL(s string) *PageInfoCreate {
	pic.mutation.SetTwitterURL(s)
	return pic
}

// SetNillableTwitterURL sets the "twitter_url" field if the given value is not nil.
func (pic *PageInfoCreate) SetNillableTwitterURL(s *string) *PageInfoCreate {
	if s != nil {
		pic.SetTwitterURL(*s)
	}
	return pic
}

// SetTwitterTitle sets the "twitter_title" field.
func (pic *PageInfoCreate) SetTwitterTitle(s string) *PageInfoCreate {
	pic.mutation.SetTwitterTitle(s)
	return pic
}

// SetNillableTwitterTitle sets the "twitter_title" field if the given value is not nil.
func (pic *PageInfoCreate) SetNillableTwitterTitle(s *string) *PageInfoCreate {
	if s != nil {
		pic.SetTwitterTitle(*s)
	}
	return pic
}

// SetTwitterDescription sets the "twitter_description" field.
func (pic *PageInfoCreate) SetTwitterDescription(s string) *PageInfoCreate {
	pic.mutation.SetTwitterDescription(s)
	return pic
}

// SetNillableTwitterDescription sets the "twitter_description" field if the given value is not nil.
func (pic *PageInfoCreate) SetNillableTwitterDescription(s *string) *PageInfoCreate {
	if s != nil {
		pic.SetTwitterDescription(*s)
	}
	return pic
}

// SetTwitterImage sets the "twitter_image" field.
func (pic *PageInfoCreate) SetTwitterImage(s string) *PageInfoCreate {
	pic.mutation.SetTwitterImage(s)
	return pic
}

// SetNillableTwitterImage sets the "twitter_image" field if the given value is not nil.
func (pic *PageInfoCreate) SetNillableTwitterImage(s *string) *PageInfoCreate {
	if s != nil {
		pic.SetTwitterImage(*s)
	}
	return pic
}

// SetOgSiteName sets the "og_site_name" field.
func (pic *PageInfoCreate) SetOgSiteName(s string) *PageInfoCreate {
	pic.mutation.SetOgSiteName(s)
	return pic
}

// SetNillableOgSiteName sets the "og_site_name" field if the given value is not nil.
func (pic *PageInfoCreate) SetNillableOgSiteName(s *string) *PageInfoCreate {
	if s != nil {
		pic.SetOgSiteName(*s)
	}
	return pic
}

// SetOgLocale sets the "og_locale" field.
func (pic *PageInfoCreate) SetOgLocale(s string) *PageInfoCreate {
	pic.mutation.SetOgLocale(s)
	return pic
}

// SetNillableOgLocale sets the "og_locale" field if the given value is not nil.
func (pic *PageInfoCreate) SetNillableOgLocale(s *string) *PageInfoCreate {
	if s != nil {
		pic.SetOgLocale(*s)
	}
	return pic
}

// SetOgTitle sets the "og_title" field.
func (pic *PageInfoCreate) SetOgTitle(s string) *PageInfoCreate {
	pic.mutation.SetOgTitle(s)
	return pic
}

// SetNillableOgTitle sets the "og_title" field if the given value is not nil.
func (pic *PageInfoCreate) SetNillableOgTitle(s *string) *PageInfoCreate {
	if s != nil {
		pic.SetOgTitle(*s)
	}
	return pic
}

// SetOgDescription sets the "og_description" field.
func (pic *PageInfoCreate) SetOgDescription(s string) *PageInfoCreate {
	pic.mutation.SetOgDescription(s)
	return pic
}

// SetNillableOgDescription sets the "og_description" field if the given value is not nil.
func (pic *PageInfoCreate) SetNillableOgDescription(s *string) *PageInfoCreate {
	if s != nil {
		pic.SetOgDescription(*s)
	}
	return pic
}

// SetOgType sets the "og_type" field.
func (pic *PageInfoCreate) SetOgType(s string) *PageInfoCreate {
	pic.mutation.SetOgType(s)
	return pic
}

// SetNillableOgType sets the "og_type" field if the given value is not nil.
func (pic *PageInfoCreate) SetNillableOgType(s *string) *PageInfoCreate {
	if s != nil {
		pic.SetOgType(*s)
	}
	return pic
}

// SetOgURL sets the "og_url" field.
func (pic *PageInfoCreate) SetOgURL(s string) *PageInfoCreate {
	pic.mutation.SetOgURL(s)
	return pic
}

// SetNillableOgURL sets the "og_url" field if the given value is not nil.
func (pic *PageInfoCreate) SetNillableOgURL(s *string) *PageInfoCreate {
	if s != nil {
		pic.SetOgURL(*s)
	}
	return pic
}

// SetOgImage sets the "og_image" field.
func (pic *PageInfoCreate) SetOgImage(s string) *PageInfoCreate {
	pic.mutation.SetOgImage(s)
	return pic
}

// SetNillableOgImage sets the "og_image" field if the given value is not nil.
func (pic *PageInfoCreate) SetNillableOgImage(s *string) *PageInfoCreate {
	if s != nil {
		pic.SetOgImage(*s)
	}
	return pic
}

// SetOgImageType sets the "og_image_type" field.
func (pic *PageInfoCreate) SetOgImageType(s string) *PageInfoCreate {
	pic.mutation.SetOgImageType(s)
	return pic
}

// SetNillableOgImageType sets the "og_image_type" field if the given value is not nil.
func (pic *PageInfoCreate) SetNillableOgImageType(s *string) *PageInfoCreate {
	if s != nil {
		pic.SetOgImageType(*s)
	}
	return pic
}

// SetOgImageURL sets the "og_image_url" field.
func (pic *PageInfoCreate) SetOgImageURL(s string) *PageInfoCreate {
	pic.mutation.SetOgImageURL(s)
	return pic
}

// SetNillableOgImageURL sets the "og_image_url" field if the given value is not nil.
func (pic *PageInfoCreate) SetNillableOgImageURL(s *string) *PageInfoCreate {
	if s != nil {
		pic.SetOgImageURL(*s)
	}
	return pic
}

// SetOgImageSecureURL sets the "og_image_secure_url" field.
func (pic *PageInfoCreate) SetOgImageSecureURL(s string) *PageInfoCreate {
	pic.mutation.SetOgImageSecureURL(s)
	return pic
}

// SetNillableOgImageSecureURL sets the "og_image_secure_url" field if the given value is not nil.
func (pic *PageInfoCreate) SetNillableOgImageSecureURL(s *string) *PageInfoCreate {
	if s != nil {
		pic.SetOgImageSecureURL(*s)
	}
	return pic
}

// SetOgImageWidth sets the "og_image_width" field.
func (pic *PageInfoCreate) SetOgImageWidth(s string) *PageInfoCreate {
	pic.mutation.SetOgImageWidth(s)
	return pic
}

// SetNillableOgImageWidth sets the "og_image_width" field if the given value is not nil.
func (pic *PageInfoCreate) SetNillableOgImageWidth(s *string) *PageInfoCreate {
	if s != nil {
		pic.SetOgImageWidth(*s)
	}
	return pic
}

// SetOgImageHeight sets the "og_image_height" field.
func (pic *PageInfoCreate) SetOgImageHeight(s string) *PageInfoCreate {
	pic.mutation.SetOgImageHeight(s)
	return pic
}

// SetNillableOgImageHeight sets the "og_image_height" field if the given value is not nil.
func (pic *PageInfoCreate) SetNillableOgImageHeight(s *string) *PageInfoCreate {
	if s != nil {
		pic.SetOgImageHeight(*s)
	}
	return pic
}

// SetOgVideo sets the "og_video" field.
func (pic *PageInfoCreate) SetOgVideo(s string) *PageInfoCreate {
	pic.mutation.SetOgVideo(s)
	return pic
}

// SetNillableOgVideo sets the "og_video" field if the given value is not nil.
func (pic *PageInfoCreate) SetNillableOgVideo(s *string) *PageInfoCreate {
	if s != nil {
		pic.SetOgVideo(*s)
	}
	return pic
}

// SetOgVideoType sets the "og_video_type" field.
func (pic *PageInfoCreate) SetOgVideoType(s string) *PageInfoCreate {
	pic.mutation.SetOgVideoType(s)
	return pic
}

// SetNillableOgVideoType sets the "og_video_type" field if the given value is not nil.
func (pic *PageInfoCreate) SetNillableOgVideoType(s *string) *PageInfoCreate {
	if s != nil {
		pic.SetOgVideoType(*s)
	}
	return pic
}

// SetOgVideoURL sets the "og_video_url" field.
func (pic *PageInfoCreate) SetOgVideoURL(s string) *PageInfoCreate {
	pic.mutation.SetOgVideoURL(s)
	return pic
}

// SetNillableOgVideoURL sets the "og_video_url" field if the given value is not nil.
func (pic *PageInfoCreate) SetNillableOgVideoURL(s *string) *PageInfoCreate {
	if s != nil {
		pic.SetOgVideoURL(*s)
	}
	return pic
}

// SetOgVideoSecureURL sets the "og_video_secure_url" field.
func (pic *PageInfoCreate) SetOgVideoSecureURL(s string) *PageInfoCreate {
	pic.mutation.SetOgVideoSecureURL(s)
	return pic
}

// SetNillableOgVideoSecureURL sets the "og_video_secure_url" field if the given value is not nil.
func (pic *PageInfoCreate) SetNillableOgVideoSecureURL(s *string) *PageInfoCreate {
	if s != nil {
		pic.SetOgVideoSecureURL(*s)
	}
	return pic
}

// SetOgVideoWidth sets the "og_video_width" field.
func (pic *PageInfoCreate) SetOgVideoWidth(s string) *PageInfoCreate {
	pic.mutation.SetOgVideoWidth(s)
	return pic
}

// SetNillableOgVideoWidth sets the "og_video_width" field if the given value is not nil.
func (pic *PageInfoCreate) SetNillableOgVideoWidth(s *string) *PageInfoCreate {
	if s != nil {
		pic.SetOgVideoWidth(*s)
	}
	return pic
}

// SetOgVideoHeight sets the "og_video_height" field.
func (pic *PageInfoCreate) SetOgVideoHeight(s string) *PageInfoCreate {
	pic.mutation.SetOgVideoHeight(s)
	return pic
}

// SetNillableOgVideoHeight sets the "og_video_height" field if the given value is not nil.
func (pic *PageInfoCreate) SetNillableOgVideoHeight(s *string) *PageInfoCreate {
	if s != nil {
		pic.SetOgVideoHeight(*s)
	}
	return pic
}

// SetID sets the "id" field.
func (pic *PageInfoCreate) SetID(i int64) *PageInfoCreate {
	pic.mutation.SetID(i)
	return pic
}

// Mutation returns the PageInfoMutation object of the builder.
func (pic *PageInfoCreate) Mutation() *PageInfoMutation {
	return pic.mutation
}

// Save creates the PageInfo in the database.
func (pic *PageInfoCreate) Save(ctx context.Context) (*PageInfo, error) {
	var (
		err  error
		node *PageInfo
	)
	pic.defaults()
	if len(pic.hooks) == 0 {
		if err = pic.check(); err != nil {
			return nil, err
		}
		node, err = pic.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*PageInfoMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = pic.check(); err != nil {
				return nil, err
			}
			pic.mutation = mutation
			if node, err = pic.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(pic.hooks) - 1; i >= 0; i-- {
			if pic.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = pic.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, pic.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*PageInfo)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from PageInfoMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (pic *PageInfoCreate) SaveX(ctx context.Context) *PageInfo {
	v, err := pic.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pic *PageInfoCreate) Exec(ctx context.Context) error {
	_, err := pic.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pic *PageInfoCreate) ExecX(ctx context.Context) {
	if err := pic.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pic *PageInfoCreate) defaults() {
	if _, ok := pic.mutation.Port(); !ok {
		v := pageinfo.DefaultPort
		pic.mutation.SetPort(v)
	}
	if _, ok := pic.mutation.IsHTTPS(); !ok {
		v := pageinfo.DefaultIsHTTPS
		pic.mutation.SetIsHTTPS(v)
	}
	if _, ok := pic.mutation.IndexedURL(); !ok {
		v := pageinfo.DefaultIndexedURL
		pic.mutation.SetIndexedURL(v)
	}
	if _, ok := pic.mutation.Path(); !ok {
		v := pageinfo.DefaultPath
		pic.mutation.SetPath(v)
	}
	if _, ok := pic.mutation.Querystring(); !ok {
		v := pageinfo.DefaultQuerystring
		pic.mutation.SetQuerystring(v)
	}
	if _, ok := pic.mutation.URL(); !ok {
		v := pageinfo.DefaultURL
		pic.mutation.SetURL(v)
	}
	if _, ok := pic.mutation.CountReferred(); !ok {
		v := pageinfo.DefaultCountReferred
		pic.mutation.SetCountReferred(v)
	}
	if _, ok := pic.mutation.Status(); !ok {
		v := pageinfo.DefaultStatus
		pic.mutation.SetStatus(v)
	}
	if _, ok := pic.mutation.CreatedAt(); !ok {
		v := pageinfo.DefaultCreatedAt()
		pic.mutation.SetCreatedAt(v)
	}
	if _, ok := pic.mutation.UpdatedAt(); !ok {
		v := pageinfo.DefaultUpdatedAt()
		pic.mutation.SetUpdatedAt(v)
	}
	if _, ok := pic.mutation.Title(); !ok {
		v := pageinfo.DefaultTitle
		pic.mutation.SetTitle(v)
	}
	if _, ok := pic.mutation.Description(); !ok {
		v := pageinfo.DefaultDescription
		pic.mutation.SetDescription(v)
	}
	if _, ok := pic.mutation.Keywords(); !ok {
		v := pageinfo.DefaultKeywords
		pic.mutation.SetKeywords(v)
	}
	if _, ok := pic.mutation.ContentLanguage(); !ok {
		v := pageinfo.DefaultContentLanguage
		pic.mutation.SetContentLanguage(v)
	}
	if _, ok := pic.mutation.TwitterCard(); !ok {
		v := pageinfo.DefaultTwitterCard
		pic.mutation.SetTwitterCard(v)
	}
	if _, ok := pic.mutation.TwitterURL(); !ok {
		v := pageinfo.DefaultTwitterURL
		pic.mutation.SetTwitterURL(v)
	}
	if _, ok := pic.mutation.TwitterTitle(); !ok {
		v := pageinfo.DefaultTwitterTitle
		pic.mutation.SetTwitterTitle(v)
	}
	if _, ok := pic.mutation.TwitterDescription(); !ok {
		v := pageinfo.DefaultTwitterDescription
		pic.mutation.SetTwitterDescription(v)
	}
	if _, ok := pic.mutation.TwitterImage(); !ok {
		v := pageinfo.DefaultTwitterImage
		pic.mutation.SetTwitterImage(v)
	}
	if _, ok := pic.mutation.OgSiteName(); !ok {
		v := pageinfo.DefaultOgSiteName
		pic.mutation.SetOgSiteName(v)
	}
	if _, ok := pic.mutation.OgLocale(); !ok {
		v := pageinfo.DefaultOgLocale
		pic.mutation.SetOgLocale(v)
	}
	if _, ok := pic.mutation.OgTitle(); !ok {
		v := pageinfo.DefaultOgTitle
		pic.mutation.SetOgTitle(v)
	}
	if _, ok := pic.mutation.OgDescription(); !ok {
		v := pageinfo.DefaultOgDescription
		pic.mutation.SetOgDescription(v)
	}
	if _, ok := pic.mutation.OgType(); !ok {
		v := pageinfo.DefaultOgType
		pic.mutation.SetOgType(v)
	}
	if _, ok := pic.mutation.OgURL(); !ok {
		v := pageinfo.DefaultOgURL
		pic.mutation.SetOgURL(v)
	}
	if _, ok := pic.mutation.OgImage(); !ok {
		v := pageinfo.DefaultOgImage
		pic.mutation.SetOgImage(v)
	}
	if _, ok := pic.mutation.OgImageType(); !ok {
		v := pageinfo.DefaultOgImageType
		pic.mutation.SetOgImageType(v)
	}
	if _, ok := pic.mutation.OgImageURL(); !ok {
		v := pageinfo.DefaultOgImageURL
		pic.mutation.SetOgImageURL(v)
	}
	if _, ok := pic.mutation.OgImageSecureURL(); !ok {
		v := pageinfo.DefaultOgImageSecureURL
		pic.mutation.SetOgImageSecureURL(v)
	}
	if _, ok := pic.mutation.OgImageWidth(); !ok {
		v := pageinfo.DefaultOgImageWidth
		pic.mutation.SetOgImageWidth(v)
	}
	if _, ok := pic.mutation.OgImageHeight(); !ok {
		v := pageinfo.DefaultOgImageHeight
		pic.mutation.SetOgImageHeight(v)
	}
	if _, ok := pic.mutation.OgVideo(); !ok {
		v := pageinfo.DefaultOgVideo
		pic.mutation.SetOgVideo(v)
	}
	if _, ok := pic.mutation.OgVideoType(); !ok {
		v := pageinfo.DefaultOgVideoType
		pic.mutation.SetOgVideoType(v)
	}
	if _, ok := pic.mutation.OgVideoURL(); !ok {
		v := pageinfo.DefaultOgVideoURL
		pic.mutation.SetOgVideoURL(v)
	}
	if _, ok := pic.mutation.OgVideoSecureURL(); !ok {
		v := pageinfo.DefaultOgVideoSecureURL
		pic.mutation.SetOgVideoSecureURL(v)
	}
	if _, ok := pic.mutation.OgVideoWidth(); !ok {
		v := pageinfo.DefaultOgVideoWidth
		pic.mutation.SetOgVideoWidth(v)
	}
	if _, ok := pic.mutation.OgVideoHeight(); !ok {
		v := pageinfo.DefaultOgVideoHeight
		pic.mutation.SetOgVideoHeight(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pic *PageInfoCreate) check() error {
	if _, ok := pic.mutation.Domain(); !ok {
		return &ValidationError{Name: "domain", err: errors.New(`ent: missing required field "PageInfo.domain"`)}
	}
	if v, ok := pic.mutation.Domain(); ok {
		if err := pageinfo.DomainValidator(v); err != nil {
			return &ValidationError{Name: "domain", err: fmt.Errorf(`ent: validator failed for field "PageInfo.domain": %w`, err)}
		}
	}
	if _, ok := pic.mutation.Port(); !ok {
		return &ValidationError{Name: "port", err: errors.New(`ent: missing required field "PageInfo.port"`)}
	}
	if v, ok := pic.mutation.Port(); ok {
		if err := pageinfo.PortValidator(v); err != nil {
			return &ValidationError{Name: "port", err: fmt.Errorf(`ent: validator failed for field "PageInfo.port": %w`, err)}
		}
	}
	if _, ok := pic.mutation.IsHTTPS(); !ok {
		return &ValidationError{Name: "is_https", err: errors.New(`ent: missing required field "PageInfo.is_https"`)}
	}
	if _, ok := pic.mutation.IndexedURL(); !ok {
		return &ValidationError{Name: "indexed_url", err: errors.New(`ent: missing required field "PageInfo.indexed_url"`)}
	}
	if v, ok := pic.mutation.IndexedURL(); ok {
		if err := pageinfo.IndexedURLValidator(v); err != nil {
			return &ValidationError{Name: "indexed_url", err: fmt.Errorf(`ent: validator failed for field "PageInfo.indexed_url": %w`, err)}
		}
	}
	if _, ok := pic.mutation.Path(); !ok {
		return &ValidationError{Name: "path", err: errors.New(`ent: missing required field "PageInfo.path"`)}
	}
	if v, ok := pic.mutation.Path(); ok {
		if err := pageinfo.PathValidator(v); err != nil {
			return &ValidationError{Name: "path", err: fmt.Errorf(`ent: validator failed for field "PageInfo.path": %w`, err)}
		}
	}
	if _, ok := pic.mutation.Querystring(); !ok {
		return &ValidationError{Name: "querystring", err: errors.New(`ent: missing required field "PageInfo.querystring"`)}
	}
	if _, ok := pic.mutation.URL(); !ok {
		return &ValidationError{Name: "url", err: errors.New(`ent: missing required field "PageInfo.url"`)}
	}
	if _, ok := pic.mutation.CountReferred(); !ok {
		return &ValidationError{Name: "count_referred", err: errors.New(`ent: missing required field "PageInfo.count_referred"`)}
	}
	if _, ok := pic.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`ent: missing required field "PageInfo.status"`)}
	}
	if v, ok := pic.mutation.Status(); ok {
		if err := pageinfo.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "PageInfo.status": %w`, err)}
		}
	}
	if _, ok := pic.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "PageInfo.created_at"`)}
	}
	if _, ok := pic.mutation.CreatedBy(); !ok {
		return &ValidationError{Name: "created_by", err: errors.New(`ent: missing required field "PageInfo.created_by"`)}
	}
	if v, ok := pic.mutation.CreatedBy(); ok {
		if err := pageinfo.CreatedByValidator(v); err != nil {
			return &ValidationError{Name: "created_by", err: fmt.Errorf(`ent: validator failed for field "PageInfo.created_by": %w`, err)}
		}
	}
	if _, ok := pic.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "PageInfo.updated_at"`)}
	}
	if _, ok := pic.mutation.UpdatedBy(); !ok {
		return &ValidationError{Name: "updated_by", err: errors.New(`ent: missing required field "PageInfo.updated_by"`)}
	}
	if v, ok := pic.mutation.UpdatedBy(); ok {
		if err := pageinfo.UpdatedByValidator(v); err != nil {
			return &ValidationError{Name: "updated_by", err: fmt.Errorf(`ent: validator failed for field "PageInfo.updated_by": %w`, err)}
		}
	}
	if _, ok := pic.mutation.Title(); !ok {
		return &ValidationError{Name: "title", err: errors.New(`ent: missing required field "PageInfo.title"`)}
	}
	if _, ok := pic.mutation.Description(); !ok {
		return &ValidationError{Name: "description", err: errors.New(`ent: missing required field "PageInfo.description"`)}
	}
	if _, ok := pic.mutation.Keywords(); !ok {
		return &ValidationError{Name: "keywords", err: errors.New(`ent: missing required field "PageInfo.keywords"`)}
	}
	if _, ok := pic.mutation.ContentLanguage(); !ok {
		return &ValidationError{Name: "content_language", err: errors.New(`ent: missing required field "PageInfo.content_language"`)}
	}
	if _, ok := pic.mutation.TwitterCard(); !ok {
		return &ValidationError{Name: "twitter_card", err: errors.New(`ent: missing required field "PageInfo.twitter_card"`)}
	}
	if _, ok := pic.mutation.TwitterURL(); !ok {
		return &ValidationError{Name: "twitter_url", err: errors.New(`ent: missing required field "PageInfo.twitter_url"`)}
	}
	if _, ok := pic.mutation.TwitterTitle(); !ok {
		return &ValidationError{Name: "twitter_title", err: errors.New(`ent: missing required field "PageInfo.twitter_title"`)}
	}
	if _, ok := pic.mutation.TwitterDescription(); !ok {
		return &ValidationError{Name: "twitter_description", err: errors.New(`ent: missing required field "PageInfo.twitter_description"`)}
	}
	if _, ok := pic.mutation.TwitterImage(); !ok {
		return &ValidationError{Name: "twitter_image", err: errors.New(`ent: missing required field "PageInfo.twitter_image"`)}
	}
	if _, ok := pic.mutation.OgSiteName(); !ok {
		return &ValidationError{Name: "og_site_name", err: errors.New(`ent: missing required field "PageInfo.og_site_name"`)}
	}
	if _, ok := pic.mutation.OgLocale(); !ok {
		return &ValidationError{Name: "og_locale", err: errors.New(`ent: missing required field "PageInfo.og_locale"`)}
	}
	if _, ok := pic.mutation.OgTitle(); !ok {
		return &ValidationError{Name: "og_title", err: errors.New(`ent: missing required field "PageInfo.og_title"`)}
	}
	if _, ok := pic.mutation.OgDescription(); !ok {
		return &ValidationError{Name: "og_description", err: errors.New(`ent: missing required field "PageInfo.og_description"`)}
	}
	if _, ok := pic.mutation.OgType(); !ok {
		return &ValidationError{Name: "og_type", err: errors.New(`ent: missing required field "PageInfo.og_type"`)}
	}
	if _, ok := pic.mutation.OgURL(); !ok {
		return &ValidationError{Name: "og_url", err: errors.New(`ent: missing required field "PageInfo.og_url"`)}
	}
	if _, ok := pic.mutation.OgImage(); !ok {
		return &ValidationError{Name: "og_image", err: errors.New(`ent: missing required field "PageInfo.og_image"`)}
	}
	if _, ok := pic.mutation.OgImageType(); !ok {
		return &ValidationError{Name: "og_image_type", err: errors.New(`ent: missing required field "PageInfo.og_image_type"`)}
	}
	if _, ok := pic.mutation.OgImageURL(); !ok {
		return &ValidationError{Name: "og_image_url", err: errors.New(`ent: missing required field "PageInfo.og_image_url"`)}
	}
	if _, ok := pic.mutation.OgImageSecureURL(); !ok {
		return &ValidationError{Name: "og_image_secure_url", err: errors.New(`ent: missing required field "PageInfo.og_image_secure_url"`)}
	}
	if _, ok := pic.mutation.OgImageWidth(); !ok {
		return &ValidationError{Name: "og_image_width", err: errors.New(`ent: missing required field "PageInfo.og_image_width"`)}
	}
	if _, ok := pic.mutation.OgImageHeight(); !ok {
		return &ValidationError{Name: "og_image_height", err: errors.New(`ent: missing required field "PageInfo.og_image_height"`)}
	}
	if _, ok := pic.mutation.OgVideo(); !ok {
		return &ValidationError{Name: "og_video", err: errors.New(`ent: missing required field "PageInfo.og_video"`)}
	}
	if _, ok := pic.mutation.OgVideoType(); !ok {
		return &ValidationError{Name: "og_video_type", err: errors.New(`ent: missing required field "PageInfo.og_video_type"`)}
	}
	if _, ok := pic.mutation.OgVideoURL(); !ok {
		return &ValidationError{Name: "og_video_url", err: errors.New(`ent: missing required field "PageInfo.og_video_url"`)}
	}
	if _, ok := pic.mutation.OgVideoSecureURL(); !ok {
		return &ValidationError{Name: "og_video_secure_url", err: errors.New(`ent: missing required field "PageInfo.og_video_secure_url"`)}
	}
	if _, ok := pic.mutation.OgVideoWidth(); !ok {
		return &ValidationError{Name: "og_video_width", err: errors.New(`ent: missing required field "PageInfo.og_video_width"`)}
	}
	if _, ok := pic.mutation.OgVideoHeight(); !ok {
		return &ValidationError{Name: "og_video_height", err: errors.New(`ent: missing required field "PageInfo.og_video_height"`)}
	}
	return nil
}

func (pic *PageInfoCreate) sqlSave(ctx context.Context) (*PageInfo, error) {
	_node, _spec := pic.createSpec()
	if err := sqlgraph.CreateNode(ctx, pic.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int64(id)
	}
	return _node, nil
}

func (pic *PageInfoCreate) createSpec() (*PageInfo, *sqlgraph.CreateSpec) {
	var (
		_node = &PageInfo{config: pic.config}
		_spec = &sqlgraph.CreateSpec{
			Table: pageinfo.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: pageinfo.FieldID,
			},
		}
	)
	_spec.OnConflict = pic.conflict
	if id, ok := pic.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := pic.mutation.Domain(); ok {
		_spec.SetField(pageinfo.FieldDomain, field.TypeString, value)
		_node.Domain = value
	}
	if value, ok := pic.mutation.Port(); ok {
		_spec.SetField(pageinfo.FieldPort, field.TypeString, value)
		_node.Port = value
	}
	if value, ok := pic.mutation.IsHTTPS(); ok {
		_spec.SetField(pageinfo.FieldIsHTTPS, field.TypeBool, value)
		_node.IsHTTPS = value
	}
	if value, ok := pic.mutation.IndexedURL(); ok {
		_spec.SetField(pageinfo.FieldIndexedURL, field.TypeString, value)
		_node.IndexedURL = value
	}
	if value, ok := pic.mutation.Path(); ok {
		_spec.SetField(pageinfo.FieldPath, field.TypeString, value)
		_node.Path = value
	}
	if value, ok := pic.mutation.Querystring(); ok {
		_spec.SetField(pageinfo.FieldQuerystring, field.TypeString, value)
		_node.Querystring = value
	}
	if value, ok := pic.mutation.URL(); ok {
		_spec.SetField(pageinfo.FieldURL, field.TypeString, value)
		_node.URL = value
	}
	if value, ok := pic.mutation.CountReferred(); ok {
		_spec.SetField(pageinfo.FieldCountReferred, field.TypeInt64, value)
		_node.CountReferred = value
	}
	if value, ok := pic.mutation.Status(); ok {
		_spec.SetField(pageinfo.FieldStatus, field.TypeEnum, value)
		_node.Status = value
	}
	if value, ok := pic.mutation.CreatedAt(); ok {
		_spec.SetField(pageinfo.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := pic.mutation.CreatedBy(); ok {
		_spec.SetField(pageinfo.FieldCreatedBy, field.TypeString, value)
		_node.CreatedBy = value
	}
	if value, ok := pic.mutation.UpdatedAt(); ok {
		_spec.SetField(pageinfo.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := pic.mutation.UpdatedBy(); ok {
		_spec.SetField(pageinfo.FieldUpdatedBy, field.TypeString, value)
		_node.UpdatedBy = value
	}
	if value, ok := pic.mutation.Title(); ok {
		_spec.SetField(pageinfo.FieldTitle, field.TypeString, value)
		_node.Title = value
	}
	if value, ok := pic.mutation.Description(); ok {
		_spec.SetField(pageinfo.FieldDescription, field.TypeString, value)
		_node.Description = value
	}
	if value, ok := pic.mutation.Keywords(); ok {
		_spec.SetField(pageinfo.FieldKeywords, field.TypeString, value)
		_node.Keywords = value
	}
	if value, ok := pic.mutation.ContentLanguage(); ok {
		_spec.SetField(pageinfo.FieldContentLanguage, field.TypeString, value)
		_node.ContentLanguage = value
	}
	if value, ok := pic.mutation.TwitterCard(); ok {
		_spec.SetField(pageinfo.FieldTwitterCard, field.TypeString, value)
		_node.TwitterCard = value
	}
	if value, ok := pic.mutation.TwitterURL(); ok {
		_spec.SetField(pageinfo.FieldTwitterURL, field.TypeString, value)
		_node.TwitterURL = value
	}
	if value, ok := pic.mutation.TwitterTitle(); ok {
		_spec.SetField(pageinfo.FieldTwitterTitle, field.TypeString, value)
		_node.TwitterTitle = value
	}
	if value, ok := pic.mutation.TwitterDescription(); ok {
		_spec.SetField(pageinfo.FieldTwitterDescription, field.TypeString, value)
		_node.TwitterDescription = value
	}
	if value, ok := pic.mutation.TwitterImage(); ok {
		_spec.SetField(pageinfo.FieldTwitterImage, field.TypeString, value)
		_node.TwitterImage = value
	}
	if value, ok := pic.mutation.OgSiteName(); ok {
		_spec.SetField(pageinfo.FieldOgSiteName, field.TypeString, value)
		_node.OgSiteName = value
	}
	if value, ok := pic.mutation.OgLocale(); ok {
		_spec.SetField(pageinfo.FieldOgLocale, field.TypeString, value)
		_node.OgLocale = value
	}
	if value, ok := pic.mutation.OgTitle(); ok {
		_spec.SetField(pageinfo.FieldOgTitle, field.TypeString, value)
		_node.OgTitle = value
	}
	if value, ok := pic.mutation.OgDescription(); ok {
		_spec.SetField(pageinfo.FieldOgDescription, field.TypeString, value)
		_node.OgDescription = value
	}
	if value, ok := pic.mutation.OgType(); ok {
		_spec.SetField(pageinfo.FieldOgType, field.TypeString, value)
		_node.OgType = value
	}
	if value, ok := pic.mutation.OgURL(); ok {
		_spec.SetField(pageinfo.FieldOgURL, field.TypeString, value)
		_node.OgURL = value
	}
	if value, ok := pic.mutation.OgImage(); ok {
		_spec.SetField(pageinfo.FieldOgImage, field.TypeString, value)
		_node.OgImage = value
	}
	if value, ok := pic.mutation.OgImageType(); ok {
		_spec.SetField(pageinfo.FieldOgImageType, field.TypeString, value)
		_node.OgImageType = value
	}
	if value, ok := pic.mutation.OgImageURL(); ok {
		_spec.SetField(pageinfo.FieldOgImageURL, field.TypeString, value)
		_node.OgImageURL = value
	}
	if value, ok := pic.mutation.OgImageSecureURL(); ok {
		_spec.SetField(pageinfo.FieldOgImageSecureURL, field.TypeString, value)
		_node.OgImageSecureURL = value
	}
	if value, ok := pic.mutation.OgImageWidth(); ok {
		_spec.SetField(pageinfo.FieldOgImageWidth, field.TypeString, value)
		_node.OgImageWidth = value
	}
	if value, ok := pic.mutation.OgImageHeight(); ok {
		_spec.SetField(pageinfo.FieldOgImageHeight, field.TypeString, value)
		_node.OgImageHeight = value
	}
	if value, ok := pic.mutation.OgVideo(); ok {
		_spec.SetField(pageinfo.FieldOgVideo, field.TypeString, value)
		_node.OgVideo = value
	}
	if value, ok := pic.mutation.OgVideoType(); ok {
		_spec.SetField(pageinfo.FieldOgVideoType, field.TypeString, value)
		_node.OgVideoType = value
	}
	if value, ok := pic.mutation.OgVideoURL(); ok {
		_spec.SetField(pageinfo.FieldOgVideoURL, field.TypeString, value)
		_node.OgVideoURL = value
	}
	if value, ok := pic.mutation.OgVideoSecureURL(); ok {
		_spec.SetField(pageinfo.FieldOgVideoSecureURL, field.TypeString, value)
		_node.OgVideoSecureURL = value
	}
	if value, ok := pic.mutation.OgVideoWidth(); ok {
		_spec.SetField(pageinfo.FieldOgVideoWidth, field.TypeString, value)
		_node.OgVideoWidth = value
	}
	if value, ok := pic.mutation.OgVideoHeight(); ok {
		_spec.SetField(pageinfo.FieldOgVideoHeight, field.TypeString, value)
		_node.OgVideoHeight = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.PageInfo.Create().
//		SetDomain(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.PageInfoUpsert) {
//			SetDomain(v+v).
//		}).
//		Exec(ctx)
func (pic *PageInfoCreate) OnConflict(opts ...sql.ConflictOption) *PageInfoUpsertOne {
	pic.conflict = opts
	return &PageInfoUpsertOne{
		create: pic,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.PageInfo.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (pic *PageInfoCreate) OnConflictColumns(columns ...string) *PageInfoUpsertOne {
	pic.conflict = append(pic.conflict, sql.ConflictColumns(columns...))
	return &PageInfoUpsertOne{
		create: pic,
	}
}

type (
	// PageInfoUpsertOne is the builder for "upsert"-ing
	//  one PageInfo node.
	PageInfoUpsertOne struct {
		create *PageInfoCreate
	}

	// PageInfoUpsert is the "OnConflict" setter.
	PageInfoUpsert struct {
		*sql.UpdateSet
	}
)

// SetDomain sets the "domain" field.
func (u *PageInfoUpsert) SetDomain(v string) *PageInfoUpsert {
	u.Set(pageinfo.FieldDomain, v)
	return u
}

// UpdateDomain sets the "domain" field to the value that was provided on create.
func (u *PageInfoUpsert) UpdateDomain() *PageInfoUpsert {
	u.SetExcluded(pageinfo.FieldDomain)
	return u
}

// SetPort sets the "port" field.
func (u *PageInfoUpsert) SetPort(v string) *PageInfoUpsert {
	u.Set(pageinfo.FieldPort, v)
	return u
}

// UpdatePort sets the "port" field to the value that was provided on create.
func (u *PageInfoUpsert) UpdatePort() *PageInfoUpsert {
	u.SetExcluded(pageinfo.FieldPort)
	return u
}

// SetIsHTTPS sets the "is_https" field.
func (u *PageInfoUpsert) SetIsHTTPS(v bool) *PageInfoUpsert {
	u.Set(pageinfo.FieldIsHTTPS, v)
	return u
}

// UpdateIsHTTPS sets the "is_https" field to the value that was provided on create.
func (u *PageInfoUpsert) UpdateIsHTTPS() *PageInfoUpsert {
	u.SetExcluded(pageinfo.FieldIsHTTPS)
	return u
}

// SetIndexedURL sets the "indexed_url" field.
func (u *PageInfoUpsert) SetIndexedURL(v string) *PageInfoUpsert {
	u.Set(pageinfo.FieldIndexedURL, v)
	return u
}

// UpdateIndexedURL sets the "indexed_url" field to the value that was provided on create.
func (u *PageInfoUpsert) UpdateIndexedURL() *PageInfoUpsert {
	u.SetExcluded(pageinfo.FieldIndexedURL)
	return u
}

// SetPath sets the "path" field.
func (u *PageInfoUpsert) SetPath(v string) *PageInfoUpsert {
	u.Set(pageinfo.FieldPath, v)
	return u
}

// UpdatePath sets the "path" field to the value that was provided on create.
func (u *PageInfoUpsert) UpdatePath() *PageInfoUpsert {
	u.SetExcluded(pageinfo.FieldPath)
	return u
}

// SetQuerystring sets the "querystring" field.
func (u *PageInfoUpsert) SetQuerystring(v string) *PageInfoUpsert {
	u.Set(pageinfo.FieldQuerystring, v)
	return u
}

// UpdateQuerystring sets the "querystring" field to the value that was provided on create.
func (u *PageInfoUpsert) UpdateQuerystring() *PageInfoUpsert {
	u.SetExcluded(pageinfo.FieldQuerystring)
	return u
}

// SetURL sets the "url" field.
func (u *PageInfoUpsert) SetURL(v string) *PageInfoUpsert {
	u.Set(pageinfo.FieldURL, v)
	return u
}

// UpdateURL sets the "url" field to the value that was provided on create.
func (u *PageInfoUpsert) UpdateURL() *PageInfoUpsert {
	u.SetExcluded(pageinfo.FieldURL)
	return u
}

// SetCountReferred sets the "count_referred" field.
func (u *PageInfoUpsert) SetCountReferred(v int64) *PageInfoUpsert {
	u.Set(pageinfo.FieldCountReferred, v)
	return u
}

// UpdateCountReferred sets the "count_referred" field to the value that was provided on create.
func (u *PageInfoUpsert) UpdateCountReferred() *PageInfoUpsert {
	u.SetExcluded(pageinfo.FieldCountReferred)
	return u
}

// AddCountReferred adds v to the "count_referred" field.
func (u *PageInfoUpsert) AddCountReferred(v int64) *PageInfoUpsert {
	u.Add(pageinfo.FieldCountReferred, v)
	return u
}

// SetStatus sets the "status" field.
func (u *PageInfoUpsert) SetStatus(v pageinfo.Status) *PageInfoUpsert {
	u.Set(pageinfo.FieldStatus, v)
	return u
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *PageInfoUpsert) UpdateStatus() *PageInfoUpsert {
	u.SetExcluded(pageinfo.FieldStatus)
	return u
}

// SetCreatedBy sets the "created_by" field.
func (u *PageInfoUpsert) SetCreatedBy(v string) *PageInfoUpsert {
	u.Set(pageinfo.FieldCreatedBy, v)
	return u
}

// UpdateCreatedBy sets the "created_by" field to the value that was provided on create.
func (u *PageInfoUpsert) UpdateCreatedBy() *PageInfoUpsert {
	u.SetExcluded(pageinfo.FieldCreatedBy)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *PageInfoUpsert) SetUpdatedAt(v time.Time) *PageInfoUpsert {
	u.Set(pageinfo.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *PageInfoUpsert) UpdateUpdatedAt() *PageInfoUpsert {
	u.SetExcluded(pageinfo.FieldUpdatedAt)
	return u
}

// SetUpdatedBy sets the "updated_by" field.
func (u *PageInfoUpsert) SetUpdatedBy(v string) *PageInfoUpsert {
	u.Set(pageinfo.FieldUpdatedBy, v)
	return u
}

// UpdateUpdatedBy sets the "updated_by" field to the value that was provided on create.
func (u *PageInfoUpsert) UpdateUpdatedBy() *PageInfoUpsert {
	u.SetExcluded(pageinfo.FieldUpdatedBy)
	return u
}

// SetTitle sets the "title" field.
func (u *PageInfoUpsert) SetTitle(v string) *PageInfoUpsert {
	u.Set(pageinfo.FieldTitle, v)
	return u
}

// UpdateTitle sets the "title" field to the value that was provided on create.
func (u *PageInfoUpsert) UpdateTitle() *PageInfoUpsert {
	u.SetExcluded(pageinfo.FieldTitle)
	return u
}

// SetDescription sets the "description" field.
func (u *PageInfoUpsert) SetDescription(v string) *PageInfoUpsert {
	u.Set(pageinfo.FieldDescription, v)
	return u
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *PageInfoUpsert) UpdateDescription() *PageInfoUpsert {
	u.SetExcluded(pageinfo.FieldDescription)
	return u
}

// SetKeywords sets the "keywords" field.
func (u *PageInfoUpsert) SetKeywords(v string) *PageInfoUpsert {
	u.Set(pageinfo.FieldKeywords, v)
	return u
}

// UpdateKeywords sets the "keywords" field to the value that was provided on create.
func (u *PageInfoUpsert) UpdateKeywords() *PageInfoUpsert {
	u.SetExcluded(pageinfo.FieldKeywords)
	return u
}

// SetContentLanguage sets the "content_language" field.
func (u *PageInfoUpsert) SetContentLanguage(v string) *PageInfoUpsert {
	u.Set(pageinfo.FieldContentLanguage, v)
	return u
}

// UpdateContentLanguage sets the "content_language" field to the value that was provided on create.
func (u *PageInfoUpsert) UpdateContentLanguage() *PageInfoUpsert {
	u.SetExcluded(pageinfo.FieldContentLanguage)
	return u
}

// SetTwitterCard sets the "twitter_card" field.
func (u *PageInfoUpsert) SetTwitterCard(v string) *PageInfoUpsert {
	u.Set(pageinfo.FieldTwitterCard, v)
	return u
}

// UpdateTwitterCard sets the "twitter_card" field to the value that was provided on create.
func (u *PageInfoUpsert) UpdateTwitterCard() *PageInfoUpsert {
	u.SetExcluded(pageinfo.FieldTwitterCard)
	return u
}

// SetTwitterURL sets the "twitter_url" field.
func (u *PageInfoUpsert) SetTwitterURL(v string) *PageInfoUpsert {
	u.Set(pageinfo.FieldTwitterURL, v)
	return u
}

// UpdateTwitterURL sets the "twitter_url" field to the value that was provided on create.
func (u *PageInfoUpsert) UpdateTwitterURL() *PageInfoUpsert {
	u.SetExcluded(pageinfo.FieldTwitterURL)
	return u
}

// SetTwitterTitle sets the "twitter_title" field.
func (u *PageInfoUpsert) SetTwitterTitle(v string) *PageInfoUpsert {
	u.Set(pageinfo.FieldTwitterTitle, v)
	return u
}

// UpdateTwitterTitle sets the "twitter_title" field to the value that was provided on create.
func (u *PageInfoUpsert) UpdateTwitterTitle() *PageInfoUpsert {
	u.SetExcluded(pageinfo.FieldTwitterTitle)
	return u
}

// SetTwitterDescription sets the "twitter_description" field.
func (u *PageInfoUpsert) SetTwitterDescription(v string) *PageInfoUpsert {
	u.Set(pageinfo.FieldTwitterDescription, v)
	return u
}

// UpdateTwitterDescription sets the "twitter_description" field to the value that was provided on create.
func (u *PageInfoUpsert) UpdateTwitterDescription() *PageInfoUpsert {
	u.SetExcluded(pageinfo.FieldTwitterDescription)
	return u
}

// SetTwitterImage sets the "twitter_image" field.
func (u *PageInfoUpsert) SetTwitterImage(v string) *PageInfoUpsert {
	u.Set(pageinfo.FieldTwitterImage, v)
	return u
}

// UpdateTwitterImage sets the "twitter_image" field to the value that was provided on create.
func (u *PageInfoUpsert) UpdateTwitterImage() *PageInfoUpsert {
	u.SetExcluded(pageinfo.FieldTwitterImage)
	return u
}

// SetOgSiteName sets the "og_site_name" field.
func (u *PageInfoUpsert) SetOgSiteName(v string) *PageInfoUpsert {
	u.Set(pageinfo.FieldOgSiteName, v)
	return u
}

// UpdateOgSiteName sets the "og_site_name" field to the value that was provided on create.
func (u *PageInfoUpsert) UpdateOgSiteName() *PageInfoUpsert {
	u.SetExcluded(pageinfo.FieldOgSiteName)
	return u
}

// SetOgLocale sets the "og_locale" field.
func (u *PageInfoUpsert) SetOgLocale(v string) *PageInfoUpsert {
	u.Set(pageinfo.FieldOgLocale, v)
	return u
}

// UpdateOgLocale sets the "og_locale" field to the value that was provided on create.
func (u *PageInfoUpsert) UpdateOgLocale() *PageInfoUpsert {
	u.SetExcluded(pageinfo.FieldOgLocale)
	return u
}

// SetOgTitle sets the "og_title" field.
func (u *PageInfoUpsert) SetOgTitle(v string) *PageInfoUpsert {
	u.Set(pageinfo.FieldOgTitle, v)
	return u
}

// UpdateOgTitle sets the "og_title" field to the value that was provided on create.
func (u *PageInfoUpsert) UpdateOgTitle() *PageInfoUpsert {
	u.SetExcluded(pageinfo.FieldOgTitle)
	return u
}

// SetOgDescription sets the "og_description" field.
func (u *PageInfoUpsert) SetOgDescription(v string) *PageInfoUpsert {
	u.Set(pageinfo.FieldOgDescription, v)
	return u
}

// UpdateOgDescription sets the "og_description" field to the value that was provided on create.
func (u *PageInfoUpsert) UpdateOgDescription() *PageInfoUpsert {
	u.SetExcluded(pageinfo.FieldOgDescription)
	return u
}

// SetOgType sets the "og_type" field.
func (u *PageInfoUpsert) SetOgType(v string) *PageInfoUpsert {
	u.Set(pageinfo.FieldOgType, v)
	return u
}

// UpdateOgType sets the "og_type" field to the value that was provided on create.
func (u *PageInfoUpsert) UpdateOgType() *PageInfoUpsert {
	u.SetExcluded(pageinfo.FieldOgType)
	return u
}

// SetOgURL sets the "og_url" field.
func (u *PageInfoUpsert) SetOgURL(v string) *PageInfoUpsert {
	u.Set(pageinfo.FieldOgURL, v)
	return u
}

// UpdateOgURL sets the "og_url" field to the value that was provided on create.
func (u *PageInfoUpsert) UpdateOgURL() *PageInfoUpsert {
	u.SetExcluded(pageinfo.FieldOgURL)
	return u
}

// SetOgImage sets the "og_image" field.
func (u *PageInfoUpsert) SetOgImage(v string) *PageInfoUpsert {
	u.Set(pageinfo.FieldOgImage, v)
	return u
}

// UpdateOgImage sets the "og_image" field to the value that was provided on create.
func (u *PageInfoUpsert) UpdateOgImage() *PageInfoUpsert {
	u.SetExcluded(pageinfo.FieldOgImage)
	return u
}

// SetOgImageType sets the "og_image_type" field.
func (u *PageInfoUpsert) SetOgImageType(v string) *PageInfoUpsert {
	u.Set(pageinfo.FieldOgImageType, v)
	return u
}

// UpdateOgImageType sets the "og_image_type" field to the value that was provided on create.
func (u *PageInfoUpsert) UpdateOgImageType() *PageInfoUpsert {
	u.SetExcluded(pageinfo.FieldOgImageType)
	return u
}

// SetOgImageURL sets the "og_image_url" field.
func (u *PageInfoUpsert) SetOgImageURL(v string) *PageInfoUpsert {
	u.Set(pageinfo.FieldOgImageURL, v)
	return u
}

// UpdateOgImageURL sets the "og_image_url" field to the value that was provided on create.
func (u *PageInfoUpsert) UpdateOgImageURL() *PageInfoUpsert {
	u.SetExcluded(pageinfo.FieldOgImageURL)
	return u
}

// SetOgImageSecureURL sets the "og_image_secure_url" field.
func (u *PageInfoUpsert) SetOgImageSecureURL(v string) *PageInfoUpsert {
	u.Set(pageinfo.FieldOgImageSecureURL, v)
	return u
}

// UpdateOgImageSecureURL sets the "og_image_secure_url" field to the value that was provided on create.
func (u *PageInfoUpsert) UpdateOgImageSecureURL() *PageInfoUpsert {
	u.SetExcluded(pageinfo.FieldOgImageSecureURL)
	return u
}

// SetOgImageWidth sets the "og_image_width" field.
func (u *PageInfoUpsert) SetOgImageWidth(v string) *PageInfoUpsert {
	u.Set(pageinfo.FieldOgImageWidth, v)
	return u
}

// UpdateOgImageWidth sets the "og_image_width" field to the value that was provided on create.
func (u *PageInfoUpsert) UpdateOgImageWidth() *PageInfoUpsert {
	u.SetExcluded(pageinfo.FieldOgImageWidth)
	return u
}

// SetOgImageHeight sets the "og_image_height" field.
func (u *PageInfoUpsert) SetOgImageHeight(v string) *PageInfoUpsert {
	u.Set(pageinfo.FieldOgImageHeight, v)
	return u
}

// UpdateOgImageHeight sets the "og_image_height" field to the value that was provided on create.
func (u *PageInfoUpsert) UpdateOgImageHeight() *PageInfoUpsert {
	u.SetExcluded(pageinfo.FieldOgImageHeight)
	return u
}

// SetOgVideo sets the "og_video" field.
func (u *PageInfoUpsert) SetOgVideo(v string) *PageInfoUpsert {
	u.Set(pageinfo.FieldOgVideo, v)
	return u
}

// UpdateOgVideo sets the "og_video" field to the value that was provided on create.
func (u *PageInfoUpsert) UpdateOgVideo() *PageInfoUpsert {
	u.SetExcluded(pageinfo.FieldOgVideo)
	return u
}

// SetOgVideoType sets the "og_video_type" field.
func (u *PageInfoUpsert) SetOgVideoType(v string) *PageInfoUpsert {
	u.Set(pageinfo.FieldOgVideoType, v)
	return u
}

// UpdateOgVideoType sets the "og_video_type" field to the value that was provided on create.
func (u *PageInfoUpsert) UpdateOgVideoType() *PageInfoUpsert {
	u.SetExcluded(pageinfo.FieldOgVideoType)
	return u
}

// SetOgVideoURL sets the "og_video_url" field.
func (u *PageInfoUpsert) SetOgVideoURL(v string) *PageInfoUpsert {
	u.Set(pageinfo.FieldOgVideoURL, v)
	return u
}

// UpdateOgVideoURL sets the "og_video_url" field to the value that was provided on create.
func (u *PageInfoUpsert) UpdateOgVideoURL() *PageInfoUpsert {
	u.SetExcluded(pageinfo.FieldOgVideoURL)
	return u
}

// SetOgVideoSecureURL sets the "og_video_secure_url" field.
func (u *PageInfoUpsert) SetOgVideoSecureURL(v string) *PageInfoUpsert {
	u.Set(pageinfo.FieldOgVideoSecureURL, v)
	return u
}

// UpdateOgVideoSecureURL sets the "og_video_secure_url" field to the value that was provided on create.
func (u *PageInfoUpsert) UpdateOgVideoSecureURL() *PageInfoUpsert {
	u.SetExcluded(pageinfo.FieldOgVideoSecureURL)
	return u
}

// SetOgVideoWidth sets the "og_video_width" field.
func (u *PageInfoUpsert) SetOgVideoWidth(v string) *PageInfoUpsert {
	u.Set(pageinfo.FieldOgVideoWidth, v)
	return u
}

// UpdateOgVideoWidth sets the "og_video_width" field to the value that was provided on create.
func (u *PageInfoUpsert) UpdateOgVideoWidth() *PageInfoUpsert {
	u.SetExcluded(pageinfo.FieldOgVideoWidth)
	return u
}

// SetOgVideoHeight sets the "og_video_height" field.
func (u *PageInfoUpsert) SetOgVideoHeight(v string) *PageInfoUpsert {
	u.Set(pageinfo.FieldOgVideoHeight, v)
	return u
}

// UpdateOgVideoHeight sets the "og_video_height" field to the value that was provided on create.
func (u *PageInfoUpsert) UpdateOgVideoHeight() *PageInfoUpsert {
	u.SetExcluded(pageinfo.FieldOgVideoHeight)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.PageInfo.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(pageinfo.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *PageInfoUpsertOne) UpdateNewValues() *PageInfoUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(pageinfo.FieldID)
		}
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(pageinfo.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.PageInfo.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *PageInfoUpsertOne) Ignore() *PageInfoUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *PageInfoUpsertOne) DoNothing() *PageInfoUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the PageInfoCreate.OnConflict
// documentation for more info.
func (u *PageInfoUpsertOne) Update(set func(*PageInfoUpsert)) *PageInfoUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&PageInfoUpsert{UpdateSet: update})
	}))
	return u
}

// SetDomain sets the "domain" field.
func (u *PageInfoUpsertOne) SetDomain(v string) *PageInfoUpsertOne {
	return u.Update(func(s *PageInfoUpsert) {
		s.SetDomain(v)
	})
}

// UpdateDomain sets the "domain" field to the value that was provided on create.
func (u *PageInfoUpsertOne) UpdateDomain() *PageInfoUpsertOne {
	return u.Update(func(s *PageInfoUpsert) {
		s.UpdateDomain()
	})
}

// SetPort sets the "port" field.
func (u *PageInfoUpsertOne) SetPort(v string) *PageInfoUpsertOne {
	return u.Update(func(s *PageInfoUpsert) {
		s.SetPort(v)
	})
}

// UpdatePort sets the "port" field to the value that was provided on create.
func (u *PageInfoUpsertOne) UpdatePort() *PageInfoUpsertOne {
	return u.Update(func(s *PageInfoUpsert) {
		s.UpdatePort()
	})
}

// SetIsHTTPS sets the "is_https" field.
func (u *PageInfoUpsertOne) SetIsHTTPS(v bool) *PageInfoUpsertOne {
	return u.Update(func(s *PageInfoUpsert) {
		s.SetIsHTTPS(v)
	})
}

// UpdateIsHTTPS sets the "is_https" field to the value that was provided on create.
func (u *PageInfoUpsertOne) UpdateIsHTTPS() *PageInfoUpsertOne {
	return u.Update(func(s *PageInfoUpsert) {
		s.UpdateIsHTTPS()
	})
}

// SetIndexedURL sets the "indexed_url" field.
func (u *PageInfoUpsertOne) SetIndexedURL(v string) *PageInfoUpsertOne {
	return u.Update(func(s *PageInfoUpsert) {
		s.SetIndexedURL(v)
	})
}

// UpdateIndexedURL sets the "indexed_url" field to the value that was provided on create.
func (u *PageInfoUpsertOne) UpdateIndexedURL() *PageInfoUpsertOne {
	return u.Update(func(s *PageInfoUpsert) {
		s.UpdateIndexedURL()
	})
}

// SetPath sets the "path" field.
func (u *PageInfoUpsertOne) SetPath(v string) *PageInfoUpsertOne {
	return u.Update(func(s *PageInfoUpsert) {
		s.SetPath(v)
	})
}

// UpdatePath sets the "path" field to the value that was provided on create.
func (u *PageInfoUpsertOne) UpdatePath() *PageInfoUpsertOne {
	return u.Update(func(s *PageInfoUpsert) {
		s.UpdatePath()
	})
}

// SetQuerystring sets the "querystring" field.
func (u *PageInfoUpsertOne) SetQuerystring(v string) *PageInfoUpsertOne {
	return u.Update(func(s *PageInfoUpsert) {
		s.SetQuerystring(v)
	})
}

// UpdateQuerystring sets the "querystring" field to the value that was provided on create.
func (u *PageInfoUpsertOne) UpdateQuerystring() *PageInfoUpsertOne {
	return u.Update(func(s *PageInfoUpsert) {
		s.UpdateQuerystring()
	})
}

// SetURL sets the "url" field.
func (u *PageInfoUpsertOne) SetURL(v string) *PageInfoUpsertOne {
	return u.Update(func(s *PageInfoUpsert) {
		s.SetURL(v)
	})
}

// UpdateURL sets the "url" field to the value that was provided on create.
func (u *PageInfoUpsertOne) UpdateURL() *PageInfoUpsertOne {
	return u.Update(func(s *PageInfoUpsert) {
		s.UpdateURL()
	})
}

// SetCountReferred sets the "count_referred" field.
func (u *PageInfoUpsertOne) SetCountReferred(v int64) *PageInfoUpsertOne {
	return u.Update(func(s *PageInfoUpsert) {
		s.SetCountReferred(v)
	})
}

// AddCountReferred adds v to the "count_referred" field.
func (u *PageInfoUpsertOne) AddCountReferred(v int64) *PageInfoUpsertOne {
	return u.Update(func(s *PageInfoUpsert) {
		s.AddCountReferred(v)
	})
}

// UpdateCountReferred sets the "count_referred" field to the value that was provided on create.
func (u *PageInfoUpsertOne) UpdateCountReferred() *PageInfoUpsertOne {
	return u.Update(func(s *PageInfoUpsert) {
		s.UpdateCountReferred()
	})
}

// SetStatus sets the "status" field.
func (u *PageInfoUpsertOne) SetStatus(v pageinfo.Status) *PageInfoUpsertOne {
	return u.Update(func(s *PageInfoUpsert) {
		s.SetStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *PageInfoUpsertOne) UpdateStatus() *PageInfoUpsertOne {
	return u.Update(func(s *PageInfoUpsert) {
		s.UpdateStatus()
	})
}

// SetCreatedBy sets the "created_by" field.
func (u *PageInfoUpsertOne) SetCreatedBy(v string) *PageInfoUpsertOne {
	return u.Update(func(s *PageInfoUpsert) {
		s.SetCreatedBy(v)
	})
}

// UpdateCreatedBy sets the "created_by" field to the value that was provided on create.
func (u *PageInfoUpsertOne) UpdateCreatedBy() *PageInfoUpsertOne {
	return u.Update(func(s *PageInfoUpsert) {
		s.UpdateCreatedBy()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *PageInfoUpsertOne) SetUpdatedAt(v time.Time) *PageInfoUpsertOne {
	return u.Update(func(s *PageInfoUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *PageInfoUpsertOne) UpdateUpdatedAt() *PageInfoUpsertOne {
	return u.Update(func(s *PageInfoUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetUpdatedBy sets the "updated_by" field.
func (u *PageInfoUpsertOne) SetUpdatedBy(v string) *PageInfoUpsertOne {
	return u.Update(func(s *PageInfoUpsert) {
		s.SetUpdatedBy(v)
	})
}

// UpdateUpdatedBy sets the "updated_by" field to the value that was provided on create.
func (u *PageInfoUpsertOne) UpdateUpdatedBy() *PageInfoUpsertOne {
	return u.Update(func(s *PageInfoUpsert) {
		s.UpdateUpdatedBy()
	})
}

// SetTitle sets the "title" field.
func (u *PageInfoUpsertOne) SetTitle(v string) *PageInfoUpsertOne {
	return u.Update(func(s *PageInfoUpsert) {
		s.SetTitle(v)
	})
}

// UpdateTitle sets the "title" field to the value that was provided on create.
func (u *PageInfoUpsertOne) UpdateTitle() *PageInfoUpsertOne {
	return u.Update(func(s *PageInfoUpsert) {
		s.UpdateTitle()
	})
}

// SetDescription sets the "description" field.
func (u *PageInfoUpsertOne) SetDescription(v string) *PageInfoUpsertOne {
	return u.Update(func(s *PageInfoUpsert) {
		s.SetDescription(v)
	})
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *PageInfoUpsertOne) UpdateDescription() *PageInfoUpsertOne {
	return u.Update(func(s *PageInfoUpsert) {
		s.UpdateDescription()
	})
}

// SetKeywords sets the "keywords" field.
func (u *PageInfoUpsertOne) SetKeywords(v string) *PageInfoUpsertOne {
	return u.Update(func(s *PageInfoUpsert) {
		s.SetKeywords(v)
	})
}

// UpdateKeywords sets the "keywords" field to the value that was provided on create.
func (u *PageInfoUpsertOne) UpdateKeywords() *PageInfoUpsertOne {
	return u.Update(func(s *PageInfoUpsert) {
		s.UpdateKeywords()
	})
}

// SetContentLanguage sets the "content_language" field.
func (u *PageInfoUpsertOne) SetContentLanguage(v string) *PageInfoUpsertOne {
	return u.Update(func(s *PageInfoUpsert) {
		s.SetContentLanguage(v)
	})
}

// UpdateContentLanguage sets the "content_language" field to the value that was provided on create.
func (u *PageInfoUpsertOne) UpdateContentLanguage() *PageInfoUpsertOne {
	return u.Update(func(s *PageInfoUpsert) {
		s.UpdateContentLanguage()
	})
}

// SetTwitterCard sets the "twitter_card" field.
func (u *PageInfoUpsertOne) SetTwitterCard(v string) *PageInfoUpsertOne {
	return u.Update(func(s *PageInfoUpsert) {
		s.SetTwitterCard(v)
	})
}

// UpdateTwitterCard sets the "twitter_card" field to the value that was provided on create.
func (u *PageInfoUpsertOne) UpdateTwitterCard() *PageInfoUpsertOne {
	return u.Update(func(s *PageInfoUpsert) {
		s.UpdateTwitterCard()
	})
}

// SetTwitterURL sets the "twitter_url" field.
func (u *PageInfoUpsertOne) SetTwitterURL(v string) *PageInfoUpsertOne {
	return u.Update(func(s *PageInfoUpsert) {
		s.SetTwitterURL(v)
	})
}

// UpdateTwitterURL sets the "twitter_url" field to the value that was provided on create.
func (u *PageInfoUpsertOne) UpdateTwitterURL() *PageInfoUpsertOne {
	return u.Update(func(s *PageInfoUpsert) {
		s.UpdateTwitterURL()
	})
}

// SetTwitterTitle sets the "twitter_title" field.
func (u *PageInfoUpsertOne) SetTwitterTitle(v string) *PageInfoUpsertOne {
	return u.Update(func(s *PageInfoUpsert) {
		s.SetTwitterTitle(v)
	})
}

// UpdateTwitterTitle sets the "twitter_title" field to the value that was provided on create.
func (u *PageInfoUpsertOne) UpdateTwitterTitle() *PageInfoUpsertOne {
	return u.Update(func(s *PageInfoUpsert) {
		s.UpdateTwitterTitle()
	})
}

// SetTwitterDescription sets the "twitter_description" field.
func (u *PageInfoUpsertOne) SetTwitterDescription(v string) *PageInfoUpsertOne {
	return u.Update(func(s *PageInfoUpsert) {
		s.SetTwitterDescription(v)
	})
}

// UpdateTwitterDescription sets the "twitter_description" field to the value that was provided on create.
func (u *PageInfoUpsertOne) UpdateTwitterDescription() *PageInfoUpsertOne {
	return u.Update(func(s *PageInfoUpsert) {
		s.UpdateTwitterDescription()
	})
}

// SetTwitterImage sets the "twitter_image" field.
func (u *PageInfoUpsertOne) SetTwitterImage(v string) *PageInfoUpsertOne {
	return u.Update(func(s *PageInfoUpsert) {
		s.SetTwitterImage(v)
	})
}

// UpdateTwitterImage sets the "twitter_image" field to the value that was provided on create.
func (u *PageInfoUpsertOne) UpdateTwitterImage() *PageInfoUpsertOne {
	return u.Update(func(s *PageInfoUpsert) {
		s.UpdateTwitterImage()
	})
}

// SetOgSiteName sets the "og_site_name" field.
func (u *PageInfoUpsertOne) SetOgSiteName(v string) *PageInfoUpsertOne {
	return u.Update(func(s *PageInfoUpsert) {
		s.SetOgSiteName(v)
	})
}

// UpdateOgSiteName sets the "og_site_name" field to the value that was provided on create.
func (u *PageInfoUpsertOne) UpdateOgSiteName() *PageInfoUpsertOne {
	return u.Update(func(s *PageInfoUpsert) {
		s.UpdateOgSiteName()
	})
}

// SetOgLocale sets the "og_locale" field.
func (u *PageInfoUpsertOne) SetOgLocale(v string) *PageInfoUpsertOne {
	return u.Update(func(s *PageInfoUpsert) {
		s.SetOgLocale(v)
	})
}

// UpdateOgLocale sets the "og_locale" field to the value that was provided on create.
func (u *PageInfoUpsertOne) UpdateOgLocale() *PageInfoUpsertOne {
	return u.Update(func(s *PageInfoUpsert) {
		s.UpdateOgLocale()
	})
}

// SetOgTitle sets the "og_title" field.
func (u *PageInfoUpsertOne) SetOgTitle(v string) *PageInfoUpsertOne {
	return u.Update(func(s *PageInfoUpsert) {
		s.SetOgTitle(v)
	})
}

// UpdateOgTitle sets the "og_title" field to the value that was provided on create.
func (u *PageInfoUpsertOne) UpdateOgTitle() *PageInfoUpsertOne {
	return u.Update(func(s *PageInfoUpsert) {
		s.UpdateOgTitle()
	})
}

// SetOgDescription sets the "og_description" field.
func (u *PageInfoUpsertOne) SetOgDescription(v string) *PageInfoUpsertOne {
	return u.Update(func(s *PageInfoUpsert) {
		s.SetOgDescription(v)
	})
}

// UpdateOgDescription sets the "og_description" field to the value that was provided on create.
func (u *PageInfoUpsertOne) UpdateOgDescription() *PageInfoUpsertOne {
	return u.Update(func(s *PageInfoUpsert) {
		s.UpdateOgDescription()
	})
}

// SetOgType sets the "og_type" field.
func (u *PageInfoUpsertOne) SetOgType(v string) *PageInfoUpsertOne {
	return u.Update(func(s *PageInfoUpsert) {
		s.SetOgType(v)
	})
}

// UpdateOgType sets the "og_type" field to the value that was provided on create.
func (u *PageInfoUpsertOne) UpdateOgType() *PageInfoUpsertOne {
	return u.Update(func(s *PageInfoUpsert) {
		s.UpdateOgType()
	})
}

// SetOgURL sets the "og_url" field.
func (u *PageInfoUpsertOne) SetOgURL(v string) *PageInfoUpsertOne {
	return u.Update(func(s *PageInfoUpsert) {
		s.SetOgURL(v)
	})
}

// UpdateOgURL sets the "og_url" field to the value that was provided on create.
func (u *PageInfoUpsertOne) UpdateOgURL() *PageInfoUpsertOne {
	return u.Update(func(s *PageInfoUpsert) {
		s.UpdateOgURL()
	})
}

// SetOgImage sets the "og_image" field.
func (u *PageInfoUpsertOne) SetOgImage(v string) *PageInfoUpsertOne {
	return u.Update(func(s *PageInfoUpsert) {
		s.SetOgImage(v)
	})
}

// UpdateOgImage sets the "og_image" field to the value that was provided on create.
func (u *PageInfoUpsertOne) UpdateOgImage() *PageInfoUpsertOne {
	return u.Update(func(s *PageInfoUpsert) {
		s.UpdateOgImage()
	})
}

// SetOgImageType sets the "og_image_type" field.
func (u *PageInfoUpsertOne) SetOgImageType(v string) *PageInfoUpsertOne {
	return u.Update(func(s *PageInfoUpsert) {
		s.SetOgImageType(v)
	})
}

// UpdateOgImageType sets the "og_image_type" field to the value that was provided on create.
func (u *PageInfoUpsertOne) UpdateOgImageType() *PageInfoUpsertOne {
	return u.Update(func(s *PageInfoUpsert) {
		s.UpdateOgImageType()
	})
}

// SetOgImageURL sets the "og_image_url" field.
func (u *PageInfoUpsertOne) SetOgImageURL(v string) *PageInfoUpsertOne {
	return u.Update(func(s *PageInfoUpsert) {
		s.SetOgImageURL(v)
	})
}

// UpdateOgImageURL sets the "og_image_url" field to the value that was provided on create.
func (u *PageInfoUpsertOne) UpdateOgImageURL() *PageInfoUpsertOne {
	return u.Update(func(s *PageInfoUpsert) {
		s.UpdateOgImageURL()
	})
}

// SetOgImageSecureURL sets the "og_image_secure_url" field.
func (u *PageInfoUpsertOne) SetOgImageSecureURL(v string) *PageInfoUpsertOne {
	return u.Update(func(s *PageInfoUpsert) {
		s.SetOgImageSecureURL(v)
	})
}

// UpdateOgImageSecureURL sets the "og_image_secure_url" field to the value that was provided on create.
func (u *PageInfoUpsertOne) UpdateOgImageSecureURL() *PageInfoUpsertOne {
	return u.Update(func(s *PageInfoUpsert) {
		s.UpdateOgImageSecureURL()
	})
}

// SetOgImageWidth sets the "og_image_width" field.
func (u *PageInfoUpsertOne) SetOgImageWidth(v string) *PageInfoUpsertOne {
	return u.Update(func(s *PageInfoUpsert) {
		s.SetOgImageWidth(v)
	})
}

// UpdateOgImageWidth sets the "og_image_width" field to the value that was provided on create.
func (u *PageInfoUpsertOne) UpdateOgImageWidth() *PageInfoUpsertOne {
	return u.Update(func(s *PageInfoUpsert) {
		s.UpdateOgImageWidth()
	})
}

// SetOgImageHeight sets the "og_image_height" field.
func (u *PageInfoUpsertOne) SetOgImageHeight(v string) *PageInfoUpsertOne {
	return u.Update(func(s *PageInfoUpsert) {
		s.SetOgImageHeight(v)
	})
}

// UpdateOgImageHeight sets the "og_image_height" field to the value that was provided on create.
func (u *PageInfoUpsertOne) UpdateOgImageHeight() *PageInfoUpsertOne {
	return u.Update(func(s *PageInfoUpsert) {
		s.UpdateOgImageHeight()
	})
}

// SetOgVideo sets the "og_video" field.
func (u *PageInfoUpsertOne) SetOgVideo(v string) *PageInfoUpsertOne {
	return u.Update(func(s *PageInfoUpsert) {
		s.SetOgVideo(v)
	})
}

// UpdateOgVideo sets the "og_video" field to the value that was provided on create.
func (u *PageInfoUpsertOne) UpdateOgVideo() *PageInfoUpsertOne {
	return u.Update(func(s *PageInfoUpsert) {
		s.UpdateOgVideo()
	})
}

// SetOgVideoType sets the "og_video_type" field.
func (u *PageInfoUpsertOne) SetOgVideoType(v string) *PageInfoUpsertOne {
	return u.Update(func(s *PageInfoUpsert) {
		s.SetOgVideoType(v)
	})
}

// UpdateOgVideoType sets the "og_video_type" field to the value that was provided on create.
func (u *PageInfoUpsertOne) UpdateOgVideoType() *PageInfoUpsertOne {
	return u.Update(func(s *PageInfoUpsert) {
		s.UpdateOgVideoType()
	})
}

// SetOgVideoURL sets the "og_video_url" field.
func (u *PageInfoUpsertOne) SetOgVideoURL(v string) *PageInfoUpsertOne {
	return u.Update(func(s *PageInfoUpsert) {
		s.SetOgVideoURL(v)
	})
}

// UpdateOgVideoURL sets the "og_video_url" field to the value that was provided on create.
func (u *PageInfoUpsertOne) UpdateOgVideoURL() *PageInfoUpsertOne {
	return u.Update(func(s *PageInfoUpsert) {
		s.UpdateOgVideoURL()
	})
}

// SetOgVideoSecureURL sets the "og_video_secure_url" field.
func (u *PageInfoUpsertOne) SetOgVideoSecureURL(v string) *PageInfoUpsertOne {
	return u.Update(func(s *PageInfoUpsert) {
		s.SetOgVideoSecureURL(v)
	})
}

// UpdateOgVideoSecureURL sets the "og_video_secure_url" field to the value that was provided on create.
func (u *PageInfoUpsertOne) UpdateOgVideoSecureURL() *PageInfoUpsertOne {
	return u.Update(func(s *PageInfoUpsert) {
		s.UpdateOgVideoSecureURL()
	})
}

// SetOgVideoWidth sets the "og_video_width" field.
func (u *PageInfoUpsertOne) SetOgVideoWidth(v string) *PageInfoUpsertOne {
	return u.Update(func(s *PageInfoUpsert) {
		s.SetOgVideoWidth(v)
	})
}

// UpdateOgVideoWidth sets the "og_video_width" field to the value that was provided on create.
func (u *PageInfoUpsertOne) UpdateOgVideoWidth() *PageInfoUpsertOne {
	return u.Update(func(s *PageInfoUpsert) {
		s.UpdateOgVideoWidth()
	})
}

// SetOgVideoHeight sets the "og_video_height" field.
func (u *PageInfoUpsertOne) SetOgVideoHeight(v string) *PageInfoUpsertOne {
	return u.Update(func(s *PageInfoUpsert) {
		s.SetOgVideoHeight(v)
	})
}

// UpdateOgVideoHeight sets the "og_video_height" field to the value that was provided on create.
func (u *PageInfoUpsertOne) UpdateOgVideoHeight() *PageInfoUpsertOne {
	return u.Update(func(s *PageInfoUpsert) {
		s.UpdateOgVideoHeight()
	})
}

// Exec executes the query.
func (u *PageInfoUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for PageInfoCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *PageInfoUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *PageInfoUpsertOne) ID(ctx context.Context) (id int64, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *PageInfoUpsertOne) IDX(ctx context.Context) int64 {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// PageInfoCreateBulk is the builder for creating many PageInfo entities in bulk.
type PageInfoCreateBulk struct {
	config
	builders []*PageInfoCreate
	conflict []sql.ConflictOption
}

// Save creates the PageInfo entities in the database.
func (picb *PageInfoCreateBulk) Save(ctx context.Context) ([]*PageInfo, error) {
	specs := make([]*sqlgraph.CreateSpec, len(picb.builders))
	nodes := make([]*PageInfo, len(picb.builders))
	mutators := make([]Mutator, len(picb.builders))
	for i := range picb.builders {
		func(i int, root context.Context) {
			builder := picb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*PageInfoMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, picb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = picb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, picb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, picb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (picb *PageInfoCreateBulk) SaveX(ctx context.Context) []*PageInfo {
	v, err := picb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (picb *PageInfoCreateBulk) Exec(ctx context.Context) error {
	_, err := picb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (picb *PageInfoCreateBulk) ExecX(ctx context.Context) {
	if err := picb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.PageInfo.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.PageInfoUpsert) {
//			SetDomain(v+v).
//		}).
//		Exec(ctx)
func (picb *PageInfoCreateBulk) OnConflict(opts ...sql.ConflictOption) *PageInfoUpsertBulk {
	picb.conflict = opts
	return &PageInfoUpsertBulk{
		create: picb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.PageInfo.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (picb *PageInfoCreateBulk) OnConflictColumns(columns ...string) *PageInfoUpsertBulk {
	picb.conflict = append(picb.conflict, sql.ConflictColumns(columns...))
	return &PageInfoUpsertBulk{
		create: picb,
	}
}

// PageInfoUpsertBulk is the builder for "upsert"-ing
// a bulk of PageInfo nodes.
type PageInfoUpsertBulk struct {
	create *PageInfoCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.PageInfo.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(pageinfo.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *PageInfoUpsertBulk) UpdateNewValues() *PageInfoUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(pageinfo.FieldID)
			}
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(pageinfo.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.PageInfo.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *PageInfoUpsertBulk) Ignore() *PageInfoUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *PageInfoUpsertBulk) DoNothing() *PageInfoUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the PageInfoCreateBulk.OnConflict
// documentation for more info.
func (u *PageInfoUpsertBulk) Update(set func(*PageInfoUpsert)) *PageInfoUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&PageInfoUpsert{UpdateSet: update})
	}))
	return u
}

// SetDomain sets the "domain" field.
func (u *PageInfoUpsertBulk) SetDomain(v string) *PageInfoUpsertBulk {
	return u.Update(func(s *PageInfoUpsert) {
		s.SetDomain(v)
	})
}

// UpdateDomain sets the "domain" field to the value that was provided on create.
func (u *PageInfoUpsertBulk) UpdateDomain() *PageInfoUpsertBulk {
	return u.Update(func(s *PageInfoUpsert) {
		s.UpdateDomain()
	})
}

// SetPort sets the "port" field.
func (u *PageInfoUpsertBulk) SetPort(v string) *PageInfoUpsertBulk {
	return u.Update(func(s *PageInfoUpsert) {
		s.SetPort(v)
	})
}

// UpdatePort sets the "port" field to the value that was provided on create.
func (u *PageInfoUpsertBulk) UpdatePort() *PageInfoUpsertBulk {
	return u.Update(func(s *PageInfoUpsert) {
		s.UpdatePort()
	})
}

// SetIsHTTPS sets the "is_https" field.
func (u *PageInfoUpsertBulk) SetIsHTTPS(v bool) *PageInfoUpsertBulk {
	return u.Update(func(s *PageInfoUpsert) {
		s.SetIsHTTPS(v)
	})
}

// UpdateIsHTTPS sets the "is_https" field to the value that was provided on create.
func (u *PageInfoUpsertBulk) UpdateIsHTTPS() *PageInfoUpsertBulk {
	return u.Update(func(s *PageInfoUpsert) {
		s.UpdateIsHTTPS()
	})
}

// SetIndexedURL sets the "indexed_url" field.
func (u *PageInfoUpsertBulk) SetIndexedURL(v string) *PageInfoUpsertBulk {
	return u.Update(func(s *PageInfoUpsert) {
		s.SetIndexedURL(v)
	})
}

// UpdateIndexedURL sets the "indexed_url" field to the value that was provided on create.
func (u *PageInfoUpsertBulk) UpdateIndexedURL() *PageInfoUpsertBulk {
	return u.Update(func(s *PageInfoUpsert) {
		s.UpdateIndexedURL()
	})
}

// SetPath sets the "path" field.
func (u *PageInfoUpsertBulk) SetPath(v string) *PageInfoUpsertBulk {
	return u.Update(func(s *PageInfoUpsert) {
		s.SetPath(v)
	})
}

// UpdatePath sets the "path" field to the value that was provided on create.
func (u *PageInfoUpsertBulk) UpdatePath() *PageInfoUpsertBulk {
	return u.Update(func(s *PageInfoUpsert) {
		s.UpdatePath()
	})
}

// SetQuerystring sets the "querystring" field.
func (u *PageInfoUpsertBulk) SetQuerystring(v string) *PageInfoUpsertBulk {
	return u.Update(func(s *PageInfoUpsert) {
		s.SetQuerystring(v)
	})
}

// UpdateQuerystring sets the "querystring" field to the value that was provided on create.
func (u *PageInfoUpsertBulk) UpdateQuerystring() *PageInfoUpsertBulk {
	return u.Update(func(s *PageInfoUpsert) {
		s.UpdateQuerystring()
	})
}

// SetURL sets the "url" field.
func (u *PageInfoUpsertBulk) SetURL(v string) *PageInfoUpsertBulk {
	return u.Update(func(s *PageInfoUpsert) {
		s.SetURL(v)
	})
}

// UpdateURL sets the "url" field to the value that was provided on create.
func (u *PageInfoUpsertBulk) UpdateURL() *PageInfoUpsertBulk {
	return u.Update(func(s *PageInfoUpsert) {
		s.UpdateURL()
	})
}

// SetCountReferred sets the "count_referred" field.
func (u *PageInfoUpsertBulk) SetCountReferred(v int64) *PageInfoUpsertBulk {
	return u.Update(func(s *PageInfoUpsert) {
		s.SetCountReferred(v)
	})
}

// AddCountReferred adds v to the "count_referred" field.
func (u *PageInfoUpsertBulk) AddCountReferred(v int64) *PageInfoUpsertBulk {
	return u.Update(func(s *PageInfoUpsert) {
		s.AddCountReferred(v)
	})
}

// UpdateCountReferred sets the "count_referred" field to the value that was provided on create.
func (u *PageInfoUpsertBulk) UpdateCountReferred() *PageInfoUpsertBulk {
	return u.Update(func(s *PageInfoUpsert) {
		s.UpdateCountReferred()
	})
}

// SetStatus sets the "status" field.
func (u *PageInfoUpsertBulk) SetStatus(v pageinfo.Status) *PageInfoUpsertBulk {
	return u.Update(func(s *PageInfoUpsert) {
		s.SetStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *PageInfoUpsertBulk) UpdateStatus() *PageInfoUpsertBulk {
	return u.Update(func(s *PageInfoUpsert) {
		s.UpdateStatus()
	})
}

// SetCreatedBy sets the "created_by" field.
func (u *PageInfoUpsertBulk) SetCreatedBy(v string) *PageInfoUpsertBulk {
	return u.Update(func(s *PageInfoUpsert) {
		s.SetCreatedBy(v)
	})
}

// UpdateCreatedBy sets the "created_by" field to the value that was provided on create.
func (u *PageInfoUpsertBulk) UpdateCreatedBy() *PageInfoUpsertBulk {
	return u.Update(func(s *PageInfoUpsert) {
		s.UpdateCreatedBy()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *PageInfoUpsertBulk) SetUpdatedAt(v time.Time) *PageInfoUpsertBulk {
	return u.Update(func(s *PageInfoUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *PageInfoUpsertBulk) UpdateUpdatedAt() *PageInfoUpsertBulk {
	return u.Update(func(s *PageInfoUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetUpdatedBy sets the "updated_by" field.
func (u *PageInfoUpsertBulk) SetUpdatedBy(v string) *PageInfoUpsertBulk {
	return u.Update(func(s *PageInfoUpsert) {
		s.SetUpdatedBy(v)
	})
}

// UpdateUpdatedBy sets the "updated_by" field to the value that was provided on create.
func (u *PageInfoUpsertBulk) UpdateUpdatedBy() *PageInfoUpsertBulk {
	return u.Update(func(s *PageInfoUpsert) {
		s.UpdateUpdatedBy()
	})
}

// SetTitle sets the "title" field.
func (u *PageInfoUpsertBulk) SetTitle(v string) *PageInfoUpsertBulk {
	return u.Update(func(s *PageInfoUpsert) {
		s.SetTitle(v)
	})
}

// UpdateTitle sets the "title" field to the value that was provided on create.
func (u *PageInfoUpsertBulk) UpdateTitle() *PageInfoUpsertBulk {
	return u.Update(func(s *PageInfoUpsert) {
		s.UpdateTitle()
	})
}

// SetDescription sets the "description" field.
func (u *PageInfoUpsertBulk) SetDescription(v string) *PageInfoUpsertBulk {
	return u.Update(func(s *PageInfoUpsert) {
		s.SetDescription(v)
	})
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *PageInfoUpsertBulk) UpdateDescription() *PageInfoUpsertBulk {
	return u.Update(func(s *PageInfoUpsert) {
		s.UpdateDescription()
	})
}

// SetKeywords sets the "keywords" field.
func (u *PageInfoUpsertBulk) SetKeywords(v string) *PageInfoUpsertBulk {
	return u.Update(func(s *PageInfoUpsert) {
		s.SetKeywords(v)
	})
}

// UpdateKeywords sets the "keywords" field to the value that was provided on create.
func (u *PageInfoUpsertBulk) UpdateKeywords() *PageInfoUpsertBulk {
	return u.Update(func(s *PageInfoUpsert) {
		s.UpdateKeywords()
	})
}

// SetContentLanguage sets the "content_language" field.
func (u *PageInfoUpsertBulk) SetContentLanguage(v string) *PageInfoUpsertBulk {
	return u.Update(func(s *PageInfoUpsert) {
		s.SetContentLanguage(v)
	})
}

// UpdateContentLanguage sets the "content_language" field to the value that was provided on create.
func (u *PageInfoUpsertBulk) UpdateContentLanguage() *PageInfoUpsertBulk {
	return u.Update(func(s *PageInfoUpsert) {
		s.UpdateContentLanguage()
	})
}

// SetTwitterCard sets the "twitter_card" field.
func (u *PageInfoUpsertBulk) SetTwitterCard(v string) *PageInfoUpsertBulk {
	return u.Update(func(s *PageInfoUpsert) {
		s.SetTwitterCard(v)
	})
}

// UpdateTwitterCard sets the "twitter_card" field to the value that was provided on create.
func (u *PageInfoUpsertBulk) UpdateTwitterCard() *PageInfoUpsertBulk {
	return u.Update(func(s *PageInfoUpsert) {
		s.UpdateTwitterCard()
	})
}

// SetTwitterURL sets the "twitter_url" field.
func (u *PageInfoUpsertBulk) SetTwitterURL(v string) *PageInfoUpsertBulk {
	return u.Update(func(s *PageInfoUpsert) {
		s.SetTwitterURL(v)
	})
}

// UpdateTwitterURL sets the "twitter_url" field to the value that was provided on create.
func (u *PageInfoUpsertBulk) UpdateTwitterURL() *PageInfoUpsertBulk {
	return u.Update(func(s *PageInfoUpsert) {
		s.UpdateTwitterURL()
	})
}

// SetTwitterTitle sets the "twitter_title" field.
func (u *PageInfoUpsertBulk) SetTwitterTitle(v string) *PageInfoUpsertBulk {
	return u.Update(func(s *PageInfoUpsert) {
		s.SetTwitterTitle(v)
	})
}

// UpdateTwitterTitle sets the "twitter_title" field to the value that was provided on create.
func (u *PageInfoUpsertBulk) UpdateTwitterTitle() *PageInfoUpsertBulk {
	return u.Update(func(s *PageInfoUpsert) {
		s.UpdateTwitterTitle()
	})
}

// SetTwitterDescription sets the "twitter_description" field.
func (u *PageInfoUpsertBulk) SetTwitterDescription(v string) *PageInfoUpsertBulk {
	return u.Update(func(s *PageInfoUpsert) {
		s.SetTwitterDescription(v)
	})
}

// UpdateTwitterDescription sets the "twitter_description" field to the value that was provided on create.
func (u *PageInfoUpsertBulk) UpdateTwitterDescription() *PageInfoUpsertBulk {
	return u.Update(func(s *PageInfoUpsert) {
		s.UpdateTwitterDescription()
	})
}

// SetTwitterImage sets the "twitter_image" field.
func (u *PageInfoUpsertBulk) SetTwitterImage(v string) *PageInfoUpsertBulk {
	return u.Update(func(s *PageInfoUpsert) {
		s.SetTwitterImage(v)
	})
}

// UpdateTwitterImage sets the "twitter_image" field to the value that was provided on create.
func (u *PageInfoUpsertBulk) UpdateTwitterImage() *PageInfoUpsertBulk {
	return u.Update(func(s *PageInfoUpsert) {
		s.UpdateTwitterImage()
	})
}

// SetOgSiteName sets the "og_site_name" field.
func (u *PageInfoUpsertBulk) SetOgSiteName(v string) *PageInfoUpsertBulk {
	return u.Update(func(s *PageInfoUpsert) {
		s.SetOgSiteName(v)
	})
}

// UpdateOgSiteName sets the "og_site_name" field to the value that was provided on create.
func (u *PageInfoUpsertBulk) UpdateOgSiteName() *PageInfoUpsertBulk {
	return u.Update(func(s *PageInfoUpsert) {
		s.UpdateOgSiteName()
	})
}

// SetOgLocale sets the "og_locale" field.
func (u *PageInfoUpsertBulk) SetOgLocale(v string) *PageInfoUpsertBulk {
	return u.Update(func(s *PageInfoUpsert) {
		s.SetOgLocale(v)
	})
}

// UpdateOgLocale sets the "og_locale" field to the value that was provided on create.
func (u *PageInfoUpsertBulk) UpdateOgLocale() *PageInfoUpsertBulk {
	return u.Update(func(s *PageInfoUpsert) {
		s.UpdateOgLocale()
	})
}

// SetOgTitle sets the "og_title" field.
func (u *PageInfoUpsertBulk) SetOgTitle(v string) *PageInfoUpsertBulk {
	return u.Update(func(s *PageInfoUpsert) {
		s.SetOgTitle(v)
	})
}

// UpdateOgTitle sets the "og_title" field to the value that was provided on create.
func (u *PageInfoUpsertBulk) UpdateOgTitle() *PageInfoUpsertBulk {
	return u.Update(func(s *PageInfoUpsert) {
		s.UpdateOgTitle()
	})
}

// SetOgDescription sets the "og_description" field.
func (u *PageInfoUpsertBulk) SetOgDescription(v string) *PageInfoUpsertBulk {
	return u.Update(func(s *PageInfoUpsert) {
		s.SetOgDescription(v)
	})
}

// UpdateOgDescription sets the "og_description" field to the value that was provided on create.
func (u *PageInfoUpsertBulk) UpdateOgDescription() *PageInfoUpsertBulk {
	return u.Update(func(s *PageInfoUpsert) {
		s.UpdateOgDescription()
	})
}

// SetOgType sets the "og_type" field.
func (u *PageInfoUpsertBulk) SetOgType(v string) *PageInfoUpsertBulk {
	return u.Update(func(s *PageInfoUpsert) {
		s.SetOgType(v)
	})
}

// UpdateOgType sets the "og_type" field to the value that was provided on create.
func (u *PageInfoUpsertBulk) UpdateOgType() *PageInfoUpsertBulk {
	return u.Update(func(s *PageInfoUpsert) {
		s.UpdateOgType()
	})
}

// SetOgURL sets the "og_url" field.
func (u *PageInfoUpsertBulk) SetOgURL(v string) *PageInfoUpsertBulk {
	return u.Update(func(s *PageInfoUpsert) {
		s.SetOgURL(v)
	})
}

// UpdateOgURL sets the "og_url" field to the value that was provided on create.
func (u *PageInfoUpsertBulk) UpdateOgURL() *PageInfoUpsertBulk {
	return u.Update(func(s *PageInfoUpsert) {
		s.UpdateOgURL()
	})
}

// SetOgImage sets the "og_image" field.
func (u *PageInfoUpsertBulk) SetOgImage(v string) *PageInfoUpsertBulk {
	return u.Update(func(s *PageInfoUpsert) {
		s.SetOgImage(v)
	})
}

// UpdateOgImage sets the "og_image" field to the value that was provided on create.
func (u *PageInfoUpsertBulk) UpdateOgImage() *PageInfoUpsertBulk {
	return u.Update(func(s *PageInfoUpsert) {
		s.UpdateOgImage()
	})
}

// SetOgImageType sets the "og_image_type" field.
func (u *PageInfoUpsertBulk) SetOgImageType(v string) *PageInfoUpsertBulk {
	return u.Update(func(s *PageInfoUpsert) {
		s.SetOgImageType(v)
	})
}

// UpdateOgImageType sets the "og_image_type" field to the value that was provided on create.
func (u *PageInfoUpsertBulk) UpdateOgImageType() *PageInfoUpsertBulk {
	return u.Update(func(s *PageInfoUpsert) {
		s.UpdateOgImageType()
	})
}

// SetOgImageURL sets the "og_image_url" field.
func (u *PageInfoUpsertBulk) SetOgImageURL(v string) *PageInfoUpsertBulk {
	return u.Update(func(s *PageInfoUpsert) {
		s.SetOgImageURL(v)
	})
}

// UpdateOgImageURL sets the "og_image_url" field to the value that was provided on create.
func (u *PageInfoUpsertBulk) UpdateOgImageURL() *PageInfoUpsertBulk {
	return u.Update(func(s *PageInfoUpsert) {
		s.UpdateOgImageURL()
	})
}

// SetOgImageSecureURL sets the "og_image_secure_url" field.
func (u *PageInfoUpsertBulk) SetOgImageSecureURL(v string) *PageInfoUpsertBulk {
	return u.Update(func(s *PageInfoUpsert) {
		s.SetOgImageSecureURL(v)
	})
}

// UpdateOgImageSecureURL sets the "og_image_secure_url" field to the value that was provided on create.
func (u *PageInfoUpsertBulk) UpdateOgImageSecureURL() *PageInfoUpsertBulk {
	return u.Update(func(s *PageInfoUpsert) {
		s.UpdateOgImageSecureURL()
	})
}

// SetOgImageWidth sets the "og_image_width" field.
func (u *PageInfoUpsertBulk) SetOgImageWidth(v string) *PageInfoUpsertBulk {
	return u.Update(func(s *PageInfoUpsert) {
		s.SetOgImageWidth(v)
	})
}

// UpdateOgImageWidth sets the "og_image_width" field to the value that was provided on create.
func (u *PageInfoUpsertBulk) UpdateOgImageWidth() *PageInfoUpsertBulk {
	return u.Update(func(s *PageInfoUpsert) {
		s.UpdateOgImageWidth()
	})
}

// SetOgImageHeight sets the "og_image_height" field.
func (u *PageInfoUpsertBulk) SetOgImageHeight(v string) *PageInfoUpsertBulk {
	return u.Update(func(s *PageInfoUpsert) {
		s.SetOgImageHeight(v)
	})
}

// UpdateOgImageHeight sets the "og_image_height" field to the value that was provided on create.
func (u *PageInfoUpsertBulk) UpdateOgImageHeight() *PageInfoUpsertBulk {
	return u.Update(func(s *PageInfoUpsert) {
		s.UpdateOgImageHeight()
	})
}

// SetOgVideo sets the "og_video" field.
func (u *PageInfoUpsertBulk) SetOgVideo(v string) *PageInfoUpsertBulk {
	return u.Update(func(s *PageInfoUpsert) {
		s.SetOgVideo(v)
	})
}

// UpdateOgVideo sets the "og_video" field to the value that was provided on create.
func (u *PageInfoUpsertBulk) UpdateOgVideo() *PageInfoUpsertBulk {
	return u.Update(func(s *PageInfoUpsert) {
		s.UpdateOgVideo()
	})
}

// SetOgVideoType sets the "og_video_type" field.
func (u *PageInfoUpsertBulk) SetOgVideoType(v string) *PageInfoUpsertBulk {
	return u.Update(func(s *PageInfoUpsert) {
		s.SetOgVideoType(v)
	})
}

// UpdateOgVideoType sets the "og_video_type" field to the value that was provided on create.
func (u *PageInfoUpsertBulk) UpdateOgVideoType() *PageInfoUpsertBulk {
	return u.Update(func(s *PageInfoUpsert) {
		s.UpdateOgVideoType()
	})
}

// SetOgVideoURL sets the "og_video_url" field.
func (u *PageInfoUpsertBulk) SetOgVideoURL(v string) *PageInfoUpsertBulk {
	return u.Update(func(s *PageInfoUpsert) {
		s.SetOgVideoURL(v)
	})
}

// UpdateOgVideoURL sets the "og_video_url" field to the value that was provided on create.
func (u *PageInfoUpsertBulk) UpdateOgVideoURL() *PageInfoUpsertBulk {
	return u.Update(func(s *PageInfoUpsert) {
		s.UpdateOgVideoURL()
	})
}

// SetOgVideoSecureURL sets the "og_video_secure_url" field.
func (u *PageInfoUpsertBulk) SetOgVideoSecureURL(v string) *PageInfoUpsertBulk {
	return u.Update(func(s *PageInfoUpsert) {
		s.SetOgVideoSecureURL(v)
	})
}

// UpdateOgVideoSecureURL sets the "og_video_secure_url" field to the value that was provided on create.
func (u *PageInfoUpsertBulk) UpdateOgVideoSecureURL() *PageInfoUpsertBulk {
	return u.Update(func(s *PageInfoUpsert) {
		s.UpdateOgVideoSecureURL()
	})
}

// SetOgVideoWidth sets the "og_video_width" field.
func (u *PageInfoUpsertBulk) SetOgVideoWidth(v string) *PageInfoUpsertBulk {
	return u.Update(func(s *PageInfoUpsert) {
		s.SetOgVideoWidth(v)
	})
}

// UpdateOgVideoWidth sets the "og_video_width" field to the value that was provided on create.
func (u *PageInfoUpsertBulk) UpdateOgVideoWidth() *PageInfoUpsertBulk {
	return u.Update(func(s *PageInfoUpsert) {
		s.UpdateOgVideoWidth()
	})
}

// SetOgVideoHeight sets the "og_video_height" field.
func (u *PageInfoUpsertBulk) SetOgVideoHeight(v string) *PageInfoUpsertBulk {
	return u.Update(func(s *PageInfoUpsert) {
		s.SetOgVideoHeight(v)
	})
}

// UpdateOgVideoHeight sets the "og_video_height" field to the value that was provided on create.
func (u *PageInfoUpsertBulk) UpdateOgVideoHeight() *PageInfoUpsertBulk {
	return u.Update(func(s *PageInfoUpsert) {
		s.UpdateOgVideoHeight()
	})
}

// Exec executes the query.
func (u *PageInfoUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the PageInfoCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for PageInfoCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *PageInfoUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
